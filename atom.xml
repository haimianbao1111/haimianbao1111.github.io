<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HJY</title>
  
  <subtitle>一枚90后程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haimianbao1111.github.io/"/>
  <updated>2018-02-14T15:48:20.316Z</updated>
  <id>http://haimianbao1111.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>.Net Core 学习</title>
    <link href="http://haimianbao1111.github.io/2018/02/14/Net-Core-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://haimianbao1111.github.io/2018/02/14/Net-Core-学习/</id>
    <published>2018-02-14T15:42:07.000Z</published>
    <updated>2018-02-14T15:48:20.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h1><p>大型分布式互联网架构开发实战（Docker + SSO + TDD + RabbitMQ + Redis + InfluxDb + Grafana + Metrics + 新一代.NET Core on Linux……），屏幕录制讲解+ 微信群解答两种方式，课程简介 ：<br><a href="http://video.jessetalk.cn/course/5" target="_blank" rel="noopener">http://video.jessetalk.cn/course/5</a><br>注册时填写 优惠码 3QK54 可获得50元代金券，相当于298-50=248元：<br><a href="http://video.jessetalk.cn/register?inviteCode=3QK54" target="_blank" rel="noopener">http://video.jessetalk.cn/register?inviteCode=3QK54</a></p><h1 id="二-笔记"><a href="#二-笔记" class="headerlink" title="二.笔记"></a>二.笔记</h1><h2 id="1-正在学习ing"><a href="#1-正在学习ing" class="headerlink" title="1. 正在学习ing"></a>1. 正在学习ing</h2><h2 id="2-略………"><a href="#2-略………" class="headerlink" title="2. 略………"></a>2. 略………</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一.概述&quot;&gt;&lt;/a&gt;一.概述&lt;/h1&gt;&lt;p&gt;大型分布式互联网架构开发实战（Docker + SSO + TDD + RabbitMQ + Redis + InfluxD
      
    
    </summary>
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/categories/Asp-Net/"/>
    
    
      <category term="Asp.Net,.Net Core" scheme="http://haimianbao1111.github.io/tags/Asp-Net-Net-Core/"/>
    
  </entry>
  
  <entry>
    <title>一些代码记录</title>
    <link href="http://haimianbao1111.github.io/2018/02/14/%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95/"/>
    <id>http://haimianbao1111.github.io/2018/02/14/一些代码记录/</id>
    <published>2018-02-14T04:10:00.000Z</published>
    <updated>2018-02-14T04:20:24.471Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-int-TryParse"><a href="#1-int-TryParse" class="headerlink" title="1.int.TryParse"></a>1.int.TryParse</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 批量删除</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;ids&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public ActionResult Delete(string ids)</span><br><span class="line">&#123;</span><br><span class="line">    int success = 0;</span><br><span class="line">    string[] ss = ids.Split(&apos;,&apos;);</span><br><span class="line">    foreach (var item in ss)</span><br><span class="line">    &#123;</span><br><span class="line">        int x;</span><br><span class="line">        if (int.TryParse(item, out x))</span><br><span class="line">        &#123;</span><br><span class="line">            VideoDAL.Delete(x);</span><br><span class="line">            success++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return Content(&quot;成功删除&quot; + success + &quot;条记录！&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-ValidateAntiForgeryToken"><a href="#2-ValidateAntiForgeryToken" class="headerlink" title="2.[ValidateAntiForgeryToken]"></a>2.[ValidateAntiForgeryToken]</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[ValidateAntiForgeryToken]</span><br><span class="line">[HttpPost]</span><br><span class="line">public ActionResult Add(VideoMDL model)</span><br><span class="line">&#123;</span><br><span class="line">    if (model.id == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        VideoDAL.Insert(model);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    VideoDAL.Update(model);</span><br><span class="line">    &#125;</span><br><span class="line">    return Redirect(&quot;/System/VideoManager/&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法：<a href="https://www.cnblogs.com/hechunming/p/4647646.html" target="_blank" rel="noopener">https://www.cnblogs.com/hechunming/p/4647646.html</a></p><h1 id="3-string-Join-“-”-keys-ToArray"><a href="#3-string-Join-“-”-keys-ToArray" class="headerlink" title="3.string.Join(“,”, keys.ToArray())"></a>3.string.Join(“,”, keys.ToArray())</h1><p>使用方法：<a href="https://www.cnblogs.com/honghong75042/p/7047817.html" target="_blank" rel="noopener">https://www.cnblogs.com/honghong75042/p/7047817.html</a></p><h1 id="4-其他技巧"><a href="#4-其他技巧" class="headerlink" title="4.其他技巧"></a>4.其他技巧</h1><p>待完善……<br>…………</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-int-TryParse&quot;&gt;&lt;a href=&quot;#1-int-TryParse&quot; class=&quot;headerlink&quot; title=&quot;1.int.TryParse&quot;&gt;&lt;/a&gt;1.int.TryParse&lt;/h1&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="C#" scheme="http://haimianbao1111.github.io/categories/C/"/>
    
    
      <category term="C#,小技巧" scheme="http://haimianbao1111.github.io/tags/C-%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 使用过程遇到的问题</title>
    <link href="http://haimianbao1111.github.io/2018/02/12/Hexo-%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://haimianbao1111.github.io/2018/02/12/Hexo-使用过程遇到的问题/</id>
    <published>2018-02-12T09:30:40.000Z</published>
    <updated>2018-02-12T09:48:54.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="问题描述：-在hexo下新建一个MD文件，出现Template-render-error-unknown-path"><a href="#问题描述：-在hexo下新建一个MD文件，出现Template-render-error-unknown-path" class="headerlink" title="问题描述： 在hexo下新建一个MD文件，出现Template render error: unknown path?"></a>问题描述： 在hexo下新建一个MD文件，出现Template render error: unknown path?</h2><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个是hexo转义时候发生的错误，你文章中可能出现了&#123;&#123;&#125;&#125;，&#123;% %&#125;。你可以将出现的代码，用 `进行注释下就可以了.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;问题描述：-在hexo下新建一个MD文件，出现Template-render-error-unknown-path&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Hexo" scheme="http://haimianbao1111.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://haimianbao1111.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>C#基础--浅谈XML读取以及简单的ORM实现</title>
    <link href="http://haimianbao1111.github.io/2018/02/12/C-%E5%9F%BA%E7%A1%80-%E6%B5%85%E8%B0%88XML%E8%AF%BB%E5%8F%96%E4%BB%A5%E5%8F%8A%E7%AE%80%E5%8D%95%E7%9A%84ORM%E5%AE%9E%E7%8E%B0/"/>
    <id>http://haimianbao1111.github.io/2018/02/12/C-基础-浅谈XML读取以及简单的ORM实现/</id>
    <published>2018-02-12T08:15:08.000Z</published>
    <updated>2018-02-12T09:27:12.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>背景: 在开发ASP.NETMVC4 项目中,虽然web.config配置满足了大部分需求,不过对于某些特定业务,我们有时候需要添加新的配置文件来记录配置信息,那么XML文件配置无疑是我们选择的一个方案之一。下面简单谈谈XML的读取。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="一-xml-linq读取xml"><a href="#一-xml-linq读取xml" class="headerlink" title="一.xml.linq读取xml"></a>一.xml.linq读取xml</h2><p>1.新建一个data.XML文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;Customers&gt;</span><br><span class="line">  &lt;Customer&gt;</span><br><span class="line">    &lt;Name&gt;Frank&lt;/Name&gt;</span><br><span class="line">    &lt;City&gt;成都&lt;/City&gt;</span><br><span class="line">    &lt;Contact&gt;2233&lt;/Contact&gt;</span><br><span class="line">  &lt;/Customer&gt;</span><br><span class="line">  &lt;Customer&gt;</span><br><span class="line">    &lt;Name&gt;Vincent&lt;/Name&gt;</span><br><span class="line">    &lt;City&gt;美国&lt;/City&gt;</span><br><span class="line">    &lt;Contact&gt;4455&lt;/Contact&gt;</span><br><span class="line">  &lt;/Customer&gt;</span><br><span class="line">&lt;/Customers&gt;</span><br></pre></td></tr></table></figure></p><p>2.新建customer实体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Customers</span><br><span class="line">&#123;</span><br><span class="line">    public string Name &#123; get; set; &#125;</span><br><span class="line">    public string City &#123; get; set; &#125;</span><br><span class="line">    public string Contact &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.System.Xml.Linq 域名. 就可以轻松将customer信息读取完毕。XDocument.Load读取xml文件. Descendants可以读取Customer节点返回一个集合.再通过Linq的select方法.读取每个Customer节点数据,转换成List<customer>对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var customsers = XDocument.Load(&quot;data.xml&quot;).Descendants(&quot;Customer&quot;)</span><br><span class="line">        .Select(x =&gt; new Customers()</span><br><span class="line">        &#123;</span><br><span class="line">            Name = x.Element(&quot;Name&quot;).Value,</span><br><span class="line">            City = x.Element(&quot;City&quot;).Value,</span><br><span class="line">            Contact = x.Element(&quot;Contact&quot;).Value,</span><br><span class="line">        &#125;).ToList();</span><br></pre></td></tr></table></figure></customer></p><h1 id="二-简单的ORM"><a href="#二-简单的ORM" class="headerlink" title="二. 简单的ORM"></a>二. 简单的ORM</h1><p>上面介绍了XML的读取,那XML读取有没有可以更简单的方式呢. 比如类似于Database的ORM框架. 只需要实体名称与DB SQL的select字段名称一样就会自动映射到实体上面。不需要我们去写代码一个一个去Element上取。 下面我们就来简单实现一个。下面代码只是提供思路:<br>其实我们可以通过反射和打标签来实现, 大家有空不妨去看看小弟写得两篇 打标签和反射的文章。<br><a href="http://www.cnblogs.com/FourLeafCloverZc/p/4055067.html" target="_blank" rel="noopener">C#基础—Attribute(标签） 和 reflect（反射) 应用</a><br><a href="http://www.cnblogs.com/FourLeafCloverZc/p/4287114.html" target="_blank" rel="noopener">C#基础—Attribute(标签） 和 reflect（反射) 应用二</a></p><h2 id="1-新建XmlAttribute类。"><a href="#1-新建XmlAttribute类。" class="headerlink" title="1.新建XmlAttribute类。"></a>1.新建XmlAttribute类。</h2><p>提供了ElementName属性用于标记实体类字段对应的xml节点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class XmlAttribute : Attribute</span><br><span class="line">&#123;</span><br><span class="line">    public string ElementName</span><br><span class="line">    &#123;</span><br><span class="line">        get;</span><br><span class="line">        set;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-修改新建的Customler类"><a href="#2-修改新建的Customler类" class="headerlink" title="2. 修改新建的Customler类."></a>2. 修改新建的Customler类.</h2><p>ElementName 对应的xml节点名称, 因为有可能开发者xml节点名称和实体名称不一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Customers</span><br><span class="line">&#123;</span><br><span class="line">    [Xml(ElementName = &quot;Name&quot;)]</span><br><span class="line">    public string Name &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    [Xml(ElementName = &quot;City&quot;)]</span><br><span class="line">    public string City &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    [Xml(ElementName = &quot;Contact&quot;)]</span><br><span class="line">    public string Contact &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="3-提供XmlReader类-用于读取xml数据"><a href="#3-提供XmlReader类-用于读取xml数据" class="headerlink" title="3. 提供XmlReader类,用于读取xml数据"></a>3. 提供XmlReader类,用于读取xml数据</h2><p>(1).先通过反射读取实体,比如Customer类的 字段名称和对应的xml节点名称存入到dic 字典里面.<br>(2).遍历字段，取值赋给实体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">public class XmlReader</span><br><span class="line">   &#123;</span><br><span class="line">       public static List&lt;T&gt; ReadList&lt;T&gt;(string filePath,string rootName) where T:class,new ()</span><br><span class="line">       &#123;</span><br><span class="line">           List&lt;PropertyInfo&gt; propertyInfos = ((T)Activator.CreateInstance(typeof(T))).GetType().GetProperties().ToList();</span><br><span class="line">           List&lt;T&gt; result = new List&lt;T&gt;();</span><br><span class="line">           var xmlData = XDocument.Load(filePath);</span><br><span class="line"></span><br><span class="line">           //存储实体 属性名称--xml对应节点名称 的key-value值</span><br><span class="line">           Dictionary&lt;string, string&gt; dic = new Dictionary&lt;string, string&gt;();</span><br><span class="line">           propertyInfos</span><br><span class="line">               .ForEach(property =&gt;</span><br><span class="line">               &#123;</span><br><span class="line">                   var attribute = property.GetCustomAttribute(typeof(XmlAttribute)) as XmlAttribute;</span><br><span class="line">                   if (attribute != null)</span><br><span class="line">                   &#123;</span><br><span class="line">                       dic.Add(property.Name, attribute.ElementName);</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;);</span><br><span class="line"></span><br><span class="line">           return xmlData</span><br><span class="line">               .Descendants(rootName)</span><br><span class="line">               .Select(element =&gt;</span><br><span class="line">               &#123;</span><br><span class="line">                   // 实例化一个对象</span><br><span class="line">                   var info = (T)Activator.CreateInstance(typeof(T));</span><br><span class="line"></span><br><span class="line">                   //遍历keyvalue字段,给实体每个字段赋值</span><br><span class="line">                   foreach (KeyValuePair&lt;string, string&gt; pair in dic)</span><br><span class="line">                   &#123;</span><br><span class="line">                       // 读取对象的filed标签</span><br><span class="line">                       var attr = info.GetType().GetProperty(pair.Key);</span><br><span class="line">                       attr.SetValue(info, element.Element(pair.Value).Value);</span><br><span class="line">                   &#125;</span><br><span class="line">                   return info;</span><br><span class="line">               &#125;).ToList();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="4-下面看看结果吧-轻松读取数据了"><a href="#4-下面看看结果吧-轻松读取数据了" class="headerlink" title="4.下面看看结果吧, 轻松读取数据了"></a>4.下面看看结果吧, 轻松读取数据了</h2><p><img src="/images/xmlORM/xml1.png" class="full-image"></p><h1 id="三-总结"><a href="#三-总结" class="headerlink" title="三. 总结"></a>三. 总结</h1><p>本篇只是简简单单的谈了一下XML读取,xml的类型很多,比如在<customer name="frank">这些情况也没有考虑。此类情况如果要再次封装。就需要在XmlAttribute类新增一个AttributeName来实现。而且数据类型除开string,还有int，datetime等。以及xml的嵌套，多层解析xml数据等等。网上应该有很多读取xml的框架,我相信很多公司也会有自己的xml读取的框架。虽然没必要重造轮子。但是作为一个开发者还是可以去想想。如果自己要去开发这些公共框架，也应该知道怎么去做，知道可以通过什么方式去实现。</customer></p><div class="note success"><p>原文引自：<a href="http://www.cnblogs.com/FourLeafCloverZc/p/6565589.html" target="_blank" rel="noopener">http://www.cnblogs.com/FourLeafCloverZc/p/6565589.html</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;背景: 在开发ASP.NETMVC4 项目中,虽然web.config配置满足了大部分需求,不过对于某些特定业务,我们有时候需要添加新的配置
      
    
    </summary>
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/categories/Asp-Net/"/>
    
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>Select2下拉框总结</title>
    <link href="http://haimianbao1111.github.io/2018/02/12/Select2%E4%B8%8B%E6%8B%89%E6%A1%86%E6%80%BB%E7%BB%93/"/>
    <id>http://haimianbao1111.github.io/2018/02/12/Select2下拉框总结/</id>
    <published>2018-02-12T08:14:29.000Z</published>
    <updated>2018-02-12T09:45:26.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>组件说明以及API说明：<br><div class="note success"><p>Select2使用示例地址：<a href="https://select2.github.io/examples.html" target="_blank" rel="noopener">https://select2.github.io/examples.html</a></p><p>Select2参数文档说明：<a href="https://select2.github.io/options.html" target="_blank" rel="noopener">https://select2.github.io/options.html</a></p><p>Select2源码：<a href="https://github.com/select2/select2" target="_blank" rel="noopener">https://github.com/select2/select2</a></p></div></p><h1 id="二、组件特性效果展示"><a href="#二、组件特性效果展示" class="headerlink" title="二、组件特性效果展示"></a>二、组件特性效果展示</h1><h2 id="1、多选效果"><a href="#1、多选效果" class="headerlink" title="1、多选效果"></a>1、多选效果</h2><p><img src="/images/select2/select1.png" class="full-image"></p><h2 id="2、图文结合的效果"><a href="#2、图文结合的效果" class="headerlink" title="2、图文结合的效果"></a>2、图文结合的效果</h2><p><img src="/images/select2/select2.png" class="full-image"></p><h1 id="组件使用"><a href="#组件使用" class="headerlink" title="组件使用"></a>组件使用</h1><h2 id="1、文件需要引入select2-full-js、select2-min-css（4-0-1版本）和jquery-1-8-3及以上"><a href="#1、文件需要引入select2-full-js、select2-min-css（4-0-1版本）和jquery-1-8-3及以上" class="headerlink" title="1、文件需要引入select2.full.js、select2.min.css（4.0.1版本）和jquery.1.8.3及以上"></a>1、文件需要引入select2.full.js、select2.min.css（4.0.1版本）和jquery.1.8.3及以上</h2><p>最新版本的select2如果引用的jquery版本较低的话，某些功能无法正常使用。比如：清除功能allowClear: true</p><p>最新版本请使用标签</p><h2 id="2、placeholder"><a href="#2、placeholder" class="headerlink" title="2、placeholder"></a>2、placeholder</h2><p>placeholder占位提示文字，如果需要清楚功能，则必须设置placeholder。</p><h2 id="3、加载本地数据"><a href="#3、加载本地数据" class="headerlink" title="3、加载本地数据"></a>3、加载本地数据</h2><p>select2默认的数据属性是id、text，新版本可以自定义，但还是用默认的比较好。所以提供的json中最好转换为id、text形式，当然可以添加其他属性。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var data = [&#123; id: 0, text: &apos;enhancement&apos; &#125;</span><br><span class="line">, &#123; id: 1, text: &apos;bug&apos; &#125;</span><br><span class="line">, &#123; id: 2, text: &apos;duplicate&apos; &#125;</span><br><span class="line">, &#123; id: 3, text: &apos;invalid&apos; &#125;</span><br><span class="line">, &#123; id: 4, text: &apos;wontfix&apos; &#125;];</span><br><span class="line"></span><br><span class="line">$(&quot;#c01-select&quot;).select2(&#123;</span><br><span class="line">  data: data,</span><br><span class="line">  placeholder:&apos;请选择&apos;,</span><br><span class="line">  allowClear:true</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="4、加载远程数据"><a href="#4、加载远程数据" class="headerlink" title="4、加载远程数据"></a>4、加载远程数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#c01-select&quot;).select2(&#123;</span><br><span class="line">  ajax: &#123;</span><br><span class="line">    url: &quot;data.json&quot;,</span><br><span class="line">    dataType: &apos;json&apos;,</span><br><span class="line">    delay: 250,</span><br><span class="line">    data: function (params) &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        q: params.term,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    processResults: function (data) &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        results: data</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    cache: true</span><br><span class="line">  &#125;,</span><br><span class="line">  escapeMarkup: function (markup) &#123; return markup; &#125;, </span><br><span class="line">  minimumInputLength: 1,</span><br><span class="line">  templateResult: formatRepo, </span><br><span class="line">  templateSelection: formatRepoSelection </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>说明：<br>q: params.term 查询参数（params.term表示输入框中内容，q发生到服务器的参数名；所以这里你可以添加自定义参数，如：stype:’person’）</p><p>processResults中results: data返回数据（返回最终数据给results，如果我的数据在data.res下，则返回data.res。这个与服务器返回json有关）</p><p>minimumInputLength 最小需要输入多少个字符才进行查询，与之相关的maximumSelectionLength表示最大输入限制。</p><p>escapeMarkup字符转义处理</p><p>templateResult返回结果回调function formatRepo(repo){return repo.text},这样就可以将返回结果的的text显示到下拉框里，当然你可以return repo.text+”1”;等</p><p>templateSelection选中项回调function formatRepoSelection(repo){return repo.text}</p><p>关于返回的 json的格式：select2默认json格式为[{id:1,text:’text’},{id:2,text:’text’}]，新版严格要求这样的格式，当然你可以添加列，如：[{id:1,text:’text’,name:’liu’}]</p><h2 id="5、获取选中项"><a href="#5、获取选中项" class="headerlink" title="5、获取选中项"></a>5、获取选中项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var res=$(&quot;#c01-select&quot;).select2(&quot;data&quot;)[0] ; //单选</span><br><span class="line">var reslist=$(&quot;#c01-select&quot;).select2(&quot;data&quot;);    //多选</span><br><span class="line">if(res==undefined)</span><br><span class="line">&#123;</span><br><span class="line">     alert(&quot;你没有选中任何项&quot;);</span><br><span class="line">&#125;</span><br><span class="line">if(reslist.length)</span><br><span class="line">&#123;</span><br><span class="line">     alert(&quot;你选中任何项&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6、清空选择项和设置不可用"><a href="#6、清空选择项和设置不可用" class="headerlink" title="6、清空选择项和设置不可用"></a>6、清空选择项和设置不可用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//清空选择</span><br><span class="line">$(&quot;#c01-select&quot;).val(null).trigger(&quot;change&quot;);</span><br><span class="line">$(&quot;#c01-select&quot;).val(&quot;你的placeholder&quot;).trigger(&quot;change&quot;);//或者</span><br><span class="line">//disabled</span><br><span class="line">$(&quot;#c01-select&quot;).prop(&quot;disabled&quot;, false);//可用</span><br><span class="line">$(&quot;#c01-select&quot;).prop(&quot;disabled&quot;, true);//不可用</span><br></pre></td></tr></table></figure><h2 id="7、启用多选"><a href="#7、启用多选" class="headerlink" title="7、启用多选"></a>7、启用多选</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#c01-select&quot;).select2(&#123;</span><br><span class="line">  data:data,</span><br><span class="line">  multiple: true</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="8、下面简单说明新版与老版对比"><a href="#8、下面简单说明新版与老版对比" class="headerlink" title="8、下面简单说明新版与老版对比"></a>8、下面简单说明新版与老版对比</h2><p>(1)结果回调和选中回调名称：formatResult、formatSelection（老版）；templateResult、templateSelection（新版）</p><p>(2)初始化：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//老版，注意如果初始化时文本框中本身没有值（为空），则不会触发该方法</span><br><span class="line">initSelection: function (element, callback) &#123;</span><br><span class="line">   var id = $(element).val();</span><br><span class="line">   var data = &#123; id: id, text: id&#125;;//这里是初始化的数据，你可以通过id来从服务器上获取（ajax），再装载进去</span><br><span class="line">   callback(data);</span><br><span class="line">&#125;</span><br><span class="line">//新版，直接给select添加option</span><br><span class="line">$(&quot;#id&quot;).append(new Option(&quot;Jquery&quot;, 10001, false, true));</span><br><span class="line">//或者</span><br><span class="line">$(&quot;#id&quot;).append(&quot;&lt;option value=&apos;10001&apos;&gt;Jquery&lt;/option&gt;&quot;);</span><br></pre></td></tr></table></figure></p><p>(3)获取或设置值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select2(&quot;val&quot;)（老版）；</span><br><span class="line">$(&quot;select&quot;).val()（新版）</span><br></pre></td></tr></table></figure></p><p>(4)推荐使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var res = $(&quot;#id&quot;).select2(&quot;data&quot;);</span><br><span class="line"></span><br><span class="line">//返回数组，单选就取res[0]；好处是不进可以获取id、text还可以获取其他属性，如res[0].names</span><br></pre></td></tr></table></figure></p><p>(5)停用或启用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;select&quot;).enable(false);（老版）；</span><br><span class="line">$(&quot;select&quot;).prop(&quot;disabled&quot;, true);（新版）</span><br></pre></td></tr></table></figure></p><p>(6)主题样式：<br>新版的样式已经更新，但如果想使用老版样式则可以设置 theme: “classic”</p><h1 id="项目使用中遇到的问题"><a href="#项目使用中遇到的问题" class="headerlink" title="项目使用中遇到的问题"></a>项目使用中遇到的问题</h1><h2 id="My-Demo实例代码"><a href="#My-Demo实例代码" class="headerlink" title="My Demo实例代码"></a>My Demo实例代码</h2><p>(1)取值<br>字符串的拼接<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">form.on(&apos;submit(save)&apos;, function (data) &#123;</span><br><span class="line">var htmlSelected = [];</span><br><span class="line">   var reslist = $(&quot;#typeId&quot;).select2(&quot;data&quot;);</span><br><span class="line">   for (var i = 0; i &lt; reslist.length; i++) &#123;</span><br><span class="line">        htmlSelected.push($(&apos;#typeId&apos;).select2(&apos;data&apos;)[i].text);</span><br><span class="line">       &#125;</span><br><span class="line">    //标签信息。</span><br><span class="line">    data.field.Text_Tag = htmlSelected.join(&quot;,&quot;).toString();</span><br><span class="line">   $.formSubmit(&#123;</span><br><span class="line">       url: &quot;/System/ArticleManage/RequestSave&quot;,</span><br><span class="line">       data: data.field</span><br><span class="line">   &#125;);</span><br><span class="line">   return false;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>说明：放弃以前字符串”+”的拼接方式，改用声明数组，join(“,”)的拼接方式，这样省去字符末尾去空格的问题。<br>性能方面也会比前者好很多。<br>(2)赋值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//获取文章标签集合</span><br><span class="line">$(&quot;#typeId&quot;).bindSelect(&#123;</span><br><span class="line">    url: &quot;/System/ArticleManage/GetListTreeSelect&quot;,</span><br><span class="line">    title: &apos;请选择文章标签&apos;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="Other-Demo实例代码"><a href="#Other-Demo实例代码" class="headerlink" title="Other Demo实例代码"></a>Other Demo实例代码</h2><p>(1)取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line">//取text</span><br><span class="line">var strtext = $(&apos;#select2&apos;).select2(&apos;data&apos;).text;</span><br><span class="line">//取value</span><br><span class="line">var str2value= $(&quot;#select2&quot;).select2(&quot;val&quot;);</span><br><span class="line">//多选</span><br><span class="line">$(&apos;#select2&apos;).select2(&#123;</span><br><span class="line">    allowClear: true,</span><br><span class="line">    data:[&#123;id:0,text:&apos;hello&apos;&#125;,&#123;id:1,text:&apos;world&apos;&#125;]</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=&quot;select2&quot; &gt; &lt;/select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Select2升级以后，支持多选了，用select2(&apos;data&apos;)取出来是是数组，不在是一个json了，</span><br><span class="line">因需要select2(&apos;data&apos;)[0].text 既可以取得对应的值，多个的话循环获取</span><br></pre></td></tr></table></figure></p><p>(2)赋值<br>页面采用razor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;form-group&quot;&gt;</span><br><span class="line">  &lt;label class=&quot;control-label&quot;&gt;销售人员：&lt;/label&gt;</span><br><span class="line">  @Html.DropDownListFor(m =&gt; m.SalesMan, ViewData[&quot;CreateStaffID&quot;] as SelectList, &quot;请选择&quot;, </span><br><span class="line">  new &#123; @id = &quot;SalesMan&quot;, @class = &quot;select2 &quot;, @style = &quot;width:67%;&quot; &#125;)</span><br><span class="line">  &lt;span class=&quot;help-line&quot;&gt;@Html.ValidationMessageFor(m =&gt; m.SalesMan)&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">js:</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt; </span><br><span class="line">　//示例：给select2标签赋值23</span><br><span class="line">  @Html.Raw(&quot;$(&apos;#SalesMan&apos;).val(&quot;23&quot;)</span><br><span class="line">    $(&quot;#SalesMan&quot;).select2();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><div class="note success"><p>参考原文：<a href="http://www.cnblogs.com/liuxiaobo93/p/5112993.html" target="_blank" rel="noopener">http://www.cnblogs.com/liuxiaobo93/p/5112993.html</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一、概述&quot;&gt;&lt;a href=&quot;#一、概述&quot; class=&quot;headerlink&quot; title=&quot;一、概述&quot;&gt;&lt;/a&gt;一、概述&lt;/h1&gt;&lt;p&gt;组件说明以及API说明：&lt;br&gt;&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;Select2使用示例地址：&lt;a 
      
    
    </summary>
    
      <category term="前端" scheme="http://haimianbao1111.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://haimianbao1111.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>.NET，C#和ASP.NET的关系</title>
    <link href="http://haimianbao1111.github.io/2018/02/08/C-%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://haimianbao1111.github.io/2018/02/08/C-小技巧/</id>
    <published>2018-02-08T10:17:49.000Z</published>
    <updated>2018-02-08T12:55:20.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="NET是一个平台，一个抽象的平台的概念。"><a href="#NET是一个平台，一个抽象的平台的概念。" class="headerlink" title=".NET是一个平台，一个抽象的平台的概念。"></a>.NET是一个平台，一个抽象的平台的概念。</h2><p>.NET平台其本身实现的方式其实还是库，抽象层面上来看是一个平台。<br>个人理解.NET核心就只是.NET Framework。<br>.NET Framework包括了两个关键组成元素：<br>Common Language Runtime，　公共语言运行时  －－提供内存管理、代码安全性检测等等功能。<br>.NET Framework Class Library， .NET框架类库   －－提供大量应用类库、提高开发效率。</p><h2 id="C-是一个程序设计语言，仅仅是一个语言。"><a href="#C-是一个程序设计语言，仅仅是一个语言。" class="headerlink" title="C#是一个程序设计语言，仅仅是一个语言。"></a>C#是一个程序设计语言，仅仅是一个语言。</h2><p>运行在.NET(CLR)上的，用于创建应用程序的一种高级编程语言。<br>程序设计语言仅仅是为了方便开发人员和计算机沟通的工具，虽然C#语法相对C和C++要多一些，但是相对来看C#语法都比较固定，这样使用起来却都很容易。</p><h2 id="ASP-NET是一个网站开发的技术，仅仅是-NET框架中的一个应用模型。"><a href="#ASP-NET是一个网站开发的技术，仅仅是-NET框架中的一个应用模型。" class="headerlink" title="ASP.NET是一个网站开发的技术，仅仅是.NET框架中的一个应用模型。"></a>ASP.NET是一个网站开发的技术，仅仅是.NET框架中的一个应用模型。</h2><p>用微软公司ASP.NET快速入门中的一句话来解释，ASP.NET 是用于生成基于 Web 的应用程序的内容丰富的编程框架。</p><h1 id="ASP-net和C-的区别："><a href="#ASP-net和C-的区别：" class="headerlink" title="ASP.net和C#的区别："></a>ASP.net和C#的区别：</h1><p>编写asp.net通常包括两部分的代码:网页层和后台处理层.网页就是用标记语言来写的，而网页对应的后台处理程序则需要.net语言来完成，目前主要是采用c#和vb.net<br>可以说整个的asp.net网站通过c#或者vb.net来实现。而c#则是ms .net framework的主要语言，可以用在网站，桌面应用等方面。可以算是一种比较流行的编程语言。</p><h1 id="C-能编写什么样的应用程序"><a href="#C-能编写什么样的应用程序" class="headerlink" title="C#能编写什么样的应用程序?"></a>C#能编写什么样的应用程序?</h1><h2 id="桌而应用释详："><a href="#桌而应用释详：" class="headerlink" title="桌而应用释详："></a>桌而应用释详：</h2><p>使用.Net Framework的Windows Presentation Foundation(WPF)模块就可以简便地生成这种程序。</p><h2 id="WindowsStore应用程序"><a href="#WindowsStore应用程序" class="headerlink" title="WindowsStore应用程序:"></a>WindowsStore应用程序:</h2><p>WIN8新引入的一类应用程序，针对触摸屏设计，通常全屏运行。</p><h2 id="Web应用程序"><a href="#Web应用程序" class="headerlink" title="Web应用程序:"></a>Web应用程序:</h2><p>它们是一些Web页面，可以通过任何Web浏览器查看。可以用C#语言通过Web Forms创建ASP.NET应用程序。</p><h2 id="WCF服务"><a href="#WCF服务" class="headerlink" title="WCF服务:"></a>WCF服务:</h2><p>这是一种灵活创建各种分布式应用程巧的方式。使用 WCF服务可以通过局域网或Internet交换几乎各种数据。</p><h1 id="NET的两种交互模式主要有："><a href="#NET的两种交互模式主要有：" class="headerlink" title=".NET的两种交互模式主要有："></a>.NET的两种交互模式主要有：</h1><h2 id="B-S"><a href="#B-S" class="headerlink" title="B/S"></a>B/S</h2><h2 id="C-S"><a href="#C-S" class="headerlink" title="C/S"></a>C/S</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;NET是一个平台，一个抽象的平台的概念。&quot;&gt;&lt;a href=&quot;#NET是一个平台，一个抽象的平台的概念。&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/categories/Asp-Net/"/>
    
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>将枚举值转换为DropDownList等的选项值</title>
    <link href="http://haimianbao1111.github.io/2018/02/06/%E5%B0%86%E6%9E%9A%E4%B8%BE%E5%80%BC%E8%BD%AC%E6%8D%A2%E4%B8%BADropDownList%E7%AD%89%E7%9A%84%E9%80%89%E9%A1%B9%E5%80%BC/"/>
    <id>http://haimianbao1111.github.io/2018/02/06/将枚举值转换为DropDownList等的选项值/</id>
    <published>2018-02-06T04:27:59.000Z</published>
    <updated>2018-02-06T04:50:09.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>应用场景：在项目中，我们已习惯将较稳定的分类标准定义为枚举，来保证程序中取值的合法性，也使代码更清晰。某些情况下我们需要在DropDownList等选择控件上绑定某个枚举的所有枚举值，供用户自行选择，这时就需要将枚举值转换为DropDownList等的选项值。</p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="枚举定义"><a href="#枚举定义" class="headerlink" title="枚举定义"></a>枚举定义</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 紧急程度</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public enum eOA_EmergencyLevel</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 平件</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    平件 = 1,</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 急件</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    急件 = 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将枚举转换成ArrayList"><a href="#将枚举转换成ArrayList" class="headerlink" title="将枚举转换成ArrayList"></a>将枚举转换成ArrayList</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 将枚举转换成ArrayList</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public static IList EnumToList(Type enumType)</span><br><span class="line">&#123;</span><br><span class="line">    ArrayList list = new ArrayList();</span><br><span class="line"></span><br><span class="line">    foreach (int i in Enum.GetValues(enumType))</span><br><span class="line">    &#123;</span><br><span class="line">        ListItem listitem = new ListItem(Enum.GetName(enumType, i), i.ToString());</span><br><span class="line">        list.Add(listitem);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 将枚举转换成下拉框</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public static void FillDropDownList(DropDownList ddl, Type enumType)</span><br><span class="line">&#123;</span><br><span class="line">    ddl.Items.Clear();</span><br><span class="line">    ddl.DataSource = EnumToList(enumType);</span><br><span class="line">    ddl.DataValueField = &quot;value&quot;;</span><br><span class="line">    ddl.DataTextField = &quot;text&quot;;</span><br><span class="line">    ddl.DataBind();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后来，在同事讨论代码时，被大家批评为不该使用这种中文的枚举名称；同时我自己也觉得这种反射方式性能有问题。不过因为影响不大，一直懒得去理它。</p><p>最近看到了两篇博文（<a href="http://www.cnblogs.com/zhucai/archive/2009/05/27/enum_bind.html" target="_blank" rel="noopener">枚举的显示和绑定</a>&gt;和<a href="http://www.cnblogs.com/JeffreyZhao/archive/2009/01/07/AttachDataExtensions.html" target="_blank" rel="noopener">一个利用扩展方法的实例：AttachDataExtensions </a>），是利用C# 3.0的扩展方法实现的，实现得很是优美，可惜我们的项目基于.NET 2.0，用不上。但受此启发，便花了点时间使用Attribute和缓存的技术重构了原来的代码。</p><h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><h2 id="EnumShowNameAttribute"><a href="#EnumShowNameAttribute" class="headerlink" title="EnumShowNameAttribute"></a>EnumShowNameAttribute</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 枚举的显示名称</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">[global::System.AttributeUsage(AttributeTargets.Field, Inherited = false, AllowMultiple = false)]</span><br><span class="line">public sealed class EnumShowNameAttribute : Attribute</span><br><span class="line">&#123;</span><br><span class="line">    private string showName;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 显示名称</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    public string ShowName</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            return this.showName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 构造枚举的显示名称</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;showName&quot;&gt;显示名称&lt;/param&gt;</span><br><span class="line">    public EnumShowNameAttribute(string showName)</span><br><span class="line">    &#123;</span><br><span class="line">        this.showName = showName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">枚举定义</span><br><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 紧急程度</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public enum eOA_EmergencyLevel</span><br><span class="line">&#123;</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 平件</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    [EnumShowName(&quot;平件&quot;)]</span><br><span class="line">    Common = 1,</span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 急件</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    [EnumShowName(&quot;急件&quot;)]</span><br><span class="line">    Emergency = 2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="枚举工具类"><a href="#枚举工具类" class="headerlink" title="枚举工具类"></a>枚举工具类</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 枚举工具类</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">public sealed class EnumUtil</span><br><span class="line">&#123;</span><br><span class="line">    private static Dictionary&lt;string, Dictionary&lt;int, string&gt;&gt; _EnumList = new Dictionary&lt;string, Dictionary&lt;int, string&gt;&gt;(); //枚举缓存池</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 将枚举绑定到ListControl</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;listControl&quot;&gt;ListControl&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;enumType&quot;&gt;枚举类型&lt;/param&gt;</span><br><span class="line">    public static void FillListControl(ListControl listControl, Type enumType)</span><br><span class="line">    &#123;</span><br><span class="line">        listControl.Items.Clear();</span><br><span class="line">        listControl.DataSource = EnumToDictionary(enumType);</span><br><span class="line">        listControl.DataValueField = &quot;key&quot;;</span><br><span class="line">        listControl.DataTextField = &quot;value&quot;;</span><br><span class="line">        listControl.DataBind();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 将枚举转换成Dictionary&amp;lt;int, string&amp;gt;</span><br><span class="line">    /// Dictionary中，key为枚举项对应的int值；value为：若定义了EnumShowName属性，则取它，否则取name</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;enumType&quot;&gt;枚举类型&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    public static Dictionary&lt;int, string&gt; EnumToDictionary(Type enumType)</span><br><span class="line">    &#123;</span><br><span class="line">        string keyName = enumType.FullName;</span><br><span class="line"></span><br><span class="line">        if (!_EnumList.ContainsKey(keyName))</span><br><span class="line">        &#123;</span><br><span class="line">            Dictionary&lt;int, string&gt; list = new Dictionary&lt;int, string&gt;();</span><br><span class="line"></span><br><span class="line">            foreach (int i in Enum.GetValues(enumType))</span><br><span class="line">            &#123;</span><br><span class="line">                string name = Enum.GetName(enumType, i);</span><br><span class="line"></span><br><span class="line">                //取显示名称</span><br><span class="line">                  string showName = string.Empty;</span><br><span class="line">                object[] atts = enumType.GetField(name).GetCustomAttributes(typeof(EnumShowNameAttribute), false);</span><br><span class="line">                if (atts.Length &gt; 0) showName = ((EnumShowNameAttribute)atts[0]).ShowName;</span><br><span class="line"></span><br><span class="line">                list.Add(i, string.IsNullOrEmpty(showName) ? name : showName);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            object syncObj = new object();</span><br><span class="line"></span><br><span class="line">            if (!_EnumList.ContainsKey(keyName))</span><br><span class="line">            &#123;</span><br><span class="line">                lock (syncObj)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (!_EnumList.ContainsKey(keyName))</span><br><span class="line">                    &#123;</span><br><span class="line">                        _EnumList.Add(keyName, list);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return _EnumList[keyName];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// &lt;summary&gt;</span><br><span class="line">    /// 获取枚举值对应的显示名称</span><br><span class="line">    /// &lt;/summary&gt;</span><br><span class="line">    /// &lt;param name=&quot;enumType&quot;&gt;枚举类型&lt;/param&gt;</span><br><span class="line">    /// &lt;param name=&quot;intValue&quot;&gt;枚举项对应的int值&lt;/param&gt;</span><br><span class="line">    /// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">    public static string GetEnumShowName(Type enumType, int intValue)</span><br><span class="line">    &#123;</span><br><span class="line">        return EnumToDictionary(enumType)[intValue];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想更偷懒的话，还可以省掉自定义的EnumShowNameAttribute，直接用System.ComponentModel.DescriptionAttribute就行了。</p><div class="note success"><p>[附]Enum基础知识：<br><a href="http://www.cnblogs.com/flashicp/archive/2007/03/22/684259.html" target="_blank" rel="noopener">c# 枚举 enum</a><br><a href="https://kb.cnblogs.com/page/42561/" target="_blank" rel="noopener">.NET中Flags枚举的使用 </a><br><a href="http://www.cnblogs.com/allenlooplee/archive/2004/12/19/70230.html" target="_blank" rel="noopener">关于枚举的种种 (Enumeration FAQ) [C#, IL, BCL]</a>  </p></div><div class="note success"><p>原文链接：<a href="http://www.cnblogs.com/wenjian/archive/2009/06/19/1506550.html" target="_blank" rel="noopener">http://www.cnblogs.com/wenjian/archive/2009/06/19/1506550.html</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;应用场景：在项目中，我们已习惯将较稳定的分类标准定义为枚举，来保证程序中取值的合法性，也使代码更清晰。某些情况下我们需要在DropDownL
      
    
    </summary>
    
      <category term="工具" scheme="http://haimianbao1111.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="C#小技巧" scheme="http://haimianbao1111.github.io/tags/C-%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>将字符串转换成List&lt;T&gt;</title>
    <link href="http://haimianbao1111.github.io/2018/02/06/%E5%B0%86%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%88%90List-T/"/>
    <id>http://haimianbao1111.github.io/2018/02/06/将字符串转换成List-T/</id>
    <published>2018-02-06T04:19:37.000Z</published>
    <updated>2018-02-06T04:47:49.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>有时需要将一个字符串分隔后，转换成指定类型的数组或List<t>，比如服务器端收到提交的一组checkbox的值，可能是一个ID串，类似：56,657,0,1,2,3,4,5,6,7,8，需要将它转成一个int数组或List<t>再进行后续处理。</t></t></p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="可用Array-ConvertAll-lt-gt-泛型方法来实现"><a href="#可用Array-ConvertAll-lt-gt-泛型方法来实现" class="headerlink" title="可用Array.ConvertAll&lt;/&gt; 泛型方法来实现"></a>可用<a href="https://msdn.microsoft.com/zh-cn/library/exc45z53(VS.80).aspx" target="_blank" rel="noopener">Array.ConvertAll&lt;/&gt; 泛型方法来实现</a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">string str = &quot;56,657,0,1,2,3,4,5,6,7,8&quot;;</span><br><span class="line">int[] arrInt = Array.ConvertAll&lt;string, int&gt;(str.Split(&apos;,&apos;), s =&gt; int.Parse(s));</span><br><span class="line">foreach (int i in arrInt) Console.WriteLine(i);</span><br></pre></td></tr></table></figure><h2 id="将这功能做成string的扩展方法"><a href="#将这功能做成string的扩展方法" class="headerlink" title="将这功能做成string的扩展方法"></a>将这功能做成string的扩展方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public static List&lt;T&gt; ToList&lt;T&gt;(this string str, char split, Converter&lt;string, T&gt; convertHandler)</span><br><span class="line">&#123;</span><br><span class="line">    if (string.IsNullOrEmpty(str))</span><br><span class="line">    &#123;</span><br><span class="line">        return new List&lt;T&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        string[] arr = str.Split(split);</span><br><span class="line">        T[] Tarr = Array.ConvertAll(arr, convertHandler);</span><br><span class="line">        return new List&lt;T&gt;(Tarr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;int&gt; intList = str.ToList&lt;int&gt;(&apos;,&apos;, s =&gt; int.Parse(s));</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;有时需要将一个字符串分隔后，转换成指定类型的数组或List&lt;t&gt;，比如服务器端收到提交的一组checkbox的值，可能是一个ID串，类似：5
      
    
    </summary>
    
      <category term="工具" scheme="http://haimianbao1111.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="C#小技巧" scheme="http://haimianbao1111.github.io/tags/C-%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Powerdesigner与数据库同步</title>
    <link href="http://haimianbao1111.github.io/2018/01/30/Powerdesigner%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%90%8C%E6%AD%A5/"/>
    <id>http://haimianbao1111.github.io/2018/01/30/Powerdesigner与数据库同步/</id>
    <published>2018-01-30T10:30:10.000Z</published>
    <updated>2018-01-30T11:10:13.873Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在使用PowerDesigner进行数据库设计、生成数据库，并开发进行一段时间后， 在这段时间内，数据库的结构必然会有一些变化。我们往往会遇到这样的问题，PowerDesigner与现有数据库结构不匹配。如果人工的比较，即费时又会出错。</p><h1 id="PowerDesigner-生成数据库"><a href="#PowerDesigner-生成数据库" class="headerlink" title="PowerDesigner 生成数据库"></a>PowerDesigner 生成数据库</h1><p>由于人工比较的缺陷，我们需要一个工具来解决。首先，因为PowerDesigner文件与数据库文件是完全不同的两种文件格式，所以我们先要将它们转换成同样的数据结构。我们用PowerDesigner的物理模型生成一个新的数据库。以生成SQL SERVER 为例：</p><h2 id="“Database”-gt-”Generate-Database”"><a href="#“Database”-gt-”Generate-Database”" class="headerlink" title="“Database”-&gt;”Generate Database”"></a>“Database”-&gt;”Generate Database”</h2><p><img src="/images/PowerDesigner/PowerDesigner1.png" class="full-image"></p><p>此时数据库设计为Employee表（原始数据库结构）：<br><img src="/images/PowerDesigner/PowerDesigner2.png" class="full-image"></p><h2 id="然后，在输出目录你会看到SQL脚本文件，新建一个数据库，并执行脚本"><a href="#然后，在输出目录你会看到SQL脚本文件，新建一个数据库，并执行脚本" class="headerlink" title="然后，在输出目录你会看到SQL脚本文件，新建一个数据库，并执行脚本"></a>然后，在输出目录你会看到SQL脚本文件，新建一个数据库，并执行脚本</h2><h2 id="现在我们改变一些设计，表结构如下（新数据库结构）："><a href="#现在我们改变一些设计，表结构如下（新数据库结构）：" class="headerlink" title="现在我们改变一些设计，表结构如下（新数据库结构）："></a>现在我们改变一些设计，表结构如下（新数据库结构）：</h2><p><img src="/images/PowerDesigner/PowerDesigner3.png" class="full-image"></p><p>将EmpName的数据类型改为nvarchar(100)， 添加DeptID列。</p><h1 id="数据库架构比较工具"><a href="#数据库架构比较工具" class="headerlink" title="数据库架构比较工具"></a>数据库架构比较工具</h1><p>数据库数据对比工具 SQLDiff（MSSQL版）是针对MS SQLServer的一款小工具，可以针对两个数据进行表结构和数据的对比。</p><h2 id="1、结构对比：如开发库和正式库之间的结构和数据同步，此工具可以告诉您哪个表结构有字段的增加减少，或者字段类型的改变，并生成sql进行结构的同步。"><a href="#1、结构对比：如开发库和正式库之间的结构和数据同步，此工具可以告诉您哪个表结构有字段的增加减少，或者字段类型的改变，并生成sql进行结构的同步。" class="headerlink" title="1、结构对比：如开发库和正式库之间的结构和数据同步，此工具可以告诉您哪个表结构有字段的增加减少，或者字段类型的改变，并生成sql进行结构的同步。"></a>1、结构对比：如开发库和正式库之间的结构和数据同步，此工具可以告诉您哪个表结构有字段的增加减少，或者字段类型的改变，并生成sql进行结构的同步。</h2><h2 id="2、数据对比：如对比两个数据库中的某个表的数据差异，有差异的行会用颜色进行标记，可生成sql脚本进行两个库的同步。"><a href="#2、数据对比：如对比两个数据库中的某个表的数据差异，有差异的行会用颜色进行标记，可生成sql脚本进行两个库的同步。" class="headerlink" title="2、数据对比：如对比两个数据库中的某个表的数据差异，有差异的行会用颜色进行标记，可生成sql脚本进行两个库的同步。"></a>2、数据对比：如对比两个数据库中的某个表的数据差异，有差异的行会用颜色进行标记，可生成sql脚本进行两个库的同步。</h2><div class="note success"><p>下载链接：<a href="http://download.csdn.net/download/swordmanli/9629605" target="_blank" rel="noopener">http://download.csdn.net/download/swordmanli/9629605</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;在使用PowerDesigner进行数据库设计、生成数据库，并开发进行一段时间后， 在这段时间内，数据库的结构必然会有一些变化。我们往往会遇
      
    
    </summary>
    
      <category term="工具" scheme="http://haimianbao1111.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Powerdesigner,工具" scheme="http://haimianbao1111.github.io/tags/Powerdesigner-%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>PageOffice_4.2.0.1_ASP.NET MVC开发笔记</title>
    <link href="http://haimianbao1111.github.io/2018/01/30/PageOffice-4-2-0-1-ASP-NET-MVC%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <id>http://haimianbao1111.github.io/2018/01/30/PageOffice-4-2-0-1-ASP-NET-MVC开发笔记/</id>
    <published>2018-01-30T03:25:44.000Z</published>
    <updated>2018-01-30T03:41:31.216Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PageOffice开发笔记"><a href="#PageOffice开发笔记" class="headerlink" title="PageOffice开发笔记"></a>PageOffice开发笔记</h1><h2 id="开发环境：vs2015，mvc，razor"><a href="#开发环境：vs2015，mvc，razor" class="headerlink" title="开发环境：vs2015，mvc，razor"></a>开发环境：vs2015，mvc，razor</h2><h1 id="使用操作"><a href="#使用操作" class="headerlink" title="使用操作"></a>使用操作</h1><h2 id="1-双击运行Setup-exe安装服务器组件。"><a href="#1-双击运行Setup-exe安装服务器组件。" class="headerlink" title="1. 双击运行Setup.exe安装服务器组件。"></a>1. 双击运行Setup.exe安装服务器组件。</h2><h2 id="2-第一次运行包含PageOfficeLink组件的网页时，会弹出注册对话框，请输入注册信息注册。"><a href="#2-第一次运行包含PageOfficeLink组件的网页时，会弹出注册对话框，请输入注册信息注册。" class="headerlink" title="2. 第一次运行包含PageOfficeLink组件的网页时，会弹出注册对话框，请输入注册信息注册。"></a>2. 第一次运行包含PageOfficeLink组件的网页时，会弹出注册对话框，请输入注册信息注册。</h2><h2 id="3-如果新建网站或集成PageOffice到您现有的网站里"><a href="#3-如果新建网站或集成PageOffice到您现有的网站里" class="headerlink" title="3. 如果新建网站或集成PageOffice到您现有的网站里:"></a>3. 如果新建网站或集成PageOffice到您现有的网站里:</h2><p>拷贝“集成文件”目录下的“pageoffice”文件夹到您自己网站的根目录下；</p><h1 id="页面操作"><a href="#页面操作" class="headerlink" title="页面操作"></a>页面操作</h1><h2 id="前台："><a href="#前台：" class="headerlink" title="前台："></a>前台：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@&#123;</span><br><span class="line">    ViewBag.Title = &quot;Word&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">          function Save() &#123;</span><br><span class="line">              document.getElementById(&quot;PageOfficeCtrl1&quot;).WebSave();</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;div style=&quot;width:900px; height:600px;&quot;&gt;</span><br><span class="line"></span><br><span class="line">    @Html.Raw(ViewBag.EditorHtml)</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h2 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">namespace PageOffice4_MVC_Razor.Controllers</span><br><span class="line">&#123;</span><br><span class="line">public class WordController : Controller</span><br><span class="line">    &#123;</span><br><span class="line">public void SaveDoc()</span><br><span class="line">        &#123;</span><br><span class="line">            ViewBag.Message = &quot;Your app description page.&quot;;</span><br><span class="line">            string filePath = Server.MapPath(&quot;/test.doc&quot;);</span><br><span class="line">            PageOffice.FileSaver fs = new PageOffice.FileSaver();</span><br><span class="line">            fs.SaveToFile(filePath);</span><br><span class="line">            fs.Close();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public ActionResult Word()</span><br><span class="line">        &#123;</span><br><span class="line">            ViewBag.Message = &quot;Your contact page.&quot;;</span><br><span class="line"></span><br><span class="line">            PageOffice.PageOfficeCtrl pc = new PageOffice.PageOfficeCtrl();</span><br><span class="line">            pc.AddCustomToolButton(&quot;保存&quot;, &quot;Save()&quot;, 1);</span><br><span class="line">            pc.SaveFilePage = &quot;/Word/SaveDoc&quot;;</span><br><span class="line">            pc.ServerPage = &quot;/pageoffice/server.aspx&quot;;</span><br><span class="line">       </span><br><span class="line">            pc.WebOpen(&quot;/test.doc&quot;, PageOffice.OpenModeType.docAdmin, &quot;s&quot;);</span><br><span class="line"></span><br><span class="line">            ViewBag.EditorHtml = pc.GetHtmlCode(&quot;PageOfficeCtrl1&quot;);</span><br><span class="line"></span><br><span class="line">            return View();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="帮助文档"><a href="#帮助文档" class="headerlink" title="帮助文档"></a>帮助文档</h1><div class="note success"><p>链接：<a href="http://www.zhuozhengsoft.com/Technical/" target="_blank" rel="noopener">http://www.zhuozhengsoft.com/Technical/</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PageOffice开发笔记&quot;&gt;&lt;a href=&quot;#PageOffice开发笔记&quot; class=&quot;headerlink&quot; title=&quot;PageOffice开发笔记&quot;&gt;&lt;/a&gt;PageOffice开发笔记&lt;/h1&gt;&lt;h2 id=&quot;开发环境：vs2015，mvc，r
      
    
    </summary>
    
      <category term="MVC" scheme="http://haimianbao1111.github.io/categories/MVC/"/>
    
    
      <category term="MVC,PageOffice" scheme="http://haimianbao1111.github.io/tags/MVC-PageOffice/"/>
    
  </entry>
  
  <entry>
    <title>mvc4.5从客户端中检测到有潜在危险的 Request.Form 值</title>
    <link href="http://haimianbao1111.github.io/2018/01/29/mvc4-5%E4%BB%8E%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%AD%E6%A3%80%E6%B5%8B%E5%88%B0%E6%9C%89%E6%BD%9C%E5%9C%A8%E5%8D%B1%E9%99%A9%E7%9A%84-Request-Form-%E5%80%BC/"/>
    <id>http://haimianbao1111.github.io/2018/01/29/mvc4-5从客户端中检测到有潜在危险的-Request-Form-值/</id>
    <published>2018-01-29T13:39:20.000Z</published>
    <updated>2018-01-29T14:15:15.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错误截图："><a href="#错误截图：" class="headerlink" title="错误截图："></a>错误截图：</h1><p>今天，在做一个mvc表单提交，其中内容框使用UEditor插件，支持带html文本内容，结果在提交的时候遇到如下提示：<br><img src="/images/Form/submitError.png" class="full-image"></p><h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><ol><li><p>webconfig修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;system.web&gt;</span><br><span class="line"> &lt;httpRuntime targetFramework=&quot;4.5&quot; requestValidationMode=&quot;2.0&quot;/&gt;</span><br><span class="line">&lt;/system.web&gt;</span><br></pre></td></tr></table></figure></li><li><p>请求控制器修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[ValidateInput(false)]</span><br><span class="line">[HttpPost]</span><br><span class="line">   public ActionResult Form(VideoMDL model)</span><br><span class="line">   &#123;</span><br><span class="line">       return Json(&quot;OK&quot;, JsonRequestBehavior.AllowGet);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><p>[ValidateInput(false)] 不启用验证（默认为True）</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>Server.HtmlEncode(content)转码，过滤一些字符。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;错误截图：&quot;&gt;&lt;a href=&quot;#错误截图：&quot; class=&quot;headerlink&quot; title=&quot;错误截图：&quot;&gt;&lt;/a&gt;错误截图：&lt;/h1&gt;&lt;p&gt;今天，在做一个mvc表单提交，其中内容框使用UEditor插件，支持带html文本内容，结果在提交的时候遇到如下提示
      
    
    </summary>
    
      <category term="MVC" scheme="http://haimianbao1111.github.io/categories/MVC/"/>
    
    
      <category term="MVC" scheme="http://haimianbao1111.github.io/tags/MVC/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 常用的快捷键</title>
    <link href="http://haimianbao1111.github.io/2018/01/28/Sublime-Text-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://haimianbao1111.github.io/2018/01/28/Sublime-Text-常用的快捷键/</id>
    <published>2018-01-28T07:32:41.000Z</published>
    <updated>2018-01-28T08:39:10.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sublime-Text-3-快捷键（实用，快速换行等）"><a href="#Sublime-Text-3-快捷键（实用，快速换行等）" class="headerlink" title="Sublime Text 3 快捷键（实用，快速换行等）"></a>Sublime Text 3 快捷键（实用，快速换行等）</h1><h2 id="1-选择类"><a href="#1-选择类" class="headerlink" title="1.选择类"></a>1.选择类</h2><p>Ctrl+D ：选中光标所占的文本，继续操作则会选中下一个相同的文本。<br>Alt+F3：选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。<br>Ctrl+L：选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。<br>Ctrl+Shift+L ：先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。<br>Ctrl+Shift+M：选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。<br>Ctrl+M：光标移动至括号内结束或开始的位置。<br>Ctrl+Enter：在下一行插入新行。举个例子：即使光标不在行尾，也能快速向下插入一行。<br>Ctrl+Shift+Enter： 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。<br>Ctrl+Shift+[ ：选中代码，按下快捷键，折叠代码。<br>Ctrl+Shift+] ：选中代码，按下快捷键，展开代码。<br>Ctrl+K+0 ：展开所有折叠代码。<br>Ctrl+← ：向左单位性地移动光标，快速移动光标。<br>Ctrl+→ ：向右单位性地移动光标，快速移动光标。<br>shift+↑ ：向上选中多行。<br>shift+↓ ：向下选中多行。<br>Shift+← ：向左选中文本。<br>Shift+→： 向右选中文本。<br>Ctrl+Shift+←：向左单位性地选中文本。<br>Ctrl+Shift+→：向右单位性地选中文本。<br>Ctrl+Shift+↑：将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。<br>Ctrl+Shift+↓：将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。<br>Ctrl+Alt+↑：向上添加多行光标，可同时编辑多行。<br>Ctrl+Alt+↓：向下添加多行光标，可同时编辑多行。</p><h2 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h2><p>Ctrl+J：合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。<br>Ctrl+Shift+D：复制光标所在整行，插入到下一行。<br>Tab：向右缩进。<br>Shift+Tab：向左缩进。<br>Ctrl+K+K：从光标处开始删除代码至行尾。<br>Ctrl+Shift+K：删除整行。<br>Ctrl+/：注释单行。<br>Ctrl+Shift+/ ：注释多行。<br>Ctrl+K+U：转换大写。<br>Ctrl+K+L：转换小写。<br>Ctrl+Z：撤销。<br>Ctrl+Y：恢复撤销。<br>Ctrl+U：软撤销，感觉和 Gtrl+Z 一样。<br>Ctrl+F2：设置书签<br>Ctrl+T：左右字母互换。<br>F6： 单词检测拼写</p><h2 id="显示类"><a href="#显示类" class="headerlink" title="显示类"></a>显示类</h2><p>Ctrl+Tab：按文件浏览过的顺序，切换当前窗口的标签页。<br>Ctrl+PageDown：向左切换当前窗口的标签页。<br>Ctrl+PageUp： 向右切换当前窗口的标签页。<br>Alt+Shift+1： 窗口分屏，恢复默认1屏（非小键盘的数字）<br>Alt+Shift+2： 左右分屏-2列<br>Alt+Shift+3： 左右分屏-3列<br>Alt+Shift+4： 左右分屏-4列<br>Alt+Shift+5： 等分4屏<br>Alt+Shift+8： 垂直分屏-2屏<br>Alt+Shift+9： 垂直分屏-3屏<br>Ctrl+K+B： 开启/关闭侧边栏。<br>F11： 全屏模式<br>Shift+F11：免打扰模式</p><h1 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h1><h2 id="1-选择一个选中项的下一个匹配项-ctrl-d"><a href="#1-选择一个选中项的下一个匹配项-ctrl-d" class="headerlink" title="1.选择一个选中项的下一个匹配项: ctrl+d"></a>1.选择一个选中项的下一个匹配项: ctrl+d</h2><p>把光标放在一个单词上，按下⌘+ D,将选择这个单词。一直按住⌘且按D多次，将选择当前选中项的下一个匹配项。通过按住⌘,再按D三次,将选择三个相同的文本。<br><img src="/images/sublime/sublime1.gif" class="full-image"> </p><h2 id="2-选择一个选中项的所有匹配项-alt-f3"><a href="#2-选择一个选中项的所有匹配项-alt-f3" class="headerlink" title="2.选择一个选中项的所有匹配项: alt+f3"></a>2.选择一个选中项的所有匹配项: alt+f3</h2><p>和上面一样,但它选择文件中的所有匹配项。小心使用这个,因为它能选择一个文件中的所有匹配项. .<br><img src="/images/sublime/sublime2.gif" class="full-image"></p><h2 id="3-选择与光标关联的开始和结束标签-ctrl-shift-’"><a href="#3-选择与光标关联的开始和结束标签-ctrl-shift-’" class="headerlink" title="3.选择与光标关联的开始和结束标签:  ctrl+shift+’"></a>3.选择与光标关联的开始和结束标签:  ctrl+shift+’</h2><p>这是一个法宝。也许你希望所有属性保持不变,但只是想选择标签。这个快捷键为你这样做,会注意到你可以在一次操作多个标签。<em>需要Emmet插件</em><br><img src="/images/sublime/sublime3.gif" class="full-image"></p><h2 id="4-选择容器内内容-ctrl-shift-a"><a href="#4-选择容器内内容-ctrl-shift-a" class="headerlink" title="4.选择容器内内容: ctrl+shift+a"></a>4.选择容器内内容: ctrl+shift+a</h2><p>如果你把光标放在文本间再按下上面的键将选择文本,就像ctrl+ D。但是再次按下它，将选择父容器,再按,将选择父容器的父容器。<em>需要Emmet插件</em><br><img src="/images/sublime/sublime4.gif" class="full-image"></p><h2 id="5-选择括号内的内容-ctrl-shift-m"><a href="#5-选择括号内的内容-ctrl-shift-m" class="headerlink" title="5.选择括号内的内容: ctrl+shift+m"></a>5.选择括号内的内容: ctrl+shift+m</h2><p>这有助于选择括号之间的一切。同样适用于CSS。<br><img src="/images/sublime/sublime5.gif" class="full-image"></p><h2 id="6-上移或下移行-ctrl-shift-↑-或-↓"><a href="#6-上移或下移行-ctrl-shift-↑-或-↓" class="headerlink" title="6.上移或下移行: ctrl+shift+↑ 或 ↓"></a>6.上移或下移行: ctrl+shift+↑ 或 ↓</h2><p><img src="/images/sublime/sublime6.gif" class="full-image"></p><h2 id="7-复制行或选中项-ctrl-shift-d"><a href="#7-复制行或选中项-ctrl-shift-d" class="headerlink" title="7.复制行或选中项: ctrl+shift+d"></a>7.复制行或选中项: ctrl+shift+d</h2><p>如果你已经选中了文本,它会复制你的选中项。否则,把光标放在行上,会复制整行。<br><img src="/images/sublime/sublime7.gif" class="full-image"></p><h2 id="8-增加和减少缩进-ctrl-或"><a href="#8-增加和减少缩进-ctrl-或" class="headerlink" title="8.增加和减少缩进: ctrl+[ 或 ]"></a>8.增加和减少缩进: ctrl+[ 或 ]</h2><p><img src="/images/sublime/sublime8.gif" class="full-image"></p><h2 id="9-剪切行或选中项-ctrl-x"><a href="#9-剪切行或选中项-ctrl-x" class="headerlink" title="9.剪切行或选中项: ctrl+x"></a>9.剪切行或选中项: ctrl+x</h2><p><img src="/images/sublime/sublime9.gif" class="full-image"></p><h2 id="10-粘贴并保持缩进-ctrl-shift-v"><a href="#10-粘贴并保持缩进-ctrl-shift-v" class="headerlink" title="10.粘贴并保持缩进: ctrl+shift+v"></a>10.粘贴并保持缩进: ctrl+shift+v</h2><p>这是又一个我每次都用的快捷键。在gif中我显示了普通粘贴(ctrl+ V)和缩进粘贴两种效果的对比。注意缩进如何排列。<br><img src="/images/sublime/sublime10.gif" class="full-image"></p><h2 id="11-用标签包裹行或选中项-alt-shift-w"><a href="#11-用标签包裹行或选中项-alt-shift-w" class="headerlink" title="11.用标签包裹行或选中项: alt+shift+w"></a>11.用标签包裹行或选中项: alt+shift+w</h2><p>使用标签包裹一行; 开始输入你想使用的标签,你成功了.<br><img src="/images/sublime/sublime11.gif" class="full-image"></p><h2 id="12-移除未闭合的容器元素-ctrl-shift"><a href="#12-移除未闭合的容器元素-ctrl-shift" class="headerlink" title="12.移除未闭合的容器元素: ctrl+shift+;"></a>12.移除未闭合的容器元素: ctrl+shift+;</h2><p>这会移除与你的光标相关的父标签。对清除标记很有帮助。<br><img src="/images/sublime/sublime12.gif" class="full-image"></p><h2 id="13-计算数学表达式-ctrl-shift-y"><a href="#13-计算数学表达式-ctrl-shift-y" class="headerlink" title="13.计算数学表达式: ctrl+shift+y"></a>13.计算数学表达式: ctrl+shift+y</h2><p>我从未想过我会经常使用这个，但是确实很好用<br><img src="/images/sublime/sublime13.gif" class="full-image"></p><h2 id="14-递增和递减-alt-shift-↑-或-↓，ctrl-↑-或-↓"><a href="#14-递增和递减-alt-shift-↑-或-↓，ctrl-↑-或-↓" class="headerlink" title="14.递增和递减: alt+shift+↑ 或 ↓，ctrl+ ↑ 或 ↓"></a>14.递增和递减: alt+shift+↑ 或 ↓，ctrl+ ↑ 或 ↓</h2><p>按住 ↑ 将以10的步长改变数字, 不按住以1为步长. 同时注意到你不需要选择数字, Sublime Text 足够聪明到更新本行最近的数字.<br><img src="/images/sublime/sublime14.gif" class="full-image"></p><h2 id="15-大写和小写-ctrl-k-u-ctrl-k-l"><a href="#15-大写和小写-ctrl-k-u-ctrl-k-l" class="headerlink" title="15.大写和小写: ctrl+k+u,ctrl+k+l"></a>15.大写和小写: ctrl+k+u,ctrl+k+l</h2><p><img src="/images/sublime/sublime15.gif" class="full-image"></p><h2 id="16-注释选中项-行-ctrl"><a href="#16-注释选中项-行-ctrl" class="headerlink" title="16.注释选中项/行: ctrl+/"></a>16.注释选中项/行: ctrl+/</h2><p>这个在所有语言下都可用, 对行和选中项都可用.<br><img src="/images/sublime/sublime16.gif" class="full-image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sublime-Text-3-快捷键（实用，快速换行等）&quot;&gt;&lt;a href=&quot;#Sublime-Text-3-快捷键（实用，快速换行等）&quot; class=&quot;headerlink&quot; title=&quot;Sublime Text 3 快捷键（实用，快速换行等）&quot;&gt;&lt;/a&gt;Su
      
    
    </summary>
    
      <category term="工具" scheme="http://haimianbao1111.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://haimianbao1111.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>MVC使用x.PagedList分页</title>
    <link href="http://haimianbao1111.github.io/2018/01/28/MVC%E4%BD%BF%E7%94%A8x-PagedList%E5%88%86%E9%A1%B5/"/>
    <id>http://haimianbao1111.github.io/2018/01/28/MVC使用x-PagedList分页/</id>
    <published>2018-01-28T07:32:02.000Z</published>
    <updated>2018-01-28T08:51:17.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MVC分页"><a href="#MVC分页" class="headerlink" title="MVC分页"></a>MVC分页</h1><ol><li><p>Nuget安装 X.PagedList和X.PagedList.MVC<br>package.config文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;package id=&quot;X.PagedList&quot; version=&quot;1.24.1.300&quot; targetFramework=&quot;net45&quot; /&gt;</span><br><span class="line">&lt;package id=&quot;X.PagedList.Mvc&quot; version=&quot;4.9.1.310&quot; targetFramework=&quot;net45&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>View界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@model  PagedList.IPagedList&lt;T&gt;</span><br><span class="line">@using Model</span><br><span class="line">@using PagedList</span><br><span class="line">@using PagedList.Mvc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div style=&quot;text-align: center;&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Mvc分页例子&lt;/h1&gt;</span><br><span class="line">    &lt;table id=&quot;tbList&quot;&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            @if (Model.Count() != 0)</span><br><span class="line">            &#123;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th style=&quot;width: 60px;&quot;&gt;编号&lt;/th&gt;</span><br><span class="line">                    &lt;th style=&quot;width: 150px;&quot;&gt;创建时间&lt;/th&gt;</span><br><span class="line">                    &lt;th style=&quot;width: 200px;&quot;&gt;标题&lt;/th&gt;</span><br><span class="line">                    &lt;th style=&quot;width: 250px;&quot;&gt;内容&lt;/th&gt;</span><br><span class="line">                    &lt;th style=&quot;width: 80px;&quot;&gt;查看次数&lt;/th&gt;</span><br><span class="line">                    &lt;th style=&quot;width: 180px;&quot;&gt;图片&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                foreach (var a in Model)</span><br><span class="line">                &#123;</span><br><span class="line">                    &lt;tr style=&quot;text-align: center;&quot;&gt;</span><br><span class="line">                        &lt;td&gt;@a.id&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@a.createtime&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@a.title&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@a.body&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@a.visitnum&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@a.img&lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &#125;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td colspan=&quot;6&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;pager&quot;&gt;</span><br><span class="line">                            @if (Model != null)</span><br><span class="line">                            &#123;</span><br><span class="line">                                &lt;span style=&quot;height: 20px; line-height: 20px;&quot;&gt;</span><br><span class="line">                                    共 @Model.TotalItemCount.ToString() 条记录，</span><br><span class="line">                                    当前第 @ViewData[&quot;page&quot;] 页/共 @Model.PageCount 页</span><br><span class="line">                                &lt;/span&gt;</span><br><span class="line">                                    @Html.PagedListPager(Model, page =&gt; Url.Action(&quot;TableByChaJ&quot;, new &#123; page &#125;), new PagedListRenderOptions() &#123; LinkToFirstPageFormat = &quot;首页&quot;, LinkToNextPageFormat = &quot;下一页&quot;, LinkToPreviousPageFormat = &quot;上一页&quot;, LinkToLastPageFormat = &quot;末页&quot;, DisplayItemSliceAndTotal = false, MaximumPageNumbersToDisplay = 3 &#125;)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><p>注意：PagedList.IPagedList<t> 中T 改成自己分页的实体类</t></p><ol><li>controller控制器:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public ActionResult ActionName(int? page)</span><br><span class="line">&#123;</span><br><span class="line">    int PageNumber = page ?? 1;//page为null时默认值为1</span><br><span class="line">    int PageSize = 5;</span><br><span class="line">    ViewData[&quot;page&quot;] = PageNumber;</span><br><span class="line">    return View(VideoDAL.GetListPage().ToPagedList(PageNumber, PageSize));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意:代码中的list为list<t> 形式，返回视图IPagedList<t> </t></t></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MVC分页&quot;&gt;&lt;a href=&quot;#MVC分页&quot; class=&quot;headerlink&quot; title=&quot;MVC分页&quot;&gt;&lt;/a&gt;MVC分页&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Nuget安装 X.PagedList和X.PagedList.MVC&lt;br&gt;package.co
      
    
    </summary>
    
      <category term="MVC" scheme="http://haimianbao1111.github.io/categories/MVC/"/>
    
    
      <category term="MVC,X.PagedList" scheme="http://haimianbao1111.github.io/tags/MVC-X-PagedList/"/>
    
  </entry>
  
  <entry>
    <title>科学使用 Disqus</title>
    <link href="http://haimianbao1111.github.io/2018/01/23/%E7%A7%91%E5%AD%A6%E4%BD%BF%E7%94%A8-Disqus/"/>
    <id>http://haimianbao1111.github.io/2018/01/23/科学使用-Disqus/</id>
    <published>2018-01-23T13:06:56.000Z</published>
    <updated>2018-01-23T13:13:22.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="科学使用-Disqus"><a href="#科学使用-Disqus" class="headerlink" title="科学使用 Disqus"></a>科学使用 Disqus</h1><div class="note success"><p>详见： <a href="http://blog.fooleap.org/use-disqus-correctly.html" target="_blank" rel="noopener">http://blog.fooleap.org/use-disqus-correctly.html</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;科学使用-Disqus&quot;&gt;&lt;a href=&quot;#科学使用-Disqus&quot; class=&quot;headerlink&quot; title=&quot;科学使用 Disqus&quot;&gt;&lt;/a&gt;科学使用 Disqus&lt;/h1&gt;&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;详见： &lt;a h
      
    
    </summary>
    
      <category term="Disqus" scheme="http://haimianbao1111.github.io/categories/Disqus/"/>
    
    
      <category term="Disqus" scheme="http://haimianbao1111.github.io/tags/Disqus/"/>
    
  </entry>
  
  <entry>
    <title>Dapper使用</title>
    <link href="http://haimianbao1111.github.io/2018/01/23/dapper%E4%BD%BF%E7%94%A8/"/>
    <id>http://haimianbao1111.github.io/2018/01/23/dapper使用/</id>
    <published>2018-01-23T09:11:06.000Z</published>
    <updated>2018-01-28T09:40:54.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="1-连接语句"><a href="#1-连接语句" class="headerlink" title="1.连接语句"></a>1.连接语句</h2><div class="note success"><p>var conn = new SqlConnection(ConfigurationManager.ConnectionStrings[“SqlDiagnosticsDb”].ConnectionString);<br>使用dapper不需要考虑conn是否连接，在执行dapper时自行判断open状态，如果没有打开它会自己打开.</p></div><h2 id="2-insert"><a href="#2-insert" class="headerlink" title="2.insert"></a>2.insert</h2><div class="note success"><p>string query = “INSERT INTO Book(Name)VALUES(@name)”;<br>conn.Execute(query, book);</p><p>book类中有name属性，就可以这样方便去写，当然也可以写成  </p><p>string query = “INSERT INTO Book(Name)VALUES(@name)”;<br>conn.Execute(query,  new{@name=book.name});</p></div><h2 id="3-update"><a href="#3-update" class="headerlink" title="3.update"></a>3.update</h2><div class="note success"><p>string query = “UPDATE Book SET  Name=@name WHERE id =@id”;<br>conn.Execute(query, book);</p></div><h2 id="4-delete"><a href="#4-delete" class="headerlink" title="4.delete"></a>4.delete</h2><div class="note success"><p>string query = “DELETE FROM Book WHERE id = @id”;<br>conn.Execute(query, book);<br>conn.Execute(query, new { id = id });</p></div><h2 id="5-query"><a href="#5-query" class="headerlink" title="5.query"></a>5.query</h2><div class="note success"><p>string query = “SELECT * FROM Book”;<br>//无参数查询，返回列表，带参数查询和之前的参数赋值法相同.<br>conn.Query<book>(query).ToList();</book></p><p>//返回单条信息<br>string query = “SELECT * FROM Book WHERE id = @id”;<br>book = conn.Query<book>(query, new { id = id }).SingleOrDefault();  </book></p></div><h2 id="6-传统sql-in-1-2-3-用dapper就这样写"><a href="#6-传统sql-in-1-2-3-用dapper就这样写" class="headerlink" title="6.传统sql in (1,2,3) 用dapper就这样写"></a>6.传统sql in (1,2,3) 用dapper就这样写</h2><div class="note success"><p>conn.Query<users>(“SELECT * FROM Users s WHERE s.id IN (@ids) “,new { ids = new int[]{1,2,3}})</users></p><p>conn.Query<users>(“SELECT * FROM Users s WHERE s.id IN (@ids) “,new { ids = IDs.ToArray()})<br>在dapper因为安全性，不能直接用sql接接，要采用参数化</users></p></div><h2 id="7-批量插入"><a href="#7-批量插入" class="headerlink" title="7.批量插入"></a>7.批量插入</h2><div class="note success"><p>conn.Execute(@”insert MyTable(colA, colB) values (@a, @b)”, new[] { new { a=1, b=1 }, new { a=2, b=2 }, new { a=3, b=3 } })</p><p>也可以直接写入一个集合<br>conn.Execute(“insert user(name) values(@name)”,users) </p><p>这里users是一个user表的对象集合，可一次把集合中的所有数据插入到数据表中.</p></div><h2 id="8-多表查询"><a href="#8-多表查询" class="headerlink" title="8.多表查询"></a>8.多表查询</h2><div class="note success"><p>//查询图书时，同时查找对应的书评，并存在List中。实现1–n的查询操作<br>string query = “SELECT * FROM Book b LEFT JOIN BookReview br ON br.BookId = b.Id WHERE b.id = @id”;<br>Book lookup = null;<br>//Query<tfirst, tsecond,="" treturn=""><br> var b = conn.Query<book, bookreview,="" book="">(query,<br>　　(book, bookReview) =&gt;<br>　　{<br> 　　　　//扫描第一条记录，判断非空和非重复<br>　　　　if (lookup == null || lookup.Id != book.Id)<br>　　　　　　lookup = book;<br>　　　　//书对应的书评非空，加入当前书的书评List中，最后把重复的书去掉。<br>　　　　if (bookReview != null)<br>　　　　　　lookup.Reviews.Add(bookReview);<br> 　　　　return lookup;<br>　　}, new { id = id }).Distinct().SingleOrDefault();<br>return b;  </book,></tfirst,></p></div><p>多表联合查询是比较麻烦一些，到现在不是完全明白，多看几个例子<br><div class="note success"><p>var sql =  @”select * from Posts p join Users u on u.Id = p.OwnerId Order by p.Id”;<br>var data = conn.Query<post, user,="" post="">(sql, (post, user) =&gt; { post.Owner = user;   return post;}，splitOn：”id”);</post,></p><p>Post类和User类,它们存在外键， conn.Query返回的类型是最后一个参数Post, 其中Post中有一属性Owner是User对象，在(post, user)=&gt;lamda中指定了Owner值，上边的代码中的splitOn是ID，运行时，会从查询结果所有字段列表的最后一个字段开始进行匹配，一直到找到Id这个字段（大小写忽略），找到的第一个ID字段匹配User类的ID属性，那么从ID到最后一个字段都属于User，ID以前的字段都被影射到Post， 通过 (post, user) =&gt; { return post;},把两个类的实例解析出来。</p></div></p><h2 id="9-三表查询，一个是关联主键表（单个对象），一个是关联外键表（集合）。"><a href="#9-三表查询，一个是关联主键表（单个对象），一个是关联外键表（集合）。" class="headerlink" title="9.三表查询，一个是关联主键表（单个对象），一个是关联外键表（集合）。"></a>9.三表查询，一个是关联主键表（单个对象），一个是关联外键表（集合）。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public partial class UserInfo  </span><br><span class="line">&#123;  </span><br><span class="line">    public UserInfo()  </span><br><span class="line">    &#123;  </span><br><span class="line">        this.Persion = new HashSet&lt;Persion&gt;();  </span><br><span class="line">        this.MyTYC = new HashSet&lt;MyTYC&gt;();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int id &#123; get; set; &#125;  </span><br><span class="line">    public string name &#123; get; set; &#125;  </span><br><span class="line">    public Nullable&lt;System.DateTime&gt; createTime &#123; get; set; &#125;  </span><br><span class="line">    public Movies Movies &#123; get; set; &#125;  </span><br><span class="line">    public virtual ICollection&lt;MyTYC&gt; MyTYC &#123; get; set; &#125;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">public class Movies  </span><br><span class="line">&#123;  </span><br><span class="line">    public int ID &#123; get; set; &#125;  </span><br><span class="line">    public string Title &#123; get; set; &#125;  </span><br><span class="line">    public string ReleaseDate &#123; get; set; &#125;  </span><br><span class="line">    public string Genre &#123; get; set; &#125;  </span><br><span class="line">    public string Price &#123; get; set; &#125;  </span><br><span class="line">    public UserInfo UserInfo &#123; get; set; &#125;    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">public partial class MyTYC  </span><br><span class="line">&#123;  </span><br><span class="line">    public int id &#123; get; set; &#125;  </span><br><span class="line">    public string name &#123; get; set; &#125;        </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">string sql = @&quot;select * from UserInfo u   </span><br><span class="line">inner join [Movies].dbo.Movies m on u.id=m.ID   </span><br><span class="line">inner join MyTYC t on u.id=t.id&quot;;  </span><br><span class="line">            var data = conn.Query&lt;UserInfo, Movies, MyTYC, UserInfo&gt;(sql, (u, m, t) =&gt; &#123; u.Movies = m; u.MyTYC.Add(t); return u; &#125;);</span><br></pre></td></tr></table></figure><p>注意这里的对象和集合的获取方法：u.Movies = m; u.MyTYC.Add(t);</p><h2 id="10-多结果查询"><a href="#10-多结果查询" class="headerlink" title="10.多结果查询"></a>10.多结果查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">var sql = @&quot;select * from Customers where CustomerId = @id;</span><br><span class="line"> select * from Orders where CustomerId = @id;</span><br><span class="line"> select * from Returns where CustomerId = @id&quot;;</span><br><span class="line"></span><br><span class="line"> using (var multi = connection.QueryMultiple(sql, new &#123;id=selectedId&#125;))</span><br><span class="line"> &#123;</span><br><span class="line">        var customer = multi.Read&lt;Customer&gt;().Single();    </span><br><span class="line">        var orders = multi.Read&lt;Order&gt;().ToList();</span><br><span class="line">        var returns = multi.Read&lt;Return&gt;().ToList();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>再来一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">class Program  </span><br><span class="line">   &#123;  </span><br><span class="line"> </span><br><span class="line">       //创建连接对象  </span><br><span class="line">       protected static SqlConnection GetConnection()  </span><br><span class="line">       &#123;  </span><br><span class="line">           var connection = new SqlConnection(&quot;Data Source=.;Initial Catalog=TestDB;Integrated Security=True&quot;);  </span><br><span class="line">           connection.Open();  </span><br><span class="line">           return connection;  </span><br><span class="line">       &#125;  </span><br><span class="line"> </span><br><span class="line">       static void Main(string[] args)  </span><br><span class="line">       &#123;  </span><br><span class="line">           //测试输出多个结果集  </span><br><span class="line">           var sql = @&quot;INSERT INTO [dbo].[Student] ([Name]) VALUES (&apos;A1&apos;); select @@IDENTITY as A;  </span><br><span class="line">                       INSERT INTO [dbo].[Student] ([Name]) VALUES (&apos;B1&apos;); select @@IDENTITY as A;  </span><br><span class="line">                       INSERT INTO [dbo].[Student] ([Name]) VALUES (&apos;C1&apos;); select @@IDENTITY as A&quot;;  </span><br><span class="line"> </span><br><span class="line">           //初始化数据库连接  </span><br><span class="line">           using (SqlConnection connection = GetConnection())  </span><br><span class="line">           &#123;                  </span><br><span class="line">               List&lt;int&gt; ilist = new List&lt;int&gt;();  </span><br><span class="line">               //执行查询，获取结果集集合  </span><br><span class="line">               var multi = connection.QueryMultiple(sql);  </span><br><span class="line"> </span><br><span class="line">               //遍历结果集  </span><br><span class="line">               while(!multi.IsConsumed)  </span><br><span class="line">               &#123;  </span><br><span class="line">                   //读取当前结果集  </span><br><span class="line">                   var result = multi.Read().ToList()[0].A;  </span><br><span class="line">                   if (result != null)  </span><br><span class="line">                   &#123;  </span><br><span class="line">                       ilist.Add(Convert.ToInt32(result));  </span><br><span class="line">                   &#125;  </span><br><span class="line">               &#125;  </span><br><span class="line">               //for(int i = 0;i&lt;3;i++)  </span><br><span class="line">               //&#123;  </span><br><span class="line">               //    var result = multi.Read().ToList()[0].A;  </span><br><span class="line">               //    if (result != null)  </span><br><span class="line">               //    &#123;  </span><br><span class="line">               //        ilist.Add(Convert.ToInt32(result));  </span><br><span class="line">               //    &#125;  </span><br><span class="line">               //&#125;  </span><br><span class="line">               foreach (var item in ilist)  </span><br><span class="line">               &#123;  </span><br><span class="line">                   Console.WriteLine(item.ToString());  </span><br><span class="line">               &#125;  </span><br><span class="line">           &#125;  </span><br><span class="line">           Console.ReadLine();  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="11-支持存储过程"><a href="#11-支持存储过程" class="headerlink" title="11.支持存储过程"></a>11.支持存储过程</h2><div class="note success"><p>USE [Datamip]<br>GO<br>/<strong>**</strong> Object:  StoredProcedure [dbo].[sp_GetUsers]    Script Date: 09/02/2016 09:14:04 <strong>**</strong>/<br>SET ANSI_NULLS ON<br>GO<br>SET QUOTED_IDENTIFIER ON<br>GO<br>Create proc [dbo].[sp_GetUsers]<br> @id int<br>as<br>begin<br>select * from Users where UserID = @id ;<br>end</p><p>在这里，我们需要向存储过程塞入一个@id参数，返回具体的Users EntityList，好了，下面再看一下Query如何构造。</p><p>static void Main(string[] args)<br>{<br>    var connection = new SqlConnection(“Data Source=.;Initial Catalog=Datamip;Integrated Security=True;MultipleActiveResultSets=True”);<br>    var info = connection.Query<users>(“sp_GetUsers”, new { id = 5 },<br>               commandType: CommandType.StoredProcedure);<br>}</users></p></div><h2 id="12-如果某一代码中多次操作数据库，可以把conn设置为打开，最后时再close"><a href="#12-如果某一代码中多次操作数据库，可以把conn设置为打开，最后时再close" class="headerlink" title="12.如果某一代码中多次操作数据库，可以把conn设置为打开，最后时再close."></a>12.如果某一代码中多次操作数据库，可以把conn设置为打开，最后时再close.</h2><div class="note success"><p>conn.open()<br>conn.Query(…..<br>…..<br>for….<br>…..<br>conn.close()</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h1&gt;&lt;h2 id=&quot;1-连接语句&quot;&gt;&lt;a href=&quot;#1-连接语句&quot; class=&quot;headerlink&quot; title=&quot;1.连接语
      
    
    </summary>
    
      <category term="ORM" scheme="http://haimianbao1111.github.io/categories/ORM/"/>
    
    
      <category term="ORM" scheme="http://haimianbao1111.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>使用.NET 反射机制(Reflecttion)读取和保存Xml配置文档</title>
    <link href="http://haimianbao1111.github.io/2018/01/23/%E4%BD%BF%E7%94%A8-NET-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-Reflecttion-%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98Xml%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3/"/>
    <id>http://haimianbao1111.github.io/2018/01/23/使用-NET-反射机制-Reflecttion-读取和保存Xml配置文档/</id>
    <published>2018-01-23T05:10:03.000Z</published>
    <updated>2018-01-23T06:32:56.400Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h1><div class="note class_name"><p> 定义个一个接口：<br>undefined</p><p>将其编译成DLL文件，供其他程序引用。  </p><p>插件必须编译成DLL文件，可包含多个类，类可以是窗体类型，也可以是控制台类型的。<br>类必须实现上面的接口。  </p><p>主程序负责显示插件信息，并运行插件。  </p><p>主程序会生成XML格式的配置文件，使下次访问加快。  </p><p>下载：<a href="http://download.csdn.net/download/rightmin/810378" target="_blank" rel="noopener">http://download.csdn.net/download/rightmin/810378</a>  </p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原文链接：&quot;&gt;&lt;a href=&quot;#原文链接：&quot; class=&quot;headerlink&quot; title=&quot;原文链接：&quot;&gt;&lt;/a&gt;原文链接：&lt;/h1&gt;&lt;div class=&quot;note class_name&quot;&gt;&lt;p&gt; 定义个一个接口：&lt;br&gt;undefined&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/categories/Asp-Net/"/>
    
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>Dapper的增、删、查改的CodeSmith模板</title>
    <link href="http://haimianbao1111.github.io/2018/01/23/dapper%E7%9A%84%E5%A2%9E%E3%80%81%E5%88%A0%E3%80%81%E6%9F%A5%E6%94%B9%E7%9A%84CodeSmith%E6%A8%A1%E6%9D%BF/"/>
    <id>http://haimianbao1111.github.io/2018/01/23/dapper的增、删、查改的CodeSmith模板/</id>
    <published>2018-01-23T05:03:50.000Z</published>
    <updated>2018-01-28T09:04:06.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CodeSmith模板"><a href="#CodeSmith模板" class="headerlink" title="CodeSmith模板"></a>CodeSmith模板</h1><p>访问量不大的项目我都是用EF写数据库操作，因为EF除了速度上慢以外，但开发效率极快，省略了很多sql写法，并能很方便的调用外键、集合等信息，用EF写项目最爽的事。不过有些项目网站要考虑运行速度，这时不得不用其它的ORM框架，我常用dapper，因为它效果快，而且写sql非常灵活.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Template Language=&quot;C#&quot; TargetLanguage=&quot;Text&quot; %&gt;</span><br><span class="line">&lt;%@ Property Name=&quot;BaseNamespace&quot; Type=&quot;String&quot; %&gt;</span><br><span class="line">&lt;%@ Property Name=&quot;SourceDatabase&quot; Type=&quot;SchemaExplorer.DatabaseSchema&quot; Category=&quot;Context&quot; Description=&quot;Database that the documentation should be based on.&quot; %&gt;</span><br><span class="line">&lt;%-- 要打印的表 --%&gt;</span><br><span class="line">&lt;%@ Property Name=&quot;Table&quot; Type=&quot;TableSchema&quot; DeepLoad=&quot;True&quot; Optional=&quot;False&quot; Category=&quot;Context&quot; Description=&quot;&quot; %&gt;</span><br><span class="line">  </span><br><span class="line">&lt;%@ Assembly Name=&quot;SchemaExplorer&quot; %&gt;</span><br><span class="line">&lt;%@ Assembly Name=&quot;System.Design&quot; %&gt;</span><br><span class="line">&lt;%@ Import Namespace=&quot;SchemaExplorer&quot; %&gt;</span><br><span class="line">  </span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using &lt;%=BaseNamespace%&gt;.Model;</span><br><span class="line">using Dapper;</span><br><span class="line">using MayHuan.Data;</span><br><span class="line">using System.Collections;</span><br><span class="line">  </span><br><span class="line">namespace &lt;%=BaseNamespace%&gt;.Services</span><br><span class="line">&#123;</span><br><span class="line">    public class &lt;%= Table.Name%&gt;Service:I&lt;%= Table.Name%&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        public bool Delete(M&lt;%= Table.Name%&gt; model)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var conn = DBCommon.GetConn())</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                var a = conn.Execute(@&quot;Delete from &lt;%= Table.Name%&gt; where OID=@OID&quot;, new &#123; OID = model.OID &#125;);</span><br><span class="line">                conn.Close();</span><br><span class="line">                return a &gt; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        public bool Insert(M&lt;%= Table.Name%&gt; model)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var conn = DBCommon.GetConn())</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                var a = conn.Execute(@&quot;INSERT INTO &lt;%= Table.Name%&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        System.Text.StringBuilder sbSql=new System.Text.StringBuilder();</span><br><span class="line">        %&gt;</span><br><span class="line">      &lt;%</span><br><span class="line">         </span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                sbSql.AppendLine(col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      %&gt;</span><br><span class="line">      (&lt;%=sbSql.ToString().Trim(&apos;\r&apos;,&apos;\n&apos;,&apos;,&apos;) %&gt;)</span><br><span class="line">      VALUES</span><br><span class="line">        &lt;%</span><br><span class="line">        sbSql.Clear();</span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                 sbSql.AppendLine(&quot;@&quot;+col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        (&lt;%=sbSql.ToString().Trim(&apos;\r&apos;,&apos;\n&apos;,&apos;,&apos;) %&gt;)&quot;,</span><br><span class="line">        &lt;%</span><br><span class="line">        sbSql.Clear();</span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                sbSql.Append(col.Name+&quot; = model.&quot;+col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        new &#123; &lt;%=sbSql.ToString().Trim(&apos;,&apos;) %&gt; &#125;);</span><br><span class="line">                conn.Close();</span><br><span class="line">                return a &gt; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        public bool Update(M&lt;%= Table.Name%&gt; model)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var conn = DBCommon.GetConn())</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                var a = conn.Execute(@&quot;UPDATE &lt;%= Table.Name%&gt; SET</span><br><span class="line">        &lt;%</span><br><span class="line">        sbSql.Clear();</span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                sbSql.AppendLine(col.Name+&quot;=@&quot;+col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      %&gt;</span><br><span class="line"> &lt;%=sbSql.ToString().Trim(&apos;\r&apos;,&apos;\n&apos;,&apos;,&apos;) %&gt; </span><br><span class="line"> WHERE OID=@OID&quot;,</span><br><span class="line">        &lt;%</span><br><span class="line">        sbSql.Clear();</span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                sbSql.Append(col.Name+&quot; = model.&quot;+col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        new &#123; &lt;%=sbSql.ToString().Trim(&apos;,&apos;) %&gt;,OID = model.OID &#125;);</span><br><span class="line">                conn.Close();</span><br><span class="line">                return a &gt; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        public M&lt;%= Table.Name%&gt; GetModelByID(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var conn = DBCommon.GetConn())</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                var a = conn.Query&lt;M&lt;%= Table.Name%&gt;&gt;(@&quot;select * from &lt;%= Table.Name%&gt; where OID=@OID&quot;, new &#123; OID =id &#125;).FirstOrDefault();</span><br><span class="line">                conn.Close();</span><br><span class="line">                return a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        public Model.PageDataView&lt;M&lt;%= Table.Name%&gt;&gt; GetList(string companyName, int pageNum, int pageSize = 10)</span><br><span class="line">        &#123;</span><br><span class="line">            var criteria = new PageCriteria();</span><br><span class="line">            criteria.CurrentPage = pageNum;</span><br><span class="line">            criteria.Fields = &quot;a.*&quot;;</span><br><span class="line">            criteria.PageSize = pageSize;</span><br><span class="line">            criteria.PrimaryKey = &quot;a.OID&quot;;</span><br><span class="line">            criteria.TableName = @&quot;&lt;%= Table.Name%&gt; a&quot;;</span><br><span class="line">             </span><br><span class="line">            string sqlFilter = &quot;1=1&quot;;</span><br><span class="line">            if (!string.IsNullOrEmpty(companyName))</span><br><span class="line">                sqlFilter += string.Format(&quot; and b.CompanyName like &apos;%&#123;0&#125;%&apos;&quot;, companyName);</span><br><span class="line">            criteria.Condition += sqlFilter;</span><br><span class="line">             </span><br><span class="line">            var r = DBCommon.GetPageData&lt;M&lt;%= Table.Name%&gt;&gt;(criteria);</span><br><span class="line">  </span><br><span class="line">            return r;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CodeSmith模板&quot;&gt;&lt;a href=&quot;#CodeSmith模板&quot; class=&quot;headerlink&quot; title=&quot;CodeSmith模板&quot;&gt;&lt;/a&gt;CodeSmith模板&lt;/h1&gt;&lt;p&gt;访问量不大的项目我都是用EF写数据库操作，因为EF除了速度上慢以外，
      
    
    </summary>
    
      <category term="ORM" scheme="http://haimianbao1111.github.io/categories/ORM/"/>
    
    
      <category term="ORM" scheme="http://haimianbao1111.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>Asp.Net 用支付宝沙箱环境测试支付接口</title>
    <link href="http://haimianbao1111.github.io/2018/01/21/asp-net-%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E6%B5%8B%E8%AF%95%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3/"/>
    <id>http://haimianbao1111.github.io/2018/01/21/asp-net-用支付宝沙箱环境测试支付接口/</id>
    <published>2018-01-21T13:44:09.000Z</published>
    <updated>2018-01-28T09:07:10.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="沙箱环境的配置"><a href="#沙箱环境的配置" class="headerlink" title="沙箱环境的配置"></a>沙箱环境的配置</h1><h2 id="1-注册成为开发人员"><a href="#1-注册成为开发人员" class="headerlink" title="1.注册成为开发人员"></a>1.注册成为开发人员</h2><div class="note info"><p>注册成功以后，点击以下链接，进入到支付宝官方的沙箱环境说明：<a href="https://docs.open.alipay.com/200/10531" target="_blank" rel="noopener">https://docs.open.alipay.com/200/10531</a> </p></div><p><img src="/images/alipay/支付宝.png" class="full-image">  </p><h2 id="2-沙箱介绍"><a href="#2-沙箱介绍" class="headerlink" title="2.沙箱介绍"></a>2.沙箱介绍</h2><div class="note info"><p>然后点击上图中的沙箱环境，跳转到自己的沙箱环境，配置自己的沙箱环境 。 </p></div><img src="/images/alipay/沙箱应用.png" class="full-image">  ## 3.秘钥<div class="note info"><p> 至于公钥秘钥的生成，点击 <a href="https://docs.open.alipay.com/291/105971" target="_blank" rel="noopener">https://docs.open.alipay.com/291/105971</a> 下载生成RSA密钥的工具，操作视频可以搜索该链接：<a href="https://openclub.alipay.com/index.php?c=video&amp;fid=76" target="_blank" rel="noopener">https://openclub.alipay.com/index.php?c=video&amp;fid=76</a> 查看生成秘钥的具体操作步骤。<br>重点是秘钥长度一定要是2048，一定要是2048.当时我测试的时候，生成的1024的，验签通过，但是一上传就提示失败。可见再牛逼的网站也是有bug的。  </p></div><h2 id="4-下载支付宝支付demo"><a href="#4-下载支付宝支付demo" class="headerlink" title="4.下载支付宝支付demo"></a>4.下载支付宝支付demo</h2><div class="note info"><p>  打开demo，把配置里面的配置改成自己沙箱账号的配置。<br>支付宝支付demo下载的链接：<a href="https://docs.open.alipay.com/54/106682/" target="_blank" rel="noopener">https://docs.open.alipay.com/54/106682/</a><br>把配置文件里面的配置改成沙箱 </p></div><p><img src="/images/alipay/代码网关设置.png" class="full-image">  </p><h2 id="5-下载沙箱钱包"><a href="#5-下载沙箱钱包" class="headerlink" title="5.下载沙箱钱包"></a>5.下载沙箱钱包</h2><div class="note info"><p>进行支付测试，注意不是支付宝哦，详细查看文说明档。，目前沙箱钱包仅提供Android版本，可点击 <a href="https://sandbox.alipaydev.com/user/downloadApp.htm" class="font-color:red" target="_blank" rel="noopener">下载</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;沙箱环境的配置&quot;&gt;&lt;a href=&quot;#沙箱环境的配置&quot; class=&quot;headerlink&quot; title=&quot;沙箱环境的配置&quot;&gt;&lt;/a&gt;沙箱环境的配置&lt;/h1&gt;&lt;h2 id=&quot;1-注册成为开发人员&quot;&gt;&lt;a href=&quot;#1-注册成为开发人员&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/categories/Asp-Net/"/>
    
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>前端静态文件如何应对HTTPS的到来</title>
    <link href="http://haimianbao1111.github.io/2018/01/18/%E5%89%8D%E7%AB%AF%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9HTTPS%E7%9A%84%E5%88%B0%E6%9D%A5/"/>
    <id>http://haimianbao1111.github.io/2018/01/18/前端静态文件如何应对HTTPS的到来/</id>
    <published>2018-01-17T17:26:30.000Z</published>
    <updated>2018-01-18T14:33:04.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h1><div class="note class_name"><p><a href="https://www.cnblogs.com/webARM/p/5728695.html" target="_blank" rel="noopener">https://www.cnblogs.com/webARM/p/5728695.html</a></p></div><p><div id="container"></div></p><p><link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"></p><script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script><script>var gitment = new Gitment({    owner: 'haimianbao1111',    repo: '2018/01/18/前端静态文件如何应对HTTPS的到来',    oauth: {      client_id: '24f4cb2732b2cd293c3c',      client_secret: '54ad1cb8fc1bbab13871b8b9dd01004340aceca0',    },  })gitment.render('container')</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原文链接：&quot;&gt;&lt;a href=&quot;#原文链接：&quot; class=&quot;headerlink&quot; title=&quot;原文链接：&quot;&gt;&lt;/a&gt;原文链接：&lt;/h1&gt;&lt;div class=&quot;note class_name&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.
      
    
    </summary>
    
      <category term="前端" scheme="http://haimianbao1111.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="tags" scheme="http://haimianbao1111.github.io/tags/tags/"/>
    
  </entry>
  
  <entry>
    <title>搭建评论系统</title>
    <link href="http://haimianbao1111.github.io/2018/01/18/%E6%90%AD%E5%BB%BA%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>http://haimianbao1111.github.io/2018/01/18/搭建评论系统/</id>
    <published>2018-01-17T16:20:07.000Z</published>
    <updated>2018-01-28T10:12:31.447Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h1><div class="note success"><p>Gitment 是作者实现的一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。</p></div><h2 id="1-注册-OAuth-Application"><a href="#1-注册-OAuth-Application" class="headerlink" title="1. 注册 OAuth Application"></a>1. 注册 OAuth Application</h2><p><a href="https://github.com/settings/applications/new" target="_blank" rel="external">点击此处</a> 来注册一个新的 OAuth Application。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，如 <a href="https://imsun.net" target="_blank" rel="noopener">https://imsun.net</a>  ）。</p><p>你会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录。</p><h2 id="2-引入-Gitment"><a href="#2-引入-Gitment" class="headerlink" title="2. 引入 Gitment"></a>2. 引入 Gitment</h2><p>将下面的代码添加到你的页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var gitment = new Gitment(&#123;</span><br><span class="line">  id: &apos;页面 ID&apos;, // 可选。默认为 location.href</span><br><span class="line">  owner: &apos;你的 GitHub ID&apos;,</span><br><span class="line">  repo: &apos;存储评论的 repo&apos;,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: &apos;你的 client ID&apos;,</span><br><span class="line">    client_secret: &apos;你的 client secret&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(&apos;container&apos;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>注意，上述代码引用的 Gitment 将会随着开发变动。如果你希望始终使用最新的界面与特性即可引入上述代码。</p><p>如果你希望引用确定版本的 Gitment，则应该使用 npm 进行安装。<br><div class="note class_name"><p>$ npm install –save gitment</p></div></p><h2 id="3-初始化评论"><a href="#3-初始化评论" class="headerlink" title="3. 初始化评论"></a>3. 初始化评论</h2><p>页面发布后，你需要访问页面并使用你的 GitHub 账号登录（请确保你的账号是第二步所填 repo 的 owner），点击初始化按钮。</p><p>之后其他用户即可在该页面发表评论。</p><h1 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h1><p>Gitment 很容易进行自定义，你可以写一份自定义的 CSS 或者使用一个新的主题。（主题可以改变 DOM 结构而自定义 CSS 不能）</p><p>比如你可以通过自定义主题将评论框放在评论列表前面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const myTheme = &#123;</span><br><span class="line">  render(state, instance) &#123;</span><br><span class="line">    const container = document.createElement(&apos;div&apos;)</span><br><span class="line">    container.lang = &quot;en-US&quot;</span><br><span class="line">    container.className = &apos;gitment-container gitment-root-container&apos;</span><br><span class="line">    container.appendChild(instance.renderHeader(state, instance))</span><br><span class="line">    container.appendChild(instance.renderEditor(state, instance))</span><br><span class="line">    container.appendChild(instance.renderComments(state, instance))</span><br><span class="line">    container.appendChild(instance.renderFooter(state, instance))</span><br><span class="line">    return container</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">const gitment = new Gitment(&#123;</span><br><span class="line">  // ...</span><br><span class="line">  theme: myTheme,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(&apos;container&apos;)</span><br></pre></td></tr></table></figure></p><h1 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h1><div class="note class_name"><p><a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">https://imsun.net/posts/gitment-introduction/</a></p></div><p><div id="container"></div></p><p><link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"></p><script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script><script>var gitment = new Gitment({    owner: 'haimianbao1111',    repo: '2018/01/18/搭建评论系统',    oauth: {      client_id: '24f4cb2732b2cd293c3c',      client_secret: '54ad1cb8fc1bbab13871b8b9dd01004340aceca0',    },  })gitment.render('container')</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础使用&quot;&gt;&lt;a href=&quot;#基础使用&quot; class=&quot;headerlink&quot; title=&quot;基础使用&quot;&gt;&lt;/a&gt;基础使用&lt;/h1&gt;&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;Gitment 是作者实现的一款基于 GitHub Issues 的评论
      
    
    </summary>
    
      <category term="GitHub Issues" scheme="http://haimianbao1111.github.io/categories/GitHub-Issues/"/>
    
    
      <category term="tags" scheme="http://haimianbao1111.github.io/tags/tags/"/>
    
  </entry>
  
</feed>
