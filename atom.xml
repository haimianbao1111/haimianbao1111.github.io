<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>艾步罗</title>
  
  <subtitle>一枚90后程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haimianbao1111.github.io/"/>
  <updated>2018-01-23T09:41:44.929Z</updated>
  <id>http://haimianbao1111.github.io/</id>
  
  <author>
    <name>HJY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dapper使用</title>
    <link href="http://haimianbao1111.github.io/2018/01/23/dapper%E4%BD%BF%E7%94%A8/"/>
    <id>http://haimianbao1111.github.io/2018/01/23/dapper使用/</id>
    <published>2018-01-23T09:11:06.000Z</published>
    <updated>2018-01-23T09:41:44.929Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><ol><li>连接语句<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var conn = new SqlConnection(  ConfigurationManager.ConnectionStrings[&quot;SqlDiagnosticsDb&quot;].ConnectionString);  </span><br><span class="line">``` </span><br><span class="line">使用dapper不需要考虑conn是否连接，在执行dapper时自行判断   open状态，如果没有打开它会自己打开。    </span><br><span class="line"></span><br><span class="line">2. insert</span><br></pre></td></tr></table></figure></li></ol><p>string query = “INSERT INTO Book(Name)VALUES(@name)”;<br>conn.Execute(query, book);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">book类中有name属性，就可以这样方便去写，当然也可以写成</span><br></pre></td></tr></table></figure></p><p>string query = “INSERT INTO Book(Name)VALUES(@name)”;<br>conn.Execute(query,  new{@name=book.name});<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. update</span><br></pre></td></tr></table></figure></p><p>string query = “UPDATE Book SET  Name=@name WHERE id =@id”;<br>conn.Execute(query, book);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. delete</span><br></pre></td></tr></table></figure></p><p>string query = “DELETE FROM Book WHERE id = @id”;<br>conn.Execute(query, book);<br>conn.Execute(query, new { id = id });<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">5. query</span><br></pre></td></tr></table></figure></p><p>string query = “SELECT * FROM Book”;<br>//无参数查询，返回列表，带参数查询和之前的参数赋值法相同。<br>conn.Query<book>(query).ToList();  </book></p><p>//返回单条信息<br>string query = “SELECT * FROM Book WHERE id = @id”;<br>book = conn.Query<book>(query, new { id = id }).SingleOrDefault();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">6. 传统sql in (1,2,3) 用dapper就这样写</span><br></pre></td></tr></table></figure></book></p><p>conn.Query<users>(“SELECT * FROM Users s WHERE s.id IN (@ids) “,new { ids = new int[]{1,2,3}})</users></p><p>conn.Query<users>(“SELECT * FROM Users s WHERE s.id IN (@ids) “,new { ids = IDs.ToArray()})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">在dapper因为安全性，不能直接用sql接接，要采用参数化,</span><br><span class="line"></span><br><span class="line">7. 批量插入</span><br></pre></td></tr></table></figure></users></p><p>conn.Execute(@”insert MyTable(colA, colB) values (@a, @b)”, new[] { new { a=1, b=1 }, new { a=2, b=2 }, new { a=3, b=3 } })<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">也可以直接写入一个集合</span><br></pre></td></tr></table></figure></p><p>conn.Execute(“insert user(name) values(@name)”,users)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这里users是一个user表的对象集合，可一次把集合中的所有数据插入到数据表中。  </span><br><span class="line"></span><br><span class="line">8. 多表查询</span><br></pre></td></tr></table></figure></p><p>//查询图书时，同时查找对应的书评，并存在List中。实现1–n的查询操作<br>string query = “SELECT * FROM Book b LEFT JOIN BookReview br ON br.BookId = b.Id WHERE b.id = @id”;<br>Book lookup = null;<br>//Query<tfirst, tsecond,="" treturn=""><br> var b = conn.Query<book, bookreview,="" book="">(query,<br>　　(book, bookReview) =&gt;<br>　　{<br> 　　　　//扫描第一条记录，判断非空和非重复<br>　　　　if (lookup == null || lookup.Id != book.Id)<br>　　　　　　lookup = book;<br>　　　　//书对应的书评非空，加入当前书的书评List中，最后把重复的书去掉。<br>　　　　if (bookReview != null)<br>　　　　　　lookup.Reviews.Add(bookReview);<br> 　　　　return lookup;<br>　　}, new { id = id }).Distinct().SingleOrDefault();<br>return b;  </book,></tfirst,></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">多表联合查询是比较麻烦一些，到现在不是完全明白，多看几个例子</span><br></pre></td></tr></table></figure><p>var sql =  @”select * from Posts p join Users u on u.Id = p.OwnerId Order by p.Id”;<br>var data = conn.Query<post, user,="" post="">(sql, (post, user) =&gt; { post.Owner = user;   return post;}，splitOn：”id”);<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Post类和User类,它们存在外键， conn.Query返回的类型是最后一个参数Post, 其中Post中有一属性Owner是User对象，在(post, user)=&gt;lamda中指定了Owner值，上边的代码中的splitOn是ID，运行时，会从查询结果所有字段列表的最后一个字段开始进行匹配，一直到找到Id这个字段（大小写忽略），找到的第一个ID字段匹配User类的ID属性，那么从ID到最后一个字段都属于User，ID以前的字段都被影射到Post， 通过 (post, user) =&gt; &#123; return post;&#125;,把两个类的实例解析出来。</span><br><span class="line"></span><br><span class="line">9. 三表查询，一个是关联主键表（单个对象），一个是关联外键表（集合）。</span><br></pre></td></tr></table></figure></post,></p><p>public partial class UserInfo<br>{<br>    public UserInfo()<br>    {<br>        this.Persion = new HashSet<persion>();<br>        this.MyTYC = new HashSet<mytyc>();<br>    }  </mytyc></persion></p><pre><code>public int id { get; set; }  public string name { get; set; }  public Nullable&lt;System.DateTime&gt; createTime { get; set; }  public Movies Movies { get; set; }  public virtual ICollection&lt;MyTYC&gt; MyTYC { get; set; }  </code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>public class Movies<br>{<br>    public int ID { get; set; }<br>    public string Title { get; set; }<br>    public string ReleaseDate { get; set; }<br>    public string Genre { get; set; }<br>    public string Price { get; set; }<br>    public UserInfo UserInfo { get; set; }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>public partial class MyTYC<br>{<br>    public int id { get; set; }<br>    public string name { get; set; }<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>string sql = @”select * from UserInfo u<br>inner join [Movies].dbo.Movies m on u.id=m.ID<br>inner join MyTYC t on u.id=t.id”;<br>            var data = conn.Query<userinfo, movies,="" mytyc,="" userinfo="">(sql, (u, m, t) =&gt; { u.Movies = m; u.MyTYC.Add(t); return u; });<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注意这里的对象和集合的获取方法：u.Movies = m; u.MyTYC.Add(t);   </span><br><span class="line"></span><br><span class="line">10. 多结果查询</span><br></pre></td></tr></table></figure></userinfo,></p><p>var sql = @”select <em> from Customers where CustomerId = @id;<br> select </em> from Orders where CustomerId = @id;<br> select * from Returns where CustomerId = @id”;</p><p> using (var multi = connection.QueryMultiple(sql, new {id=selectedId}))<br> {<br>        var customer = multi.Read<customer>().Single();<br>        var orders = multi.Read<order>().ToList();<br>        var returns = multi.Read<return>().ToList();<br> }<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">再来一个</span><br></pre></td></tr></table></figure></return></order></customer></p><p> class Program<br>    {  </p><pre><code>    //创建连接对象      protected static SqlConnection GetConnection()      {          var connection = new SqlConnection(&quot;Data Source=.;Initial Catalog=TestDB;Integrated Security=True&quot;);          connection.Open();          return connection;      }      static void Main(string[] args)      {          //测试输出多个结果集          var sql = @&quot;INSERT INTO [dbo].[Student] ([Name]) VALUES (&apos;A1&apos;); select @@IDENTITY as A;                      INSERT INTO [dbo].[Student] ([Name]) VALUES (&apos;B1&apos;); select @@IDENTITY as A;                      INSERT INTO [dbo].[Student] ([Name]) VALUES (&apos;C1&apos;); select @@IDENTITY as A&quot;;          //初始化数据库连接          using (SqlConnection connection = GetConnection())          {                              List&lt;int&gt; ilist = new List&lt;int&gt;();              //执行查询，获取结果集集合              var multi = connection.QueryMultiple(sql);              //遍历结果集              while(!multi.IsConsumed)              {                  //读取当前结果集                  var result = multi.Read().ToList()[0].A;                  if (result != null)                  {                      ilist.Add(Convert.ToInt32(result));                  }              }              //for(int i = 0;i&lt;3;i++)              //{              //    var result = multi.Read().ToList()[0].A;              //    if (result != null)              //    {              //        ilist.Add(Convert.ToInt32(result));              //    }              //}              foreach (var item in ilist)              {                  Console.WriteLine(item.ToString());              }          }          Console.ReadLine();      }  }</code></pre> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">11. 支持存储过程</span><br></pre></td></tr></table></figure><p>USE [Datamip]<br>GO<br>/<strong>**</strong> Object:  StoredProcedure [dbo].[sp_GetUsers]    Script Date: 09/02/2016 09:14:04 <strong>**</strong>/<br>SET ANSI_NULLS ON<br>GO<br>SET QUOTED_IDENTIFIER ON<br>GO<br>Create proc [dbo].[sp_GetUsers]<br> @id int<br>as<br>begin<br>select * from Users where UserID = @id ;<br>end<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在这里，我们需要向存储过程塞入一个@id参数，返回具体的Users EntityList，好了，下面再看一下Query如何构造。</span><br></pre></td></tr></table></figure></p><p> static void Main(string[] args)<br>{<br>    var connection = new SqlConnection(“Data Source=.;Initial Catalog=Datamip;Integrated Security=True;MultipleActiveResultSets=True”);<br>    var info = connection.Query<users>(“sp_GetUsers”, new { id = 5 },<br>               commandType: CommandType.StoredProcedure);<br>}<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">12. 如果某一代码中多次操作数据库，可以把conn设置为打开，最后时再close</span><br></pre></td></tr></table></figure></users></p><p>conn.open()<br>conn.Query(…..<br>…..<br>for….<br>…..<br>conn.close()<br>```</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;连接语句&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="ORM" scheme="http://haimianbao1111.github.io/categories/ORM/"/>
    
    
      <category term="ORM" scheme="http://haimianbao1111.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>使用.NET 反射机制(Reflecttion)读取和保存Xml配置文档</title>
    <link href="http://haimianbao1111.github.io/2018/01/23/%E4%BD%BF%E7%94%A8-NET-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-Reflecttion-%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98Xml%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3/"/>
    <id>http://haimianbao1111.github.io/2018/01/23/使用-NET-反射机制-Reflecttion-读取和保存Xml配置文档/</id>
    <published>2018-01-23T05:10:03.000Z</published>
    <updated>2018-01-23T06:32:56.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h1><div class="note class_name"><p> 定义个一个接口：<br>undefined</p><p>将其编译成DLL文件，供其他程序引用。  </p><p>插件必须编译成DLL文件，可包含多个类，类可以是窗体类型，也可以是控制台类型的。<br>类必须实现上面的接口。  </p><p>主程序负责显示插件信息，并运行插件。  </p><p>主程序会生成XML格式的配置文件，使下次访问加快。  </p><p>下载：<a href="http://download.csdn.net/download/rightmin/810378" target="_blank" rel="noopener">http://download.csdn.net/download/rightmin/810378</a>  </p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原文链接：&quot;&gt;&lt;a href=&quot;#原文链接：&quot; class=&quot;headerlink&quot; title=&quot;原文链接：&quot;&gt;&lt;/a&gt;原文链接：&lt;/h1&gt;&lt;div class=&quot;note class_name&quot;&gt;&lt;p&gt; 定义个一个接口：&lt;br&gt;undefined&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/categories/Asp-Net/"/>
    
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>dapper的增、删、查改的CodeSmith模板</title>
    <link href="http://haimianbao1111.github.io/2018/01/23/dapper%E7%9A%84%E5%A2%9E%E3%80%81%E5%88%A0%E3%80%81%E6%9F%A5%E6%94%B9%E7%9A%84CodeSmith%E6%A8%A1%E6%9D%BF/"/>
    <id>http://haimianbao1111.github.io/2018/01/23/dapper的增、删、查改的CodeSmith模板/</id>
    <published>2018-01-23T05:03:50.000Z</published>
    <updated>2018-01-23T09:14:24.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CodeSmith模板"><a href="#CodeSmith模板" class="headerlink" title="CodeSmith模板"></a>CodeSmith模板</h1><p>访问量不大的项目我都是用EF写数据库操作，因为EF除了速度上慢以外，但开发效率极快，省略了很多sql写法，并能很方便的调用外键、集合等信息，用EF写项目最爽的事。不过有些项目网站要考虑运行速度，这时不得不用其它的ORM框架，我常用dapper，因为它效果快，而且写sql非常灵活.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Template Language=&quot;C#&quot; TargetLanguage=&quot;Text&quot; %&gt;</span><br><span class="line">&lt;%@ Property Name=&quot;BaseNamespace&quot; Type=&quot;String&quot; %&gt;</span><br><span class="line">&lt;%@ Property Name=&quot;SourceDatabase&quot; Type=&quot;SchemaExplorer.DatabaseSchema&quot; Category=&quot;Context&quot; Description=&quot;Database that the documentation should be based on.&quot; %&gt;</span><br><span class="line">&lt;%-- 要打印的表 --%&gt;</span><br><span class="line">&lt;%@ Property Name=&quot;Table&quot; Type=&quot;TableSchema&quot; DeepLoad=&quot;True&quot; Optional=&quot;False&quot; Category=&quot;Context&quot; Description=&quot;&quot; %&gt;</span><br><span class="line">  </span><br><span class="line">&lt;%@ Assembly Name=&quot;SchemaExplorer&quot; %&gt;</span><br><span class="line">&lt;%@ Assembly Name=&quot;System.Design&quot; %&gt;</span><br><span class="line">&lt;%@ Import Namespace=&quot;SchemaExplorer&quot; %&gt;</span><br><span class="line">  </span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using &lt;%=BaseNamespace%&gt;.Model;</span><br><span class="line">using Dapper;</span><br><span class="line">using MayHuan.Data;</span><br><span class="line">using System.Collections;</span><br><span class="line">  </span><br><span class="line">namespace &lt;%=BaseNamespace%&gt;.Services</span><br><span class="line">&#123;</span><br><span class="line">    public class &lt;%= Table.Name%&gt;Service:I&lt;%= Table.Name%&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        public bool Delete(M&lt;%= Table.Name%&gt; model)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var conn = DBCommon.GetConn())</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                var a = conn.Execute(@&quot;Delete from &lt;%= Table.Name%&gt; where OID=@OID&quot;, new &#123; OID = model.OID &#125;);</span><br><span class="line">                conn.Close();</span><br><span class="line">                return a &gt; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        public bool Insert(M&lt;%= Table.Name%&gt; model)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var conn = DBCommon.GetConn())</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                var a = conn.Execute(@&quot;INSERT INTO &lt;%= Table.Name%&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        System.Text.StringBuilder sbSql=new System.Text.StringBuilder();</span><br><span class="line">        %&gt;</span><br><span class="line">      &lt;%</span><br><span class="line">         </span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                sbSql.AppendLine(col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      %&gt;</span><br><span class="line">      (&lt;%=sbSql.ToString().Trim(&apos;\r&apos;,&apos;\n&apos;,&apos;,&apos;) %&gt;)</span><br><span class="line">      VALUES</span><br><span class="line">        &lt;%</span><br><span class="line">        sbSql.Clear();</span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                 sbSql.AppendLine(&quot;@&quot;+col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        (&lt;%=sbSql.ToString().Trim(&apos;\r&apos;,&apos;\n&apos;,&apos;,&apos;) %&gt;)&quot;,</span><br><span class="line">        &lt;%</span><br><span class="line">        sbSql.Clear();</span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                sbSql.Append(col.Name+&quot; = model.&quot;+col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        new &#123; &lt;%=sbSql.ToString().Trim(&apos;,&apos;) %&gt; &#125;);</span><br><span class="line">                conn.Close();</span><br><span class="line">                return a &gt; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        public bool Update(M&lt;%= Table.Name%&gt; model)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var conn = DBCommon.GetConn())</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                var a = conn.Execute(@&quot;UPDATE &lt;%= Table.Name%&gt; SET</span><br><span class="line">        &lt;%</span><br><span class="line">        sbSql.Clear();</span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                sbSql.AppendLine(col.Name+&quot;=@&quot;+col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      %&gt;</span><br><span class="line"> &lt;%=sbSql.ToString().Trim(&apos;\r&apos;,&apos;\n&apos;,&apos;,&apos;) %&gt; </span><br><span class="line"> WHERE OID=@OID&quot;,</span><br><span class="line">        &lt;%</span><br><span class="line">        sbSql.Clear();</span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                sbSql.Append(col.Name+&quot; = model.&quot;+col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        new &#123; &lt;%=sbSql.ToString().Trim(&apos;,&apos;) %&gt;,OID = model.OID &#125;);</span><br><span class="line">                conn.Close();</span><br><span class="line">                return a &gt; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        public M&lt;%= Table.Name%&gt; GetModelByID(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var conn = DBCommon.GetConn())</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                var a = conn.Query&lt;M&lt;%= Table.Name%&gt;&gt;(@&quot;select * from &lt;%= Table.Name%&gt; where OID=@OID&quot;, new &#123; OID =id &#125;).FirstOrDefault();</span><br><span class="line">                conn.Close();</span><br><span class="line">                return a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        public Model.PageDataView&lt;M&lt;%= Table.Name%&gt;&gt; GetList(string companyName, int pageNum, int pageSize = 10)</span><br><span class="line">        &#123;</span><br><span class="line">            var criteria = new PageCriteria();</span><br><span class="line">            criteria.CurrentPage = pageNum;</span><br><span class="line">            criteria.Fields = &quot;a.*&quot;;</span><br><span class="line">            criteria.PageSize = pageSize;</span><br><span class="line">            criteria.PrimaryKey = &quot;a.OID&quot;;</span><br><span class="line">            criteria.TableName = @&quot;&lt;%= Table.Name%&gt; a&quot;;</span><br><span class="line">             </span><br><span class="line">            string sqlFilter = &quot;1=1&quot;;</span><br><span class="line">            if (!string.IsNullOrEmpty(companyName))</span><br><span class="line">                sqlFilter += string.Format(&quot; and b.CompanyName like &apos;%&#123;0&#125;%&apos;&quot;, companyName);</span><br><span class="line">            criteria.Condition += sqlFilter;</span><br><span class="line">             </span><br><span class="line">            var r = DBCommon.GetPageData&lt;M&lt;%= Table.Name%&gt;&gt;(criteria);</span><br><span class="line">  </span><br><span class="line">            return r;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CodeSmith模板&quot;&gt;&lt;a href=&quot;#CodeSmith模板&quot; class=&quot;headerlink&quot; title=&quot;CodeSmith模板&quot;&gt;&lt;/a&gt;CodeSmith模板&lt;/h1&gt;&lt;p&gt;访问量不大的项目我都是用EF写数据库操作，因为EF除了速度上慢以外，
      
    
    </summary>
    
      <category term="ORM" scheme="http://haimianbao1111.github.io/categories/ORM/"/>
    
    
      <category term="ORM" scheme="http://haimianbao1111.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>asp.net 用支付宝沙箱环境测试支付接口</title>
    <link href="http://haimianbao1111.github.io/2018/01/21/asp-net-%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E6%B5%8B%E8%AF%95%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3/"/>
    <id>http://haimianbao1111.github.io/2018/01/21/asp-net-用支付宝沙箱环境测试支付接口/</id>
    <published>2018-01-21T13:44:09.000Z</published>
    <updated>2018-01-23T09:47:02.651Z</updated>
    
    <content type="html"><![CDATA[<div class="note success"><p>沙箱环境的配置 </p></div><h1 id="1-注册成为开发人员"><a href="#1-注册成为开发人员" class="headerlink" title="1.注册成为开发人员"></a>1.注册成为开发人员</h1><div class="note info"><p>注册成功以后，点击以下链接，进入到支付宝官方的沙箱环境说明：<a href="https://docs.open.alipay.com/200/10531" target="_blank" rel="noopener">https://docs.open.alipay.com/200/10531</a> </p></div><p><img src="/images/alipay/支付宝.png" class="full-image">  </p><h1 id="2-沙箱介绍"><a href="#2-沙箱介绍" class="headerlink" title="2.沙箱介绍"></a>2.沙箱介绍</h1><div class="note info"><p>然后点击上图中的沙箱环境，跳转到自己的沙箱环境，配置自己的沙箱环境 。 </p></div><img src="/images/alipay/沙箱应用.png" class="full-image">  # 3.秘钥生成  <div class="note info"><p>  至于公钥秘钥的生成，点击 <a href="https://docs.open.alipay.com/291/105971" target="_blank" rel="noopener">https://docs.open.alipay.com/291/105971</a> 下载生成RSA密钥的工具，操作视频可以搜索该链接：<a href="https://openclub.alipay.com/index.php?c=video&amp;fid=76" target="_blank" rel="noopener">https://openclub.alipay.com/index.php?c=video&amp;fid=76</a> 查看生成秘钥的具体操作步骤。<br>重点是秘钥长度一定要是2048，一定要是2048.当时我测试的时候，生成的1024的，验签通过，但是一上传就提示失败。可见再牛逼的网站也是有bug的. </p></div><h1 id="4-下载支付宝支付demo"><a href="#4-下载支付宝支付demo" class="headerlink" title="4.下载支付宝支付demo"></a>4.下载支付宝支付demo</h1><div class="note info"><p>  打开demo，把配置里面的配置改成自己沙箱账号的配置。<br>支付宝支付demo下载的链接：<a href="https://docs.open.alipay.com/54/106682/" target="_blank" rel="noopener">https://docs.open.alipay.com/54/106682/</a><br>把配置文件里面的配置改成沙箱 </p></div><p><img src="/images/alipay/代码网关设置.png" class="full-image">  </p><h1 id="5-下载沙箱钱包"><a href="#5-下载沙箱钱包" class="headerlink" title="5.下载沙箱钱包"></a>5.下载沙箱钱包</h1><div class="note info"><p>进行支付测试，注意不是支付宝哦，详细查看文说明档。，目前沙箱钱包仅提供Android版本，可点击 <a href="https://sandbox.alipaydev.com/user/downloadApp.htm" class="font-color:red" target="_blank" rel="noopener">下载</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div class=&quot;note success&quot;&gt;&lt;p&gt;沙箱环境的配置 &lt;/p&gt;&lt;/div&gt;
&lt;h1 id=&quot;1-注册成为开发人员&quot;&gt;&lt;a href=&quot;#1-注册成为开发人员&quot; class=&quot;headerlink&quot; title=&quot;1.注册成为开发人员&quot;&gt;&lt;/a&gt;1.注册成为开发
      
    
    </summary>
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/categories/Asp-Net/"/>
    
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>前端静态文件如何应对HTTPS的到来</title>
    <link href="http://haimianbao1111.github.io/2018/01/18/%E5%89%8D%E7%AB%AF%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9HTTPS%E7%9A%84%E5%88%B0%E6%9D%A5/"/>
    <id>http://haimianbao1111.github.io/2018/01/18/前端静态文件如何应对HTTPS的到来/</id>
    <published>2018-01-17T17:26:30.000Z</published>
    <updated>2018-01-18T14:33:04.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h1><div class="note class_name"><p><a href="https://www.cnblogs.com/webARM/p/5728695.html" target="_blank" rel="noopener">https://www.cnblogs.com/webARM/p/5728695.html</a></p></div><p><div id="container"></div></p><p><link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"></p><script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script><script>var gitment = new Gitment({    owner: 'haimianbao1111',    repo: '2018/01/18/前端静态文件如何应对HTTPS的到来',    oauth: {      client_id: '24f4cb2732b2cd293c3c',      client_secret: '54ad1cb8fc1bbab13871b8b9dd01004340aceca0',    },  })gitment.render('container')</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原文链接：&quot;&gt;&lt;a href=&quot;#原文链接：&quot; class=&quot;headerlink&quot; title=&quot;原文链接：&quot;&gt;&lt;/a&gt;原文链接：&lt;/h1&gt;&lt;div class=&quot;note class_name&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.
      
    
    </summary>
    
      <category term="前端" scheme="http://haimianbao1111.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="tags" scheme="http://haimianbao1111.github.io/tags/tags/"/>
    
  </entry>
  
  <entry>
    <title>搭建评论系统</title>
    <link href="http://haimianbao1111.github.io/2018/01/18/%E6%90%AD%E5%BB%BA%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>http://haimianbao1111.github.io/2018/01/18/搭建评论系统/</id>
    <published>2018-01-17T16:20:07.000Z</published>
    <updated>2018-01-22T15:04:26.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h1><h2 id="1-注册-OAuth-Application"><a href="#1-注册-OAuth-Application" class="headerlink" title="1. 注册 OAuth Application"></a>1. 注册 OAuth Application</h2><p>点击此处 来注册一个新的 OAuth Application。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，如 <a href="https://imsun.net" target="_blank" rel="noopener">https://imsun.net</a>  ）。</p><p>你会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录。</p><h2 id="2-引入-Gitment"><a href="#2-引入-Gitment" class="headerlink" title="2. 引入 Gitment"></a>2. 引入 Gitment</h2><p>将下面的代码添加到你的页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var gitment = new Gitment(&#123;</span><br><span class="line">  id: &apos;页面 ID&apos;, // 可选。默认为 location.href</span><br><span class="line">  owner: &apos;你的 GitHub ID&apos;,</span><br><span class="line">  repo: &apos;存储评论的 repo&apos;,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: &apos;你的 client ID&apos;,</span><br><span class="line">    client_secret: &apos;你的 client secret&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(&apos;container&apos;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>注意，上述代码引用的 Gitment 将会随着开发变动。如果你希望始终使用最新的界面与特性即可引入上述代码。</p><p>如果你希望引用确定版本的 Gitment，则应该使用 npm 进行安装。<br><div class="note class_name"><p>$ npm install –save gitment</p></div></p><h2 id="3-初始化评论"><a href="#3-初始化评论" class="headerlink" title="3. 初始化评论"></a>3. 初始化评论</h2><p>页面发布后，你需要访问页面并使用你的 GitHub 账号登录（请确保你的账号是第二步所填 repo 的 owner），点击初始化按钮。</p><p>之后其他用户即可在该页面发表评论。</p><h1 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h1><p>Gitment 很容易进行自定义，你可以写一份自定义的 CSS 或者使用一个新的主题。（主题可以改变 DOM 结构而自定义 CSS 不能）</p><p>比如你可以通过自定义主题将评论框放在评论列表前面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const myTheme = &#123;</span><br><span class="line">  render(state, instance) &#123;</span><br><span class="line">    const container = document.createElement(&apos;div&apos;)</span><br><span class="line">    container.lang = &quot;en-US&quot;</span><br><span class="line">    container.className = &apos;gitment-container gitment-root-container&apos;</span><br><span class="line">    container.appendChild(instance.renderHeader(state, instance))</span><br><span class="line">    container.appendChild(instance.renderEditor(state, instance))</span><br><span class="line">    container.appendChild(instance.renderComments(state, instance))</span><br><span class="line">    container.appendChild(instance.renderFooter(state, instance))</span><br><span class="line">    return container</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">const gitment = new Gitment(&#123;</span><br><span class="line">  // ...</span><br><span class="line">  theme: myTheme,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(&apos;container&apos;)</span><br></pre></td></tr></table></figure></p><h1 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h1><div class="note class_name"><p><a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">https://imsun.net/posts/gitment-introduction/</a></p></div><p><div id="container"></div></p><p><link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"></p><script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script><script>var gitment = new Gitment({    owner: 'haimianbao1111',    repo: '2018/01/18/搭建评论系统',    oauth: {      client_id: '24f4cb2732b2cd293c3c',      client_secret: '54ad1cb8fc1bbab13871b8b9dd01004340aceca0',    },  })gitment.render('container')</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础使用&quot;&gt;&lt;a href=&quot;#基础使用&quot; class=&quot;headerlink&quot; title=&quot;基础使用&quot;&gt;&lt;/a&gt;基础使用&lt;/h1&gt;&lt;h2 id=&quot;1-注册-OAuth-Application&quot;&gt;&lt;a href=&quot;#1-注册-OAuth-Application&quot;
      
    
    </summary>
    
      <category term="GitHub Issues" scheme="http://haimianbao1111.github.io/categories/GitHub-Issues/"/>
    
    
      <category term="tags" scheme="http://haimianbao1111.github.io/tags/tags/"/>
    
  </entry>
  
  <entry>
    <title>Gitlab之Gitlab-CI体验</title>
    <link href="http://haimianbao1111.github.io/2018/01/17/%E5%8D%9A%E5%AE%A2%E8%AF%A6%E6%9E%84/"/>
    <id>http://haimianbao1111.github.io/2018/01/17/博客详构/</id>
    <published>2018-01-16T16:24:41.000Z</published>
    <updated>2018-01-18T14:32:40.707Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gitlab-CI"><a href="#Gitlab-CI" class="headerlink" title="Gitlab-CI"></a>Gitlab-CI</h1><p>持续集成(CI)：通常使用CI来做一些自动化工作，比如程序的打包，单元测试，部署等，这种构建方式避免了打包环境差异引起的错误，提高了工作效率。<br>GitLab-CI是GitLab官方提供的持续集成服务，我们可以在仓库的根目录下新建.gitlab-ci.yml文件，自己定义持续集成流程模板，并且在GitLab中配置runner，在之后的每次提交合并中将会触发构建，并且可以通过GitLab的hook, 在代码提交的各个环节自动地完成一系列的构建工作，总之对于一些非复杂性的集成需求，都是可以满足的。<br><!-- 阅读全文 --><br>链接 <a href="http://www.mdslq.cn/" target="_blank" rel="noopener">http://www.mdslq.cn/</a></p><p><div id="container"></div></p><p><link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"></p><script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script><script>var gitment = new Gitment({    owner: 'haimianbao1111',    repo: '2018/01/17/博客详构',    oauth: {      client_id: '24f4cb2732b2cd293c3c',      client_secret: '54ad1cb8fc1bbab13871b8b9dd01004340aceca0',    },  })gitment.render('container')</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Gitlab-CI&quot;&gt;&lt;a href=&quot;#Gitlab-CI&quot; class=&quot;headerlink&quot; title=&quot;Gitlab-CI&quot;&gt;&lt;/a&gt;Gitlab-CI&lt;/h1&gt;&lt;p&gt;持续集成(CI)：通常使用CI来做一些自动化工作，比如程序的打包，单元测试，部署等，
      
    
    </summary>
    
      <category term="博客详构" scheme="http://haimianbao1111.github.io/categories/%E5%8D%9A%E5%AE%A2%E8%AF%A6%E6%9E%84/"/>
    
    
      <category term="tags" scheme="http://haimianbao1111.github.io/tags/tags/"/>
    
  </entry>
  
  <entry>
    <title>初探-Hexo</title>
    <link href="http://haimianbao1111.github.io/2018/01/16/%E5%88%9D%E6%8E%A2-Hexo/"/>
    <id>http://haimianbao1111.github.io/2018/01/16/初探-Hexo/</id>
    <published>2018-01-16T14:52:08.000Z</published>
    <updated>2018-01-18T14:32:47.802Z</updated>
    
    <content type="html"><![CDATA[<p>什么都没有啊…<br>…<br>…<br>…<br>…<br>…<br>…</p><p><div id="container"></div></p><p><link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"></p><script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script><script>var gitment = new Gitment({    owner: 'haimianbao1111',    repo: '2018/01/16/初探-Hexo',    oauth: {      client_id: '24f4cb2732b2cd293c3c',      client_secret: '54ad1cb8fc1bbab13871b8b9dd01004340aceca0',    },  })gitment.render('container')</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;什么都没有啊…&lt;br&gt;…&lt;br&gt;…&lt;br&gt;…&lt;br&gt;…&lt;br&gt;…&lt;br&gt;…&lt;/p&gt;
&lt;p&gt;&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitme
      
    
    </summary>
    
      <category term="初探-Hexo" scheme="http://haimianbao1111.github.io/categories/%E5%88%9D%E6%8E%A2-Hexo/"/>
    
    
      <category term="tags" scheme="http://haimianbao1111.github.io/tags/tags/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 高级配置</title>
    <link href="http://haimianbao1111.github.io/2018/01/16/Hexo-%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/"/>
    <id>http://haimianbao1111.github.io/2018/01/16/Hexo-高级配置/</id>
    <published>2018-01-16T14:38:07.000Z</published>
    <updated>2018-01-18T14:32:32.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Site-网站"><a href="#Site-网站" class="headerlink" title="Site 网站"></a>Site 网站</h1><p>title: 为学   网站标题<br>subtitle: 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。   #网站副标题<br>description: 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。   #网站描述<br>author: willxue   #您的名字<br>language: zh-CN   #网站使用的语言<br>timezone:           #网站时区。Hexo 默认使用您电脑的时区<br><!-- 阅读全文 --></p><h1 id="URL-网址"><a href="#URL-网址" class="headerlink" title="URL 网址"></a>URL 网址</h1><p>url: <a href="http://willxue.top" target="_blank" rel="noopener">http://willxue.top</a><br>permalink: :year/:month/:day/:title/    #生成文件名字的格式我改成blog/:title:year:month:day/<br>permalink_defaults:</p><h1 id="Directory-目录配置"><a href="#Directory-目录配置" class="headerlink" title="Directory 目录配置"></a>Directory 目录配置</h1><p>source_dir: source   #源文件夹，这个文件夹用来存放内容。<br>public_dir: public   #公共文件夹，这个文件夹用于存放生成的站点文件。<br>tag_dir: tags   #标签文件夹<br>archive_dir: archives   #归档文件夹<br>category_dir: categories   #分类文件夹<br>code_dir: downloads/code    #nclude code 文件夹<br>i18n_dir: :lang   #国际化（i18n）文件夹<br>skip_render:   #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</p><h1 id="Writing-文章"><a href="#Writing-文章" class="headerlink" title="Writing 文章"></a>Writing 文章</h1><p>new_post_name: :title.md   # 新建文章默认文件名<br>default_layout: post   # 默认布局<br>titlecase: false   # Transform title into titlecase<br>external_link: true   # 在新标签中打开一个外部链接，默认为true<br>filename_case: 0   #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。<br>render_drafts: false   #是否渲染_drafts目录下的文章，默认为false<br>post_asset_folder: false   #启动 Asset 文件夹<br>relative_link: false   #把链接改为与根目录的相对位址，默认false<br>future: true   #显示未来的文章，默认false<br>highlight:   #代码块的设置<br>  enable: true<br>  line_number: true<br>  auto_detect: false<br>  tab_replace:</p><p><div id="container"></div></p><p><link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"></p><script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script><script>var gitment = new Gitment({    owner: 'haimianbao1111',    repo: '2018/01/16/Hexo-高级配置',    oauth: {      client_id: '24f4cb2732b2cd293c3c',      client_secret: '54ad1cb8fc1bbab13871b8b9dd01004340aceca0',    },  })gitment.render('container')</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Site-网站&quot;&gt;&lt;a href=&quot;#Site-网站&quot; class=&quot;headerlink&quot; title=&quot;Site 网站&quot;&gt;&lt;/a&gt;Site 网站&lt;/h1&gt;&lt;p&gt;title: 为学   网站标题&lt;br&gt;subtitle: 天下事有难易乎？为之，则难者亦易矣；不为
      
    
    </summary>
    
      <category term="Hexo 高级配置" scheme="http://haimianbao1111.github.io/categories/Hexo-%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="tags" scheme="http://haimianbao1111.github.io/tags/tags/"/>
    
  </entry>
  
</feed>
