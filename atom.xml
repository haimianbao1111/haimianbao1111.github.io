<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HJY</title>
  
  <subtitle>一枚90后程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haimianbao1111.github.io/"/>
  <updated>2018-03-10T17:49:18.546Z</updated>
  <id>http://haimianbao1111.github.io/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linq 专题</title>
    <link href="http://haimianbao1111.github.io/2018/03/11/Linq-%E4%B8%93%E9%A2%98/"/>
    <id>http://haimianbao1111.github.io/2018/03/11/Linq-专题/</id>
    <published>2018-03-10T17:45:13.000Z</published>
    <updated>2018-03-10T17:49:18.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>LINQ是Language Integrated Query的简称，它是集成在.NET编程语言中的一种特性。已成为编程语言的一个组成部分，在编写程序时可以得到很好的编译时语法检查，丰富的元数据，智能感知、静态类型等强类型语言的好处。并且它同时还使得查询可以方便地对内存中的信息进行查询而不仅仅只是外部数据源。<br>LINQ包括五个部分：LINQ to Objects、LINQ to DataSets、LINQ to SQL、LINQ to Entities、LINQ to XML。</p></blockquote><p>LINQ to SQL全称基于关系数据的.NET语言集成查询，用于以对象形式管理关系数据，并提供了丰富的查询功能。其建立于公共语言类型系统中的基于SQL的模式定义的集成之上，当保持关系型模型表达能力和对底层存储的直接查询评测的性能时，这个集成在关系型数据之上提供强类型。Linq to XML在System.Xml.LINQ命名空间下实现对XML的操作。采用高效、易用、内存中的XML工具在宿主编程语言中提供XPath/XQuery功能等。</p><div class="note success"><p>参考地址：<a href="https://kb.cnblogs.com/zt/linq/" target="_blank" rel="noopener">https://kb.cnblogs.com/zt/linq/</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;LINQ是Language Integrated Query的简称，它是集成在.NET编程语言中的一种特性。已成为
      
    
    </summary>
    
      <category term="C#" scheme="http://haimianbao1111.github.io/categories/C/"/>
    
    
      <category term="C#,Linq,Asp.Net Mvc" scheme="http://haimianbao1111.github.io/tags/C-Linq-Asp-Net-Mvc/"/>
    
  </entry>
  
  <entry>
    <title>WCF、WebAPI、WCFREST、WebService之间的区别</title>
    <link href="http://haimianbao1111.github.io/2018/03/11/WCF%E3%80%81WebAPI%E3%80%81WCFREST%E3%80%81WebService%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://haimianbao1111.github.io/2018/03/11/WCF、WebAPI、WCFREST、WebService之间的区别/</id>
    <published>2018-03-10T17:38:06.000Z</published>
    <updated>2018-03-10T17:44:11.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在.net平台下，有大量的技术让你创建一个HTTP服务，像Web Service，WCF，现在又出了WebAPI。<br>在.net平台下，你有很多的选择来构建一个HTTP Services。我分享一下我对Web Service、WCF以及Web API的看法。</p><h2 id="Web-Service"><a href="#Web-Service" class="headerlink" title="Web Service"></a>Web Service</h2><p>1、它是基于SOAP协议的，数据格式是XML<br>2、只支持HTTP协议<br>3、它不是开源的，但可以被任意一个了解XML的人使用<br>4、它只能部署在IIS上</p><h2 id="WCF"><a href="#WCF" class="headerlink" title="WCF"></a>WCF</h2><p>1、这个也是基于SOAP的，数据格式是XML<br>2、这个是Web Service（ASMX）的进化版，可以支持各种各样的协议，像TCP，HTTP，HTTPS，Named Pipes, MSMQ.<br>3、WCF的主要问题是，它配置起来特别的繁琐<br>4、它不是开源的，但可以被任意一个了解XML的人使用<br>5、它可以部署应用程序中或者IIS上或者Windows服务中</p><h2 id="WCF-Rest"><a href="#WCF-Rest" class="headerlink" title="WCF Rest"></a>WCF Rest</h2><p>1、想使用WCF Rest service，你必须在WCF中使用webHttpBindings<br>2、它分别用[WebGet]和[WebInvoke]属性，实现了HTTP的GET和POST动词<br>3、要想使用其他的HTTP动词，你需要在IIS中做一些配置，使.svc文件可以接受这些动词的请求<br>4、使用WebGet通过参数传输数据，也需要配置。而且必须指定UriTemplate<br>5、它支持XML、JSON以及ATOM这些数据格式</p><h2 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h2><p>1、这是一个简单的构建HTTP服务的新框架<br>2、在.net平台上Web API 是一个开源的、理想的、构建REST-ful 服务的技术<br>3、不像WCF REST Service.它可以使用HTTP的全部特点（比如URIs、request/response头，缓存，版本控制，多种内容格式）<br>4、它也支持MVC的特征，像路由、控制器、action、filter、模型绑定、控制反转（IOC）或依赖注入（DI），单元测试。这些可以使程序更简单、更健壮<br>5、它可以部署在应用程序和IIS上<br>6、这是一个轻量级的框架，并且对限制带宽的设备，比如智能手机等支持的很好<br>7、Response可以被Web API的MediaTypeFormatter转换成Json、XML 或者任何你想转换的格式。</p><h1 id="WCF和WEB-API我该选择哪个？"><a href="#WCF和WEB-API我该选择哪个？" class="headerlink" title="WCF和WEB API我该选择哪个？"></a>WCF和WEB API我该选择哪个？</h1><p>1、当你想创建一个支持消息、消息队列、双工通信的服务时，你应该选择WCF<br>2、当你想创建一个服务，可以用更快速的传输通道时，像TCP、Named Pipes或者甚至是UDP（在WCF4.5中）,在其他传输通道不可用的时候也可以支持HTTP。<br>3、当你想创建一个基于HTTP的面向资源的服务并且可以使用HTTP的全部特征时（比如URIs、request/response头，缓存，版本控制，多种内容格式），你应该选择Web API<br>4、当你想让你的服务用于浏览器、手机、iPhone和平板电脑时，你应该选择Web API</p><blockquote><p>所有问题都会有一定程度的抽象和假设.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;在.net平台下，有大量的技术让你创建一个HTTP服务，像Web Service，WCF，现在又出了WebAPI。&lt;br&gt;在.net平台下，
      
    
    </summary>
    
      <category term="C#" scheme="http://haimianbao1111.github.io/categories/C/"/>
    
    
      <category term="Asp.Net Mvc,C#" scheme="http://haimianbao1111.github.io/tags/Asp-Net-Mvc-C/"/>
    
  </entry>
  
  <entry>
    <title>初识Vue</title>
    <link href="http://haimianbao1111.github.io/2018/03/11/%E5%88%9D%E8%AF%86Vue/"/>
    <id>http://haimianbao1111.github.io/2018/03/11/初识Vue/</id>
    <published>2018-03-10T16:40:38.000Z</published>
    <updated>2018-03-10T17:30:23.506Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="1-node-js下载，然后安装。下载地址："><a href="#1-node-js下载，然后安装。下载地址：" class="headerlink" title="1.node.js下载，然后安装。下载地址："></a>1.node.js下载，然后安装。下载地址：</h2><p><a href="https://nodejs.org/en/download/" target="_blank" rel="noopener">https://nodejs.org/en/download/</a></p><h2 id="2-运行cmd，npm命令安装vue，"><a href="#2-运行cmd，npm命令安装vue，" class="headerlink" title="2.运行cmd，npm命令安装vue，"></a>2.运行cmd，npm命令安装vue，</h2><p>npm install vue</p><h2 id="3-安装cnpm"><a href="#3-安装cnpm" class="headerlink" title="3.安装cnpm"></a>3.安装cnpm</h2><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p><h2 id="4-全局安装-vue-cli"><a href="#4-全局安装-vue-cli" class="headerlink" title="4.全局安装 vue-cli"></a>4.全局安装 vue-cli</h2><p>cnpm install –global vue-cli</p><h2 id="5-创建一个基于-webpack-模板的新项目"><a href="#5-创建一个基于-webpack-模板的新项目" class="headerlink" title="5.创建一个基于 webpack 模板的新项目"></a>5.创建一个基于 webpack 模板的新项目</h2><p>vue init webpack mydemo</p><h2 id="6-这里需要进行一些配置，默认回车即可"><a href="#6-这里需要进行一些配置，默认回车即可" class="headerlink" title="6.这里需要进行一些配置，默认回车即可"></a>6.这里需要进行一些配置，默认回车即可</h2><p><img src="/images/vue/vue1.png" class="full-image"></p><h2 id="7-进入项目，安装并运行："><a href="#7-进入项目，安装并运行：" class="headerlink" title="7.进入项目，安装并运行："></a>7.进入项目，安装并运行：</h2><p>cd my-project<br>cnpm install<br>cnpm run dev<br>执行效果：<br><img src="/images/vue/vue2.png" class="full-image"><br>运行效果：<br>重新打开页面 <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a><br><img src="/images/vue/vue3.png" class="full-image"></p><h2 id="8-Vue-js目录说明"><a href="#8-Vue-js目录说明" class="headerlink" title="8.Vue.js目录说明"></a>8.Vue.js目录说明</h2><p>目录解析<br>目录/文件    说明<br>build    最终发布的代码存放位置。<br>config    配置目录，包括端口号等。我们初学可以使用默认的。<br>node_modules    npm 加载的项目依赖模块<br>src<br>这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：<br>assets: 放置一些图片，如logo等。<br>components: 目录里面放了一个组件文件，可以不用。<br>App.vue: 项目入口文件，我们也可以直接将组件写这里，而不使用 components 目录。<br>main.js: 项目的核心文件。<br>static    静态资源目录，如图片、字体等。<br>test    初始测试目录，可删除<br>.xxxx文件    这些是一些配置文件，包括语法配置，git配置等。<br>index.html    首页入口文件，你可以添加一些 meta 信息或同统计代码啥的。<br>package.json    项目配置文件。<br>README.md    项目的说明文档，markdown 格式<br><img src="/images/vue/vue5.png" class="full-image"></p><h2 id="9-编辑器"><a href="#9-编辑器" class="headerlink" title="9.编辑器"></a>9.编辑器</h2><p>VsCode<br>其他…</p><h1 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h1><h2 id="node版本问题："><a href="#node版本问题：" class="headerlink" title="node版本问题："></a>node版本问题：</h2><p><img src="/images/vue/vue4.png" class="full-image"></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>从nodejs官网下载最新的msi版本，一路next，安装最新版的node更新环境，cmd重新打开运行即可。<br><div class="note success"><p>Vue.js ：<a href="https://cn.vuejs.org/v2/guide/installation.html#Vue-Devtools" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/installation.html#Vue-Devtools</a></p></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;1-node-js下载，然后安装。下载地址：&quot;&gt;&lt;a href=&quot;#1-node-js下载，然后安装。下载地址：&quot; class=&quot;
      
    
    </summary>
    
      <category term="前端" scheme="http://haimianbao1111.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://haimianbao1111.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Metrics.net + influxdb + grafana 构建WebAPI的自动化监控和预警</title>
    <link href="http://haimianbao1111.github.io/2018/03/10/Metrics-net-influxdb-grafana-%E6%9E%84%E5%BB%BAWebAPI%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E7%9B%91%E6%8E%A7%E5%92%8C%E9%A2%84%E8%AD%A6/"/>
    <id>http://haimianbao1111.github.io/2018/03/10/Metrics-net-influxdb-grafana-构建WebAPI的自动化监控和预警/</id>
    <published>2018-03-10T15:49:24.000Z</published>
    <updated>2018-03-10T15:51:32.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>组件说明以及API说明：<br><div class="note success"><p>参考地址： <a href="https://www.cnblogs.com/LoveOfPrince/p/8538621.html" target="_blank" rel="noopener">https://www.cnblogs.com/LoveOfPrince/p/8538621.html</a></p></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;组件说明以及API说明：&lt;br&gt;&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;参考地址： &lt;a href=&quot;https://ww
      
    
    </summary>
    
      <category term="Asp.net Mvc" scheme="http://haimianbao1111.github.io/categories/Asp-net-Mvc/"/>
    
    
      <category term="Asp.net Mvc,WebApi" scheme="http://haimianbao1111.github.io/tags/Asp-net-Mvc-WebApi/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET MVC从视图传递多个模型到Controller</title>
    <link href="http://haimianbao1111.github.io/2018/03/10/ASP-NET-MVC%E4%BB%8E%E8%A7%86%E5%9B%BE%E4%BC%A0%E9%80%92%E5%A4%9A%E4%B8%AA%E6%A8%A1%E5%9E%8B%E5%88%B0Controller/"/>
    <id>http://haimianbao1111.github.io/2018/03/10/ASP-NET-MVC从视图传递多个模型到Controller/</id>
    <published>2018-03-10T06:46:53.000Z</published>
    <updated>2018-03-10T15:51:15.310Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>组件说明以及API说明：<br><div class="note success"><p>参考地址： <a href="http://blog.csdn.net/baogreat/article/details/45825413" target="_blank" rel="noopener">http://blog.csdn.net/baogreat/article/details/45825413</a></p></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;组件说明以及API说明：&lt;br&gt;&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;参考地址： &lt;a href=&quot;http://blo
      
    
    </summary>
    
      <category term="Asp.net Mvc" scheme="http://haimianbao1111.github.io/categories/Asp-net-Mvc/"/>
    
    
      <category term="Asp.net Mvc" scheme="http://haimianbao1111.github.io/tags/Asp-net-Mvc/"/>
    
  </entry>
  
  <entry>
    <title>jQuery之属性过滤选择器</title>
    <link href="http://haimianbao1111.github.io/2018/03/10/jQuery%E4%B9%8B%E5%B1%9E%E6%80%A7%E8%BF%87%E6%BB%A4%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://haimianbao1111.github.io/2018/03/10/jQuery之属性过滤选择器/</id>
    <published>2018-03-10T03:49:45.000Z</published>
    <updated>2018-03-10T04:26:15.876Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>在HTML文档中，元素的开始标记中通常包含有多个属性(attribute), 在jQuery中，除了直接使用id和class属性作为选择器之外，还可以根据各种属性（如title等）对由选择器查询到的元素进行过滤；<br>属性过滤选择器包含了在中括号”[]”中，而不是以冒号开头，通常使用”选择器[属性过滤选择器]”语法格式，<br>可以根据是否包含指定属性或者根据属性值从查询到的元素中进行筛选。</p><h2 id="1-包含属性过滤器"><a href="#1-包含属性过滤器" class="headerlink" title="1:包含属性过滤器"></a>1:包含属性过滤器</h2><p>用于选择包含给定属性的所有元素<br>格式:$(“selector[attribute]”)</p><h2 id="2-属性等于过滤器"><a href="#2-属性等于过滤器" class="headerlink" title="2:属性等于过滤器"></a>2:属性等于过滤器</h2><p>用于筛选给定属性等于某特定值的所有元素<br>$(“selector[attribute=value]”);<br>例子：$(“input[name=accept]”).attr(“checked”, “true”);  //将name为accept的复选框选中</p><h2 id="3：属性包含过滤器"><a href="#3：属性包含过滤器" class="headerlink" title="3：属性包含过滤器"></a>3：属性包含过滤器</h2><p>用于选择指定属性值包含给定字符串的所有元素<br>格式:$(“selector[attribute<em>=value]”);<br>例子:$(“input[name</em>=’news’]”).val(“name中包含有news的元素”);  //将name中包含’news’的文本框添加文本值</p><h2 id="4：属性包含单词过滤器"><a href="#4：属性包含单词过滤器" class="headerlink" title="4：属性包含单词过滤器"></a>4：属性包含单词过滤器</h2><p>用于选择指定属性值中包含给定单词(由空格分隔)的元素<br>格式:$(“selector[attribute~=value]”);<br>例子:$(‘input[name~=’news’]’).val(“name中包含news单词的元素”);</p><h2 id="5：属性不等于过滤器"><a href="#5：属性不等于过滤器" class="headerlink" title="5：属性不等于过滤器"></a>5：属性不等于过滤器</h2><p>用于选择不包含指定属性，或者包含指定属性但该属性不等于某个值的所有元素<br>格式:$(“selector[attribute!=value]”)</p><h2 id="6：属性开始过滤器"><a href="#6：属性开始过滤器" class="headerlink" title="6：属性开始过滤器"></a>6：属性开始过滤器</h2><p>用于选择给定属性是以某特定值开始的所有元素<br>格式:$(“selector[attribute^=value]”)   </p><h2 id="7：属性结尾过滤器"><a href="#7：属性结尾过滤器" class="headerlink" title="7：属性结尾过滤器"></a>7：属性结尾过滤器</h2><p>用于选择给定属性是以某特定值结尾的所有元素<br>格式:$(“selector[attribute$=value]”) </p><h2 id="8：复合属性过滤器"><a href="#8：复合属性过滤器" class="headerlink" title="8：复合属性过滤器"></a>8：复合属性过滤器</h2><p>用于选择同时满足多个条件的所有元素<br>格式:$(“selector[selector1][selector2]…[selector[N]”)<br>实例：$(“input[id][name^=’news’]”).val(“复合条件”)：用于选择包含有id属性并且name值以’news’开头的文本框，并对其值进行设置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;在HTML文档中，元素的开始标记中通常包含有多个属性(attribute), 在jQuery中，除了直接使用id和class属性作为选择器之
      
    
    </summary>
    
      <category term="前端" scheme="http://haimianbao1111.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端,Jquery" scheme="http://haimianbao1111.github.io/tags/%E5%89%8D%E7%AB%AF-Jquery/"/>
    
  </entry>
  
  <entry>
    <title>Ps快捷键</title>
    <link href="http://haimianbao1111.github.io/2018/03/10/Ps%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://haimianbao1111.github.io/2018/03/10/Ps快捷键/</id>
    <published>2018-03-10T03:35:09.000Z</published>
    <updated>2018-03-10T03:36:32.877Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>PHOTOSHOP常用快捷键大全</p><h2 id="一、文件"><a href="#一、文件" class="headerlink" title="一、文件"></a>一、文件</h2><p>新建 CTRL+N<br>打开 CTRL+O </p><p>打开为 ALT+CTRL+O<br>关闭 CTRL+W<br>保存 CTRL+S<br>另存为 CTRL+SHIFT+S<br>另存为网页格式 CTRL+ALT+S<br>打印设置 CTRL+ALT+P<br>页面设置 CTRL+SHIFT+P<br>打印 CTRL+P<br>退出 CTRL+Q</p><h2 id="二、编辑"><a href="#二、编辑" class="headerlink" title="二、编辑"></a>二、编辑</h2><p>撤消 CTRL+Z<br>向前一步 CTRL+SHIFT+Z<br>向后一步 CTRL+ALT+Z<br>退取 CTRL+SHIFT+F<br>剪切 CTRL+X<br>复制 CTRL+C<br>合并复制 CTRL+SHIFT+C<br>粘贴 CTRL+V<br>原位粘贴 CTRL+SHIFT+V<br>自由变换 CTRL+T<br>再次变换 CTRL+SHIFT+T<br>色彩设置 CTRL+SHIFT+K</p><h2 id="三、图象"><a href="#三、图象" class="headerlink" title="三、图象"></a>三、图象</h2><p>调整→色阶 CTRL+L<br>调整→自动色阶 CTRL+SHIFT+L<br>调整→自动对比度 CTRL+SHIFT+ALT+L<br>调整→曲线 CTRL+M<br>调整→色彩平衡 CTRL+B<br>调整→色相/饱和度CTRL+U<br>调整→去色 CTRL+SHIFT+U<br>调整→反向 CTRL+I<br>提取 CTRL+ALT+X<br>液化 CTRL+SHIFT+X</p><h2 id="四、图层"><a href="#四、图层" class="headerlink" title="四、图层"></a>四、图层</h2><p>新建图层 CTRL+SHIFT+N<br>新建通过复制的图层 CTRL+J<br>与前一图层编组 CTRL+G<br>取消编组 CTRL+SHIFT+G<br>合并图层 CTRL+E<br>合并可见图层 CTRL+SHIFT+E</p><h2 id="五、选择"><a href="#五、选择" class="headerlink" title="五、选择"></a>五、选择</h2><p>全选 CTRL+A<br>取消选择 CTRL+D<br>全部选择 CTRL+SHIFT+D<br>反选 CTRL+SHIFT+I<br>羽化 CTRL+ALT+D</p><h2 id="六、滤镜"><a href="#六、滤镜" class="headerlink" title="六、滤镜"></a>六、滤镜</h2><p>上次滤镜操作 CTRL+F</p><h2 id="七、视图"><a href="#七、视图" class="headerlink" title="七、视图"></a>七、视图</h2><p>校验颜色 CTRL+Y<br>色域警告 CTRL+SHIFT+Y<br>放大 CTRL++<br>缩小 CTRL+-<br>满画布显示 CTRL+0<br>实际像素 CTRL+ALT+0<br>显示附加 CTRL+H<br>显示网格 CTRL+ALT+’<br>显示标尺 CTRL+R<br>启用对齐 CTRL+；<br>琐定参考线 CTRL+ALT+；</p><h2 id="八、窗口"><a href="#八、窗口" class="headerlink" title="八、窗口"></a>八、窗口</h2><p>关闭全部 CTRL+SHIFT+W</p><h2 id="九、帮助"><a href="#九、帮助" class="headerlink" title="九、帮助"></a>九、帮助</h2><p>目录 F1<br>矩形、椭圆选框工具 【M】<br>裁剪工具 【C】<br>移动工具 【V】<br>套索、多边形套索、磁性套索 【L】<br>魔棒工具 【W】<br>喷枪工具 【J】<br>画笔工具 【B】<br>像皮图章、图案图章 【S】<br>历史记录画笔工具 【Y】<br>像皮擦工具 【E】<br>铅笔、直线工具 【N】<br>模糊、锐化、涂抹工具 【R】<br>减淡、加深、海棉工具 【O】<br>钢笔、自由钢笔、磁性钢笔 【P】<br>添加锚点工具 【+】<br>删除锚点工具 【-】<br>直接选取工具 【A】<br>文字、文字蒙板、直排文字、直排文字蒙板 【T】<br>度量工具 【U】<br>直线渐变、径向渐变、对称渐变、角度渐变、菱形渐变 【G】<br>油漆桶工具 【K】<br>吸管、颜色取样器 【I】<br>抓手工具 【H】<br>缩放工具 【Z】<br>默认前景色和背景色 【D】<br>切换前景色和背景色 【X】<br>切换标准模式和快速蒙板模式 【Q】<br>标准屏幕模式、带有菜单栏的全屏模式、全屏模式 【F】<br>临时使用移动工具 【Ctrl】<br>临时使用吸色工具 【Alt】<br>临时使用抓手工具 【空格】<br>打开工具选项面板 【Enter】<br>快速输入工具选项(当前工具选项面板中至少有一个可调节数字): 【0】至【9】<br>循环选择画笔 【[】或【]】<br>选择第一个画笔 【Shift】+【[】<br>选择最后一个画笔 【Shift】+【]】<br>建立新渐变(在”渐变编辑器”中) 【Ctrl】+【N】<br>文件操作<br>新建图形文件 【Ctrl】+【N】<br>用默认设置创建新文件 【Ctrl】+【Alt】+【N】<br>打开已有的图像 【Ctrl】+【O】<br>打开为… 【Ctrl】+【Alt】+【O】<br>关闭当前图像 【Ctrl】+【W】<br>保存当前图像 【Ctrl】+【S】<br>另存为… 【Ctrl】+【Shift】+【S】<br>存储副本 【Ctrl】+【Alt】+【S】<br>页面设置 【Ctrl】+【Shift】+【P】<br>打印 【Ctrl】+【P】<br>打开“预置”对话框 【Ctrl】+【K】<br>显示最后一次显示的“预置”对话框 【Alt】+【Ctrl】+【K】<br>设置“常规”选项(在预置对话框中) 【Ctrl】+【1】<br>设置“存储文件”(在预置对话框中) 【Ctrl】+【2】<br>设置“显示和光标”(在预置对话框中) 【Ctrl】+【3】<br>设置“透明区域与色域”(在预置对话框中) 【Ctrl】+【4】<br>设置“单位与标尺”(在预置对话框中) 【Ctrl】+【5】<br>设置“参考线与网格”(在预置对话框中) 【Ctrl】+【6】<br>设置“增效工具与暂存盘”(在预置对话框中) 【Ctrl】+【7】<br>设置“内存与图像高速缓存”(在预置对话框中) 【Ctrl】+【8】<br>编辑操作<br>还原/重做前一步操作 【Ctrl】+【Z】<br>还原两步以上操作 【Ctrl】+【Alt】+【Z】<br>重做两步以上操作 【Ctrl】+【Shift】+【Z】<br>剪切选取的图像或路径 【Ctrl】+【X】或【F2】<br>拷贝选取的图像或路径 【Ctrl】+【C】<br>合并拷贝 【Ctrl】】+【M】<br>屏幕 【Ctrl】+【Alt】+【S】<br>叠加 【Ctrl】+【Alt】+【O】<br>柔光 【Ctrl】+【Alt】+【F】<br>强光 【Ctrl】+【Alt】+【H】<br>颜色减淡 【Ctrl】+【Alt】+【D】<br>颜色加深 【Ctrl】+【Alt】+【B】<br>变暗 【Ctrl】+【Alt】+【K】<br>变亮 【Ctrl】+【Alt】+【G】<br>差值 【Ctrl】+【Alt】+【E】<br>排除 【Ctrl】+【Alt】+【X】<br>色相 【Ctrl】+【Alt】+【U】<br>饱和度 【Ctrl】+【Alt】+【T】<br>颜色 【Ctrl】+【Alt】+【C】<br>光度 【Ctrl】+【Alt】+【Y】<br>去色 海棉工具+【Ctrl】+【Alt】+【J】<br>加色 海棉工具+【Ctrl】+【Alt】+【A】<br>暗调 减淡/加深工具+【Ctrl】+【Alt】+【W】<br>中间调 减淡/加深工具+【Ctrl】+【Alt】+【V】<br>高光 减淡/加深工具+【Ctrl】+【Alt】+【Z】 选择功能<br>全部选取 【Ctrl】+【A】<br>取消选择 【Ctrl】+【D】<br>重新选择 【Ctrl】+【Shift】+【D】<br>羽化选择 【Ctrl】+【Alt】+【D】<br>反向选择 【Ctrl】+【Shift】+【I】<br>路径变选区 数字键盘的【Enter】<br>载入选区 【Ctrl】+点按图层、路径、通道面板中的缩约图<br>按上次的参数再做一次上次的滤镜 【Ctrl】+【F】<br>退去上次所做滤镜的效果 【Ctrl】+【Shift】+【F】<br>重复上次所做的滤镜(可调参数) :<br>【Ctrl】+【Alt】+【F】<br>选择工具(在“3D变化”滤镜中) 【V】<br>立方体工具(在“3D变化”滤镜中) 【M】<br>球体工具(在“3D变化”滤镜中) 【N】<br>柱体工具(在“3D变化”滤镜中) 【C】<br>轨迹球(在“3D变化”滤镜中) 【R】<br>全景相机工具(在“3D变化”滤镜中) 【E】<br>视图操作<br>显示彩色通道 【Ctrl】+【~】<br>显示单色通道 【Ctrl】+【数字】<br>显示复合通道 【~】<br>以CMYK方式预览(开关) 【Ctrl】+【Y】<br>打开/关闭色域警告 【Ctrl】+【Shift】+【Y】<br>放大视图 【Ctrl】+【+】<br>缩小视图 【Ctrl】+【-】<br>满画布显示 【Ctrl】+【0】<br>实际象素显示 【Ctrl】+【Alt】+【0】<br>向上卷动一屏 【PageUp】<br>向下卷动一屏 【PageDown】<br>向左卷动一屏 【Ctrl】+【PageUp】<br>向右卷动一屏 【Ctrl】+【PageDown】<br>向上卷动10 个单位 【Shift】+【PageUp】<br>向下卷动10 个单位 【Shift】+【PageDown】<br>向左卷动10 个单位 【Shift】+【Ctrl】+【PageUp】<br>向右卷动10 个单位 【Shift】+【Ctrl】+【PageDown】<br>将视图移到左上角 【Home】<br>将视图移到右下角 【End】<br>显示/隐藏选择区域 【Ctrl】+【H】<br>显示/隐藏路径 【Ctrl】+【Shift】+【H】<br>显示/隐藏标尺 【Ctrl】+【R】<br>显示/隐藏参考线 【Ctrl】+【;】<br>显示/隐藏网格 【Ctrl】+【”】<br>贴紧参考线 【Ctrl】+【Shift】+【;】<br>锁定参考线 【Ctrl】+【Alt】+【;】<br>贴紧网格 【Ctrl】+【Shift】+【”】<br>显示/隐藏“画笔”面板 【F5】<br>显示/隐藏“颜色”面板 【F6】<br>显示/隐藏“图层”面板 【F7】<br>显示/隐藏“信息”面板 【F8】<br>显示/隐藏“动作”面板 【F9】<br>显示/隐藏所有命令面板 【TAB】<br>显示或隐藏工具箱以外的所有调板 【Shift】+【TAB】<br>文字处理(在”文字工具”对话框中)<br>左对齐或顶对齐 【Ctrl】+【Shift】+【L】<br>中对齐 【Ctrl】+【Shift】+【C】<br>右对齐或底对齐 【Ctrl】+【Shift】+【R】<br>左／右选择 1 个字符 【Shift】+【←】/【→】<br>下／上选择 1 行 【Shift】+【↑】/【↓】<br>选择所有字符 【Ctrl】+【A】<br>将所选文本的文字大小减小2 点象素 【Ctrl】+【Shift】+【&lt;】<br>将所选文本的文字大小增大2 点象素 【Ctrl】+【Shift】+【&gt;】<br>将所选文本的文字大小减小10 点象素 【Ctrl】+【Alt】+【Shift】+【&lt;】<br>将所选文本的文字大小增大10 点象素 【Ctrl】+【Alt】+【Shift】+【&gt;】<br>将行距减小2点象素 【Alt】+【↓】<br>将行距增大2点象素 【Alt】+【↑】<br>将基线位移减小2点象素 【Shift】+【Alt】+【↓】<br>将基线位移增加2点象素 【Shift】+【Alt】+【↑】<br>将字距微调或字距调整减小20/1000ems :<br>【Alt】+【←】<br>将字距微调或字距调整增加20/1000ems :<br>【Alt】+【→】<br>将字距微调或字距调整减小100/1000ems:<br>【Ctrl】+【Alt】+【←】<br>将字距微调或字距调整增加100/1000ems :<br>【Ctrl】+【Alt】+【→】<br>选择通道中白的像素（包括半色调）:<br>【Ctrl】+【Alt】+【1~9】</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;PHOTOSHOP常用快捷键大全&lt;/p&gt;
&lt;h2 id=&quot;一、文件&quot;&gt;&lt;a href=&quot;#一、文件&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="Ps" scheme="http://haimianbao1111.github.io/categories/Ps/"/>
    
    
      <category term="Ps" scheme="http://haimianbao1111.github.io/tags/Ps/"/>
    
  </entry>
  
  <entry>
    <title>从基础学习 string.Join(&quot;,&quot; keys.ToArray())</title>
    <link href="http://haimianbao1111.github.io/2018/03/10/%E4%BB%8E%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0-string-Join-keys-ToArray/"/>
    <id>http://haimianbao1111.github.io/2018/03/10/从基础学习-string-Join-keys-ToArray/</id>
    <published>2018-03-10T03:20:22.000Z</published>
    <updated>2018-03-10T03:25:12.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="sql-拼接方式"><a href="#sql-拼接方式" class="headerlink" title="sql+拼接方式"></a>sql+拼接方式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public static int InsertModel&lt;T&gt;(T t) where T : BaseModel</span><br><span class="line">      &#123;</span><br><span class="line">          Type type = typeof(T);</span><br><span class="line">          string columnStrings = string.Join(&quot;,&quot;, type.GetProperties().Select(p =&gt; string.Format(&quot;[&#123;0&#125;]&quot;, p.Name)));</span><br><span class="line">          string sql = &quot;insert into &quot;+type.Name+&quot;(&quot;;</span><br><span class="line">          foreach (var item in type.GetProperties())</span><br><span class="line">          &#123;</span><br><span class="line">              if (item.Name != &quot;Id&quot;)</span><br><span class="line">              &#123;</span><br><span class="line">                  sql+=item.Name+&quot;,&quot;;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          sql = sql.Substring(0, sql.Length - 1);</span><br><span class="line">          sql += &quot;)&quot;;</span><br><span class="line">          sql+=&quot; values(&quot;;</span><br><span class="line">          foreach (var item in type.GetProperties())</span><br><span class="line">          &#123;</span><br><span class="line">              if (item.Name != &quot;Id&quot;)</span><br><span class="line">              &#123;</span><br><span class="line">                  sql += &quot;&apos;&quot; + item.GetValue(t) + &quot;&apos;,&quot;;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          sql = sql.Substring(0, sql.Length - 1);</span><br><span class="line">          sql += &quot;)&quot;;</span><br><span class="line">          return DbHelperSQL.ExecuteSql(sql);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><h2 id="优化-使用string-join-“-”-key-ToArray"><a href="#优化-使用string-join-“-”-key-ToArray" class="headerlink" title="优化,使用string.join(“,”,key.ToArray())"></a>优化,使用string.join(“,”,key.ToArray())</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public bool Insert&lt;T&gt;(T t) where T : BaseModel</span><br><span class="line">      &#123;</span><br><span class="line">          //插入实体时要判断一下时间的插入.还可以通过特性来判断一下数据的长度</span><br><span class="line">          //约定的id为自增长.</span><br><span class="line">          var type = typeof(T);</span><br><span class="line">          var keys = new List&lt;string&gt;();</span><br><span class="line">          var values = new List&lt;string&gt;();</span><br><span class="line">          var par = new List&lt;SqlParameter&gt;();</span><br><span class="line">          foreach (var item in type.GetProperties())</span><br><span class="line">          &#123;</span><br><span class="line">              var value = item.GetValue(t);</span><br><span class="line">              if (item.Name.ToLower() == &quot;id&quot;) continue;</span><br><span class="line">              keys.Add(item.Name);</span><br><span class="line">              values.Add(&quot;@&quot; + item.Name);</span><br><span class="line">              par.Add(new SqlParameter(&quot;@&quot; + item.Name, value));</span><br><span class="line">          &#125;</span><br><span class="line">          var c = string.Join(&quot;,&quot;, keys.ToArray());</span><br><span class="line">          var v = string.Join(&quot;,&quot;, values.ToArray());</span><br><span class="line">          var sql = string.Format($&quot;INSERT INTO [&#123;type.Name&#125;] (&#123;c&#125;) &quot; +</span><br><span class="line">              $&quot;VALUES(&#123;v&#125;)&quot;);</span><br><span class="line"></span><br><span class="line">          return ExcuteSql&lt;bool&gt;(sql, cmd =&gt;</span><br><span class="line">          &#123;</span><br><span class="line">              foreach (var parameter in par)</span><br><span class="line">                  cmd.Parameters.Add(parameter);</span><br><span class="line"></span><br><span class="line">              var result = cmd.ExecuteNonQuery();</span><br><span class="line">              return result &gt; 0;</span><br><span class="line">          &#125;);</span><br><span class="line"></span><br><span class="line">          //   return RunCmd(sql, par.ToArray());</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><div class="note success"><p>原文地址：<a href="https://www.cnblogs.com/honghong75042/p/7047817.html" target="_blank" rel="noopener">https://www.cnblogs.com/honghong75042/p/7047817.html</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;sql-拼接方式&quot;&gt;&lt;a href=&quot;#sql-拼接方式&quot; class=&quot;headerlink&quot; title=&quot;sql+拼接方式&quot;
      
    
    </summary>
    
      <category term="Csharp" scheme="http://haimianbao1111.github.io/categories/Csharp/"/>
    
    
      <category term="Csharp" scheme="http://haimianbao1111.github.io/tags/Csharp/"/>
    
  </entry>
  
  <entry>
    <title>添加启动项及常用Windows+R</title>
    <link href="http://haimianbao1111.github.io/2018/03/09/%E6%B7%BB%E5%8A%A0%E5%90%AF%E5%8A%A8%E9%A1%B9%E5%8F%8A%E5%B8%B8%E7%94%A8Windows-R/"/>
    <id>http://haimianbao1111.github.io/2018/03/09/添加启动项及常用Windows-R/</id>
    <published>2018-03-09T10:35:27.000Z</published>
    <updated>2018-03-09T10:43:58.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="添加启动项"><a href="#添加启动项" class="headerlink" title="添加启动项"></a>添加启动项</h1><h2 id="1-打开计算机管理"><a href="#1-打开计算机管理" class="headerlink" title="1.打开计算机管理"></a>1.打开计算机管理</h2><p><img src="/images/windowsR/windowsR1.png" class="full-image"></p><h2 id="2-创建基本任务"><a href="#2-创建基本任务" class="headerlink" title="2.创建基本任务"></a>2.创建基本任务</h2><p><img src="/images/windowsR/windowsR2.png" class="full-image"></p><h2 id="3-输入名称"><a href="#3-输入名称" class="headerlink" title="3.输入名称"></a>3.输入名称</h2><p><img src="/images/windowsR/windowsR3.png" class="full-image"></p><h2 id="4-输入脚本，脚本路径"><a href="#4-输入脚本，脚本路径" class="headerlink" title="4.输入脚本，脚本路径"></a>4.输入脚本，脚本路径</h2><p><img src="/images/windowsR/windowsR4.png" class="full-image"></p><h1 id="常用Windows-R命令"><a href="#常用Windows-R命令" class="headerlink" title="常用Windows+R命令"></a>常用Windows+R命令</h1><p>services.msc—本地服务设置<br>msconfig—系统配置实用程序<br>mspaint——–画图板<br>notepad——–打开记事本<br>Nslookup——-IP地址侦测器<br>ncpa.cpl—网路连接<br>wf.msc—高级安全Windows防火墙<br>explorer——-打开资源管理器<br>taskmgr——–任务管理器<br>osk————打开屏幕键盘<br>shutdown -f -s -t 30000—多少秒后关机<br>devmgmt.msc— 设备管理器<br>mstsc———-远程桌面连接<br>magnify——–放大镜实用程序<br>compmgmt.msc—计算机管理</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;添加启动项&quot;&gt;&lt;a href=&quot;#添加启动项&quot; class=&quot;headerlink&quot; title=&quot;添加启动项&quot;&gt;&lt;/a&gt;添加启动项&lt;/h1&gt;&lt;h2 id=&quot;1-打开计算机管理&quot;&gt;&lt;a href=&quot;#1-打开计算机管理&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="其他" scheme="http://haimianbao1111.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://haimianbao1111.github.io/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>jq的$(function(){})与window.onload的区别</title>
    <link href="http://haimianbao1111.github.io/2018/03/09/jq%E7%9A%84-function-%E4%B8%8Ewindow-onload%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://haimianbao1111.github.io/2018/03/09/jq的-function-与window-onload的区别/</id>
    <published>2018-03-09T03:31:22.000Z</published>
    <updated>2018-03-09T10:44:01.642Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="俩个事件的区别是什么？"><a href="#俩个事件的区别是什么？" class="headerlink" title="俩个事件的区别是什么？"></a>俩个事件的区别是什么？</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(function () &#123;</span><br><span class="line">    console.log(&quot;ready执行&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(function() &#123;</span><br><span class="line">    console.log(&quot;ready1执行&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">    console.log(&apos;load执行&apos;);</span><br><span class="line">&#125;;</span><br><span class="line">window.onload = function () &#123;</span><br><span class="line">    console.log(&apos;load1执行&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="执行结果："><a href="#执行结果：" class="headerlink" title="执行结果："></a>执行结果：</h2><blockquote><p>ready执行<br>ready执行<br>load1执行</p></blockquote><p>可以看出俩点不同：</p><ol><li>$(function(){})不会被覆盖，而window.onload会被覆盖。</li><li>$(function(){})在window.onload执行前执行的，$(function(){})类似于原生js中的DOMContentLoaded事件，在DOM加载完毕后，页面全部内容（如图片等）完全加载完毕前被执行。而window.onload会在页面资源全部加载完毕后才会执行。</li></ol><h1 id="DOM文档加载步骤"><a href="#DOM文档加载步骤" class="headerlink" title="DOM文档加载步骤"></a>DOM文档加载步骤</h1><p>1.解析HTML结构<br>2.加载外部的脚本和样式文件<br>3.解析并执行脚本代码<br>4.执行$(function(){})内对应代码<br>5.加载图片等二进制资源<br>6.页面加载完毕，执行window.onload</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;俩个事件的区别是什么？&quot;&gt;&lt;a href=&quot;#俩个事件的区别是什么？&quot; class=&quot;headerlink&quot; title=&quot;俩个事
      
    
    </summary>
    
      <category term="前端" scheme="http://haimianbao1111.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="前端" scheme="http://haimianbao1111.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>获取input(file)的路径，更改默认样式</title>
    <link href="http://haimianbao1111.github.io/2018/03/09/%E8%8E%B7%E5%8F%96-input-type-file-%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%8C%E6%9B%B4%E6%94%B9%E9%BB%98%E8%AE%A4%E6%A0%B7%E5%BC%8F/"/>
    <id>http://haimianbao1111.github.io/2018/03/09/获取-input-type-file-的路径，更改默认样式/</id>
    <published>2018-03-09T02:42:05.000Z</published>
    <updated>2018-03-09T03:09:19.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述:"></a>概述:</h1><h2 id="如何获取input-file-的路径？"><a href="#如何获取input-file-的路径？" class="headerlink" title="如何获取input(file)的路径？"></a>如何获取input(file)的路径？</h2><ol><li><p>定义标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; id=&quot;file_input&quot;&gt;&lt;img src=&quot;&quot; class=&quot;img&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>获取路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;input[type=&apos;file&apos;]&quot;).change(function()&#123;   </span><br><span class="line">   var file = this.files[0];</span><br><span class="line">   if (window.FileReader) &#123;    </span><br><span class="line">        var reader = new FileReader();    </span><br><span class="line">        reader.readAsDataURL(file);    </span><br><span class="line">        //监听文件读取结束后事件    </span><br><span class="line">        reader.onloadend = function (e) &#123;</span><br><span class="line">            $(&quot;.img&quot;).attr(&quot;src&quot;,e.target.result);    //e.target.result就是最后的路径地址</span><br><span class="line">        &#125;;    </span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h2 id="input-file-样式修改及上传文件名显示"><a href="#input-file-样式修改及上传文件名显示" class="headerlink" title="input(file)样式修改及上传文件名显示"></a>input(file)样式修改及上传文件名显示</h2><blockquote><p>实现思路：<br>a标签包裹input元素<br>设置a标签为上传按钮的样式，相对定位<br>设置input为透明，绝对定位，覆盖到a上面</p></blockquote><p>html代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:;&quot; class=&quot;file gradient&quot;&gt;选择文件 </span><br><span class="line">　　&lt;input type=&quot;file&quot; &gt; </span><br><span class="line">&lt;div class=&quot;showFileName&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>CSS代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">.file &#123;</span><br><span class="line">    position: relative;</span><br><span class="line">    display: inline-block;</span><br><span class="line">    background: #ccc;</span><br><span class="line">    border: 1px solid #333;</span><br><span class="line">    padding: 4px 20px;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">    text-decoration: none;</span><br><span class="line">    text-indent: 0;</span><br><span class="line">    line-height: 20px;</span><br><span class="line">    border-radius: 20px;</span><br><span class="line">    color: #333;</span><br><span class="line">    font-size: 13px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.file input &#123;</span><br><span class="line">    position: absolute;</span><br><span class="line">    font-size: 100px;</span><br><span class="line">    right: 0;</span><br><span class="line">    top: 0;</span><br><span class="line">    opacity: 0;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">.gradient&#123;</span><br><span class="line">   </span><br><span class="line">    filter:alpha(opacity=100 finishopacity=50 style=1 startx=0,starty=0,finishx=0,finishy=150) progid:DXImageTransform.Microsoft.gradient(startcolorstr=#fff,endcolorstr=#ccc,gradientType=0);</span><br><span class="line">    -ms-filter:alpha(opacity=100 finishopacity=50 style=1 startx=0,starty=0,finishx=0,finishy=150) progid:DXImageTransform.Microsoft.gradient(startcolorstr=#fff,endcolorstr=#ccc,gradientType=0);/*IE8*/    </span><br><span class="line">    background:#ccc; /* 一些不支持背景渐变的浏览器 */  </span><br><span class="line">    background:-moz-linear-gradient(top, #fff, #ccc);  </span><br><span class="line">    background:-webkit-gradient(linear, 0 0, 0 bottom, from(#fff), to(#ccc));  </span><br><span class="line">    background:-o-linear-gradient(top, #fff, #ccc); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上传文件的文件名不显示，需要用js处理:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;.file&quot;).on(&quot;change&quot;,&quot;input[type=&apos;file&apos;]&quot;,function()&#123;</span><br><span class="line">    var filePath=$(this).val();</span><br><span class="line">    if(filePath.indexOf(&quot;jpg&quot;)!=-1 || filePath.indexOf(&quot;png&quot;)!=-1)&#123;</span><br><span class="line">        $(&quot;.fileerrorTip1&quot;).html(&quot;&quot;).hide();</span><br><span class="line">        var arr=filePath.split(&apos;\\&apos;);</span><br><span class="line">        var fileName=arr[arr.length-1];</span><br><span class="line">        $(&quot;.showFileName1&quot;).html(fileName);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $(&quot;.showFileName1&quot;).html(&quot;&quot;);</span><br><span class="line">        $(&quot;.fileerrorTip1&quot;).html(&quot;您未上传文件，或者您上传文件类型有误！&quot;).show();</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述:&quot;&gt;&lt;/a&gt;概述:&lt;/h1&gt;&lt;h2 id=&quot;如何获取input-file-的路径？&quot;&gt;&lt;a href=&quot;#如何获取input-file-的路径？&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Asp.Net Mvc" scheme="http://haimianbao1111.github.io/categories/Asp-Net-Mvc/"/>
    
    
      <category term="Asp.Net Mvc" scheme="http://haimianbao1111.github.io/tags/Asp-Net-Mvc/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET cache缓存的用法</title>
    <link href="http://haimianbao1111.github.io/2018/03/07/ASP-NET-cache%E7%BC%93%E5%AD%98%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <id>http://haimianbao1111.github.io/2018/03/07/ASP-NET-cache缓存的用法/</id>
    <published>2018-03-07T05:07:23.000Z</published>
    <updated>2018-03-07T12:02:41.953Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h1><p>HttpRuntime.Cache在ASP.NET的使用</p><h2 id="5个等级的缓存"><a href="#5个等级的缓存" class="headerlink" title="5个等级的缓存"></a>5个等级的缓存</h2><blockquote><p>1级是网络级缓存，缓存在浏览器，CDN以及代理服务器中   （举个例子：每个帮助页面都进行了缓存，访问一个页面的代码非常简单）<br>2级是由.net框架 HttpRuntime.Cache完成，在每台服务器的内存中。<br>3级Redis,分布式内存键值存储，在多个支撑同一个站点的服务器上共享缓存项。<br>4级SQL Server Cache，整个数据库，所有数据都被放到内存中。<br>5级SSD。通常只在SQL Server预热后才生效</p></blockquote><h1 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h1><blockquote><p>1.数据可能会被频繁的被使用，这种数据可以缓存。<br>2.数据的访问频率非常高，或者一个数据的访问频率不高，但是它的生存周期很长，这样的数据最好也缓存起来。<br>3.是一个常常被忽略的问题，有时候我们缓存了太多数据，通常在一台X86的机子上，如果你要缓存的数据超过800M的话，就会出现内存溢出的错误。所以说缓存是有限的。换名话说，你应该估计缓存集的大小，把缓存集的大小限制在10以内，否则它可能会出问题。在Asp.net中，如果缓存过大的话也会报内存溢出错误，特别是如果缓存大的DataSet对象的时候。</p></blockquote><p>你应该认真分析你的程序。根据实际情况来看哪里该用，哪里不该用。如：cache用得过多也会增大服务器的压力。整页输出缓存，又会影响数据的更新。 如果真的需要缓存很大量的数据，可以考虑静态技术。</p><h1 id="具体使用："><a href="#具体使用：" class="headerlink" title="具体使用："></a>具体使用：</h1><p>添加cachehelper类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">   /// 缓存帮助类</span><br><span class="line">   /// 时间：2016/05/07</span><br><span class="line">   /// &lt;/summary&gt;</span><br><span class="line">   public class CacheHelper</span><br><span class="line">   &#123;</span><br><span class="line">       #region 获取数据缓存</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 获取数据缓存</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       /// &lt;param name=&quot;cacheKey&quot;&gt;键&lt;/param&gt;</span><br><span class="line">       /// &lt;param name=&quot;objObject&quot;&gt;&lt;/param&gt;</span><br><span class="line">       public static object GetCache(string cacheKey)</span><br><span class="line">       &#123;</span><br><span class="line">           var objCache = HttpRuntime.Cache;</span><br><span class="line">           return objCache[cacheKey];</span><br><span class="line">       &#125;</span><br><span class="line">       #endregion</span><br><span class="line"></span><br><span class="line">       #region 设置数据缓存</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 设置数据缓存</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public static void SetCache(string cacheKey, object objObject)</span><br><span class="line">       &#123;</span><br><span class="line">           var objCache = HttpRuntime.Cache;</span><br><span class="line">           objCache.Insert(cacheKey, objObject);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 设置数据缓存</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public static void SetCache(string cacheKey, object objObject, TimeSpan timeout)</span><br><span class="line">       &#123;</span><br><span class="line">           var objCache = HttpRuntime.Cache;</span><br><span class="line">           objCache.Insert(cacheKey, objObject, null, DateTime.MaxValue, timeout, CacheItemPriority.NotRemovable, null);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 设置数据缓存</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public static void SetCache(string cacheKey, object objObject, DateTime absoluteExpiration, TimeSpan slidingExpiration)</span><br><span class="line">       &#123;</span><br><span class="line">           var objCache = HttpRuntime.Cache;</span><br><span class="line">           objCache.Insert(cacheKey, objObject, null, absoluteExpiration, slidingExpiration);</span><br><span class="line">       &#125;</span><br><span class="line">       #endregion</span><br><span class="line"></span><br><span class="line">       #region 移除缓存</span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 移除指定数据缓存</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public static void RemoveAllCache(string cacheKey)</span><br><span class="line">       &#123;</span><br><span class="line">           var cache = HttpRuntime.Cache;</span><br><span class="line">           cache.Remove(cacheKey);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       /// &lt;summary&gt;</span><br><span class="line">       /// 移除全部缓存</span><br><span class="line">       /// &lt;/summary&gt;</span><br><span class="line">       public static void RemoveAllCache()</span><br><span class="line">       &#123;</span><br><span class="line">           var cache = HttpRuntime.Cache;</span><br><span class="line">           IDictionaryEnumerator cacheEnum = cache.GetEnumerator();</span><br><span class="line">           while (cacheEnum.MoveNext())</span><br><span class="line">           &#123;</span><br><span class="line">               cache.Remove(cacheEnum.Key.ToString());</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       #endregion      </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>添加完对此进行调用先判断是否已经cache没有则添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var cacheKey = &quot;sid&quot; + assessId + &quot;uid&quot; + studentId + &quot;pindex&quot; + pageHelper.PageIndex;</span><br><span class="line">    var cachelist = CacheHelper.GetCache(cacheKey) as List&lt;Question&gt;;</span><br><span class="line">    if (cachelist != null)</span><br><span class="line">    &#123;</span><br><span class="line">        return cachelist;</span><br><span class="line">    &#125;</span><br><span class="line">获取数据</span><br><span class="line"></span><br><span class="line">    var result = GetAssessQuseList(pageHelper, tableName, fields, null, orderBy, true, studentId, otherFields);</span><br><span class="line">    CacheHelper.SetCache(cacheKey, result, TimeSpan.FromSeconds(120));</span><br><span class="line">    return result;</span><br></pre></td></tr></table></figure></p><p>下面是移除cache<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var cacheKey = &quot;sid&quot; + assessId + &quot;uid&quot; + base.LoggingUser.UserId + &quot;pindex&quot; + pageIndex;</span><br><span class="line">   var cachelist = CacheHelper.GetCache(cacheKey) as List&lt;Question&gt;;</span><br><span class="line">   if (cachelist != null)</span><br><span class="line">   &#123;</span><br><span class="line">       CacheHelper.RemoveAllCache(cacheKey);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述：&quot;&gt;&lt;a href=&quot;#概述：&quot; class=&quot;headerlink&quot; title=&quot;概述：&quot;&gt;&lt;/a&gt;概述：&lt;/h1&gt;&lt;p&gt;HttpRuntime.Cache在ASP.NET的使用&lt;/p&gt;
&lt;h2 id=&quot;5个等级的缓存&quot;&gt;&lt;a href=&quot;#5个等级的缓
      
    
    </summary>
    
      <category term="Asp.Net Mvc" scheme="http://haimianbao1111.github.io/categories/Asp-Net-Mvc/"/>
    
    
      <category term="Asp.Net Mvc" scheme="http://haimianbao1111.github.io/tags/Asp-Net-Mvc/"/>
    
  </entry>
  
  <entry>
    <title>Web 安全整理</title>
    <link href="http://haimianbao1111.github.io/2018/03/07/Web-%E5%AE%89%E5%85%A8%E6%95%B4%E7%90%86/"/>
    <id>http://haimianbao1111.github.io/2018/03/07/Web-安全整理/</id>
    <published>2018-03-07T05:06:09.000Z</published>
    <updated>2018-03-07T12:00:00.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>有过网站开发经验的朋友都知道网站安全是构建网站时必须要考虑的一个因素，网站安全的重点在于服务器的安全配置管理以及程序脚本的完善性。值得注意的是，如果服务器的账号和权限由于管理不善而泄露了，即使技术上网站系统再安全，也不可避免会受到攻击。</p><p>在笔者曾经参与过的一个项目中，客户方邀请了专业的第三方安全测试公司进行了安全性的全面检测，同时也针对性地进行了安全性的改善，特别是在应用程序方面。此文将分享改善过程中的几个典型问题的分析和解决对策，包括SQL注入攻击、跨站点脚本攻击、验证码绕过等，希望能够为大家在改善网站安全方面的工作提供参考，并采取相应的防范措施。</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="问题1"><a href="#问题1" class="headerlink" title="问题1."></a>问题1.</h2><p>描述：易受到SQL注入攻击<br>风险：攻击者可以通过应用程序发送数据库命令，这些命令将被服务器执行。这可以用来对数据库进行完全控制。这些SQL注入漏洞可以通过在其中一个区域插入“and 7 = 7 -”或“and 8 = 9 -”，并比较结果进行判断。<br>分析：SQL注入攻击是由于服务器对参数检查不够，而导致攻击者借此获得敏感信息。因此，需要使用参数化查询以确保攻击者无法操作数据库的SQL查询语句。例如，如果应用程序要求输入名称，那它应该只接受字母字符、空格和撇号，而不接受任何其他字符。也就是说，在应用程序中的所有输入域实施服务器端白名单技术。特别是所有用于SQL语句的输入域，需要空格的都应该用引号括起来。<br>改善：在程序中所有可接受外部参数的地方进行逐一识别，以过滤危险字符。如在全局函数中定义“禁止字符串列表”，该表中列出所要过滤出的SQL攻击代码可能包含的字符串。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">and |exec |insert |select |delete |update |count | * |chr |mid |master |truncate |char |declare |&lt;|&gt;|’|(|)|&#123;|&#125;</span><br></pre></td></tr></table></figure></p><h2 id="问题2"><a href="#问题2" class="headerlink" title="问题2."></a>问题2.</h2><p>描述：易受到跨站点脚本攻击<br>风险：此漏洞可以被用来获取身份验证Cookie，攻击管理员账户，或使应用程序的用户攻击其他服务器和系统。该漏洞可以通过在某区域中插入“<script>alert(‘23389950’);</script>”来判断。<br>分析：这也需要在本网站的所有输入域实施服务器端白名单技术。如果需要特殊字符，应该转换为更安全的形式。如适用于各种语言的HTML转码：<br>&amp;应转换为 &amp;；<br>“应转换为”；<br>‘应转换为&amp;39；<br>将&gt;应转换为&gt;；<br>&lt;应转换为&lt;。<br>改善：除了这些标准的HTML转码之外，对于可疑字符串也要进行强化检查和转化，并进一步执行以下操作：（1）对各页面的输入参数进行强化检查；（2）对原来只在客户端判断的参数，在服务器端进一步强化检查;（3）最终提供了全局的转码和过滤的函数。当然这需要在性能和扩展性以及安全性方面的平衡综合考虑。</p><h2 id="问题3"><a href="#问题3" class="headerlink" title="问题3."></a>问题3.</h2><p>描述：非安全的CrossDomain.XML文件<br>风险：为解决Flash/Flex系统中的跨域问题，提出了crossdomain.xml跨域策略文件。虽然可以解决跨域问题，但是也带来了恶意攻击的风险，如果该策略文件里允许访问任何域，就可能允许发起对网络服务器的跨站点请求伪造和跨站点脚本攻击。比如，不安全Flash应用程序可能会访问本地数据和用户保存的网页记录，甚至传播病毒和恶意代码。<br>分析：考虑如何确保只对提供安全资源的可信域开放允许。<br>改善：经过调查，发现在程序目录下的crossdomain.xml文件里的配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=”1.0″?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE cross-domain-policy SYSTEM ”http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd”&gt;</span><br><span class="line"></span><br><span class="line">&lt;cross-domain-policy&gt;</span><br><span class="line"></span><br><span class="line">&lt;allow-access-from domain=”*” /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/cross-domain-policy&gt;</span><br></pre></td></tr></table></figure></p><p>文件中的allow-access-from 实体设置为星号设置为允许任何域访问，将其修改为 </p><p><allow-access-from domain="”*.example.com”">，表示只允许本域访问，该问题就解决了。</allow-access-from></p><h2 id="问题4"><a href="#问题4" class="headerlink" title="问题4."></a>问题4.</h2><p>描述：网站后台管理通过不安全链接实施<br>风险：管理访问没有强制实施SSL，这可能允许攻击者监视并修改用户和服务器之间的发送的包括账户凭据在内的所有数据。如果攻击者通过代理或者路由软件拦截服务器和管理员间的通信，敏感数据可能被截获，进而管理员账户可能会受到危害。<br>分析：管理访问没有强制实施SSL，为防止数据拦截，管理访问应该强制执行HTTPS (SSL3.0)。<br>改善：运维对服务器进行了配置调整，单独配置支持了SSL3.0访问管理后台。</p><h2 id="问题5"><a href="#问题5" class="headerlink" title="问题5."></a>问题5.</h2><p>描述：验证环节可以被绕过<br>风险：用户发布信息时，虽然有页面的验证码防止自动恶意发布，但仍可能被绕过进行自动提交。绕过的方式之一是使用过滤和识别软件，之二是可以利用Cookie或Session信息绕过验证码。<br>分析：图像失真机制本身不是特别强，可以很容易地使用公开的过滤和识别软件来识别。生成的图片也是可以预测的，因为使用的字符集很简单（只是数字），建议实现一个更强大的验证码系统。<br>Cookie或session信息处理有漏洞导致验证码被绕过, 确保每一个链接只能取得唯一的验证码，并确保每个请求产生并需要一个新的验证码。<br>改善：根据需要增加验证码的复杂度，而不只是单数字。<br>经过分析发现是因为验证码被存入了Session里，而开发人员忘记在提交之后清空Session中的验证码的值，导致验证码在过期时间内一直可用，从而可能被利用多次提交。因此在提交后追加了及时清空验证码的操作。</p><h2 id="问题6"><a href="#问题6" class="headerlink" title="问题6."></a>问题6.</h2><p>描述：泄露敏感信息<br>风险：此信息只能用于协助利用其他漏洞，并不能直接用来破坏应用程序。网站的robots.txt文件里可以获得敏感目录的信息，这可能允许攻击者获得有关应用程序内部的其他信息，这些信息可能被用来攻击其他漏洞。<br>分析：robots.txt不应在提供管理界面的信息。如果robots.txt文件暴露了Web站点结构，则需要将敏感内容移至隔离位置，以避免搜索引擎机器人搜索到此内容。<br>改善：当然robots.txt要根据SEO的要求来处理，但也要同样注意安全性。如：disallow:/testadmin/，其中testadmin为管理后台，就被暴露了。可以根据实际情况是否必要决定删除robots.txt文件或者把敏感目录单独配置禁止搜索引擎搜索。</p><h2 id="问题7"><a href="#问题7" class="headerlink" title="问题7."></a>问题7.</h2><p>描述：密码安全<br>风险：假如某网站数据库泄露，那么用户信息就被一览无余了，如果这是用户的常用密码，那么坏人拿到密码就可以进行撞库操作，那么你买的12306的票就会被坏人退了。以前csdn和天涯就是使用明文来存储密码的，之后就出现的泄露事件。<br>改善：md5加盐加密<br>什么是md5加盐？在存储密码的时候，我们可以将真实的密码+“盐”之后再进行md5加密。“盐”可以是一个字符串（无规律），也可以是一个字段，比如说是姓名字段，也可是是单独的字段。<br>在判断用户是否存在的时候，我们先将输入的密码+“盐”，然后md5加密，在和数据库中的密码字段进行匹配。这样做会安全一些。</p><h2 id="问题8"><a href="#问题8" class="headerlink" title="问题8."></a>问题8.</h2><p>描述：权限控制漏洞<br>风险：未经授权可以进行的操作都是权限控制漏洞<br>例如，某些网站的后台操作就仗着「以为用户不知道入口地址」不进行任何权限检查，又例如，某些操作可能出现不允许更改的字段被用户递交更改（往往是那些网页上标记为 disabled 或者 hidden 的字段），再例如，允许通过 ../ 访问到不应该被访问的文件等（一般存在于 include 中）。<br>改善：所有地方都要进行权限检查（如是否已登录、当前用户是否有足够权限、该项是否可修改等），总之，不要相信任何来自用户的数据，URL 当然也是。</p><h2 id="问题9"><a href="#问题9" class="headerlink" title="问题9."></a>问题9.</h2><p>描述：验证码<br>风险：非一次性、容易被识别。<br>非一次性指的是，同一个验证码可以一直被用下去。一般来说，每进行一次验证码校对（无论正确与否），都应该强制更换或清除 Session 中的验证码。关于识别问题，在当前科技水平下，不加噪点不加扭曲的验证码几乎是 100% 可识别的。<br>改善：使用行为验证方式验证；加干扰线验证</p><h2 id="其他问题汇总："><a href="#其他问题汇总：" class="headerlink" title="其他问题汇总："></a>其他问题汇总：</h2><p>问题：可能通过登录页面枚举出用户名，因为根据账户是否存在的错误信息是不同的。<br>对策：修改错误信息使之不带有提示性，如“您输入的邮箱或密码不对!” 并且超过一定次数则对该IP进行锁定。<br><br><br>问题：检测到可能泄露敏感信息或被恶意利用的冗余文件，如测试文件、bak文件、临时文件。<br>对策：除去服务器中的相应文件。<br><br><br>问题：发现潜在机密信息，如名为order的文件很容易被联想到用户订单。<br>对策：避免在文件名中含有完整的敏感词汇或不要在容易猜测到的文件中保存敏感信息，或者限制对它们的访问。<br><br><br>问题：发现内部信息泄露。<br>对策：除去代码中漏删的内部IP地址，内部组织，人员相关信息等。<br><br><br>问题：XSS 漏洞，CSRF 漏洞<br>对策：前端安全验证控制<br><div class="note success"><p>参考1：<a href="http://blog.csdn.net/lifushan123/article/details/45197753" target="_blank" rel="noopener">http://blog.csdn.net/lifushan123/article/details/45197753</a><br>参考2：<a href="http://blog.csdn.net/fengyinchao/article/details/50775121" target="_blank" rel="noopener">http://blog.csdn.net/fengyinchao/article/details/50775121</a></p></div></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;有过网站开发经验的朋友都知道网站安全是构建网站时必须要考虑的一个因素，网站安全的重点在于服务器的安全配置管理以及程序脚本的完善性。值得注意的
      
    
    </summary>
    
      <category term="Asp.Net Mvc" scheme="http://haimianbao1111.github.io/categories/Asp-Net-Mvc/"/>
    
    
      <category term="Asp.Net Mvc,Web 安全" scheme="http://haimianbao1111.github.io/tags/Asp-Net-Mvc-Web-%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET MVC使用EPPlus，导出数据到Excel</title>
    <link href="http://haimianbao1111.github.io/2018/03/02/ASP-NET-MVC%E4%BD%BF%E7%94%A8EPPlus%EF%BC%8C%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE%E5%88%B0Excel/"/>
    <id>http://haimianbao1111.github.io/2018/03/02/ASP-NET-MVC使用EPPlus，导出数据到Excel/</id>
    <published>2018-03-02T02:35:56.000Z</published>
    <updated>2018-03-02T03:00:27.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><p>如何导出数据到Excel文件中，这里我使用的是免费开源的Epplus组件。<br>源代码下载：<a href="https://github.com/caofangsheng93/ExcelExportInMvc" target="_blank" rel="noopener">https://github.com/caofangsheng93/ExcelExportInMvc</a></p><h1 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2.介绍"></a>2.介绍</h1><p>这篇文章，介绍的是怎样导出数据到Excel文件中，大多数的后端程序都有报表功能：把显示在Grid中的数据导出到Excel文件中，这篇文章中使用的是EPPlus组件。</p><p>EPPlus是一个基于OOXML<br>【Open Extended Markup Language】 格式的，操作Excel表格的类库。OOXML是由微软开发的。默认支持微软的Office。</p><p>开源网站：<a href="http://epplus.codeplex.com/" target="_blank" rel="noopener">http://epplus.codeplex.com/</a></p><h1 id="3-正文"><a href="#3-正文" class="headerlink" title="3.正文"></a>3.正文</h1><p><img src="/images/mvc/mvc1.png" class="full-image"><br>首先我们需要引入：EPPlus。<br><img src="/images/mvc/mvc2.png" class="full-image"></p><h2 id="实现步骤："><a href="#实现步骤：" class="headerlink" title="实现步骤："></a>实现步骤：</h2><h2 id="1-数据：这里我使用静态数据，来确保这篇文章尽可能通俗易懂。"><a href="#1-数据：这里我使用静态数据，来确保这篇文章尽可能通俗易懂。" class="headerlink" title="1.数据：这里我使用静态数据，来确保这篇文章尽可能通俗易懂。"></a>1.数据：这里我使用静态数据，来确保这篇文章尽可能通俗易懂。</h2><h2 id="2-集合：静态数据保存在集合中"><a href="#2-集合：静态数据保存在集合中" class="headerlink" title="2.集合：静态数据保存在集合中"></a>2.集合：静态数据保存在集合中</h2><h2 id="3-DataTable：转化泛型集合的数据，保存到DataTable中"><a href="#3-DataTable：转化泛型集合的数据，保存到DataTable中" class="headerlink" title="3.DataTable：转化泛型集合的数据，保存到DataTable中"></a>3.DataTable：转化泛型集合的数据，保存到DataTable中</h2><h2 id="4-导出文件：DataTable导出为Excel"><a href="#4-导出文件：DataTable导出为Excel" class="headerlink" title="4.导出文件：DataTable导出为Excel"></a>4.导出文件：DataTable导出为Excel</h2><p>首先，我们创建一个类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Student</span><br><span class="line">&#123;</span><br><span class="line">    public int ID &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public string Name &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public string Sex &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public int Age &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">    public string Email &#123; get; set; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student</span><br></pre></td></tr></table></figure></p><p>然后创建一个静态数据类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class StaticDataOfStudent</span><br><span class="line">&#123;</span><br><span class="line">    public static List&lt;Student&gt; ListStudent</span><br><span class="line">    &#123;</span><br><span class="line">        get </span><br><span class="line">        &#123;</span><br><span class="line">            return new List&lt;Student&gt;() </span><br><span class="line">            &#123;</span><br><span class="line">                new Student()&#123;ID=1,Name=&quot;曹操&quot;,Sex=&quot;男&quot;,Email=&quot;caocao@163.com&quot;,Age=24&#125;,</span><br><span class="line">                new Student()&#123;ID=2,Name=&quot;李易峰&quot;,Sex=&quot;女&quot;,Email=&quot;lilingjie@sina.com.cn&quot;,Age=24&#125;,</span><br><span class="line">                new Student()&#123;ID=3,Name=&quot;张三丰&quot;,Sex=&quot;男&quot;,Email=&quot;zhangsanfeng@qq.com&quot;,Age=224&#125;,</span><br><span class="line">                new Student()&#123;ID=4,Name=&quot;孙权&quot;,Sex=&quot;男&quot;,Email=&quot;sunquan@163.com&quot;,Age=1224&#125;,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">StaticDataOfStudent</span><br></pre></td></tr></table></figure></p><p>然后就是我们的导出Excel帮助类了：<br>    /// <summary><br>    /// Excel导出帮助类<br>    /// </summary><br>    public class ExcelExportHelper<br>    {<br>        public static string ExcelContentType<br>        {<br>            get<br>            {<br>                return “application/vnd.openxmlformats-officedocument.spreadsheetml.sheet”;<br>            }<br>        }</p><pre><code>    /// &lt;summary&gt;    /// List转DataTable    /// &lt;/summary&gt;    /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;    /// &lt;param name=&quot;data&quot;&gt;&lt;/param&gt;    /// &lt;returns&gt;&lt;/returns&gt;    public static DataTable ListToDataTable&lt;T&gt;(List&lt;T&gt; data)    {        PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(T));        DataTable dataTable = new DataTable();        for (int i = 0; i &lt; properties.Count; i++)        {            PropertyDescriptor property = properties[i];              dataTable.Columns.Add(property.Name, Nullable.GetUnderlyingType(property.PropertyType) ?? property.PropertyType);          }        object[] values = new object[properties.Count];        foreach (T item in data)        {            for (int i = 0; i &lt; values.Length; i++)            {                values[i] = properties[i].GetValue(item);            }            dataTable.Rows.Add(values);        }        return dataTable;      }    /// &lt;summary&gt;    /// 导出Excel    /// &lt;/summary&gt;    /// &lt;param name=&quot;dataTable&quot;&gt;数据源&lt;/param&gt;    /// &lt;param name=&quot;heading&quot;&gt;工作簿Worksheet&lt;/param&gt;    /// &lt;param name=&quot;showSrNo&quot;&gt;//是否显示行编号&lt;/param&gt;    /// &lt;param name=&quot;columnsToTake&quot;&gt;要导出的列&lt;/param&gt;    /// &lt;returns&gt;&lt;/returns&gt;    public static byte[] ExportExcel(DataTable dataTable, string heading = &quot;&quot;, bool showSrNo = false, params string[] columnsToTake)    {        byte[] result = null;        using(ExcelPackage package=new ExcelPackage())        {            ExcelWorksheet workSheet = package.Workbook.Worksheets.Add(string.Format(&quot;{0}Data&quot;, heading));            int startRowFrom = string.IsNullOrEmpty(heading) ? 1 : 3;  //开始的行            //是否显示行编号            if (showSrNo)            {                DataColumn dataColumn = dataTable.Columns.Add(&quot;#&quot;, typeof(int));                dataColumn.SetOrdinal(0);                int index = 1;                foreach (DataRow item in dataTable.Rows)                {                    item[0] = index;                    index++;                }            }            //Add Content Into the Excel File            workSheet.Cells[&quot;A&quot; + startRowFrom].LoadFromDataTable(dataTable, true);            // autofit width of cells with small content              int columnIndex = 1;            foreach (DataColumn item in dataTable.Columns)            {                ExcelRange columnCells = workSheet.Cells[workSheet.Dimension.Start.Row, columnIndex, workSheet.Dimension.End.Row, columnIndex];                  int maxLength = columnCells.Max(cell =&gt; cell.Value.ToString().Count());                  if (maxLength &lt; 150)                  {                      workSheet.Column(columnIndex).AutoFit();                  }                  columnIndex++;              }            // format header - bold, yellow on black              using (ExcelRange r = workSheet.Cells[startRowFrom, 1, startRowFrom, dataTable.Columns.Count])            {                r.Style.Font.Color.SetColor(System.Drawing.Color.White);                r.Style.Font.Bold = true;                r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;                r.Style.Fill.BackgroundColor.SetColor(System.Drawing.ColorTranslator.FromHtml(&quot;#1fb5ad&quot;));            }            // format cells - add borders              using (ExcelRange r = workSheet.Cells[startRowFrom + 1, 1, startRowFrom + dataTable.Rows.Count, dataTable.Columns.Count])            {                r.Style.Border.Top.Style = ExcelBorderStyle.Thin;                r.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;                r.Style.Border.Left.Style = ExcelBorderStyle.Thin;                r.Style.Border.Right.Style = ExcelBorderStyle.Thin;                r.Style.Border.Top.Color.SetColor(System.Drawing.Color.Black);                r.Style.Border.Bottom.Color.SetColor(System.Drawing.Color.Black);                r.Style.Border.Left.Color.SetColor(System.Drawing.Color.Black);                r.Style.Border.Right.Color.SetColor(System.Drawing.Color.Black);            }            // removed ignored columns              for (int i = dataTable.Columns.Count - 1; i &gt;= 0; i--)            {                if (i == 0 &amp;&amp; showSrNo)                {                    continue;                }                if (!columnsToTake.Contains(dataTable.Columns[i].ColumnName))                {                    workSheet.DeleteColumn(i + 1);                }            }            if (!String.IsNullOrEmpty(heading))            {                workSheet.Cells[&quot;A1&quot;].Value = heading;                workSheet.Cells[&quot;A1&quot;].Style.Font.Size = 20;                workSheet.InsertColumn(1, 1);                workSheet.InsertRow(1, 1);                workSheet.Column(1).Width = 5;            }            result = package.GetAsByteArray();          }        return result;    }    /// &lt;summary&gt;    /// 导出Excel    /// &lt;/summary&gt;    /// &lt;typeparam name=&quot;T&quot;&gt;&lt;/typeparam&gt;    /// &lt;param name=&quot;data&quot;&gt;&lt;/param&gt;    /// &lt;param name=&quot;heading&quot;&gt;&lt;/param&gt;    /// &lt;param name=&quot;isShowSlNo&quot;&gt;&lt;/param&gt;    /// &lt;param name=&quot;ColumnsToTake&quot;&gt;&lt;/param&gt;    /// &lt;returns&gt;&lt;/returns&gt;    public static byte[] ExportExcel&lt;T&gt;(List&lt;T&gt; data, string heading = &quot;&quot;, bool isShowSlNo = false, params string[] ColumnsToTake)    {        return ExportExcel(ListToDataTable&lt;T&gt;(data), heading, isShowSlNo, ColumnsToTake);      }}</code></pre><p>到此为止，后端服务器的代码，基本搞完，现在开始设计我们的前端代码：</p><p>我们创建一个ViewModel，用来显示数据：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class StudentViewModel</span><br><span class="line">&#123;</span><br><span class="line">    public List&lt;Student&gt; ListStudent</span><br><span class="line">    &#123;</span><br><span class="line">        get </span><br><span class="line">        &#123;</span><br><span class="line">            return StaticDataOfStudent.ListStudent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后创建一个控制器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class HomeController : Controller</span><br><span class="line">&#123;</span><br><span class="line">    // GET: Home</span><br><span class="line">    public ActionResult Index()</span><br><span class="line">    &#123;</span><br><span class="line">        StudentViewModel model = new StudentViewModel();</span><br><span class="line">        return View(model);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public FileContentResult ExportToExcel()</span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;Student&gt; lstStudent = StaticDataOfStudent.ListStudent;</span><br><span class="line">        string[] columns = &#123; &quot;ID&quot;, &quot;Name&quot;,&quot;Age&quot;&#125;;</span><br><span class="line">        byte[] filecontent = ExcelExportHelper.ExportExcel(lstStudent,&quot;&quot;, false, columns);</span><br><span class="line">        return File(filecontent, ExcelExportHelper.ExcelContentType, &quot;MyStudent.xlsx&quot;);  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>视图代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@model ExportToExcel.Models.StudentViewModel</span><br><span class="line">@&#123;</span><br><span class="line">    ViewBag.Title = &quot;Excel文件导出&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;panel-heading&quot;&gt;</span><br><span class="line">        &lt;a href=&quot;@Url.Action(&quot;ExportToExcel&quot;)&quot; class=&quot;btn btn-primary&quot;&gt;Export&lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">        &lt;table class=&quot;table table-striped table-bordered&quot;&gt;</span><br><span class="line">            &lt;thead&gt;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;Name&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;Sex&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;Age&lt;/th&gt;</span><br><span class="line">                    &lt;th&gt;Email&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &lt;/thead&gt;</span><br><span class="line">            &lt;tbody&gt;</span><br><span class="line">                @foreach (var item in Model.ListStudent)</span><br><span class="line">                &#123;</span><br><span class="line">                    &lt;tr&gt;</span><br><span class="line">                        &lt;td&gt;@item.ID&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@item.Name&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@item.Sex&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@item.Age&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@item.Email&lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/tbody&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>效果图：<br><img src="/images/mvc/mvc3.png" class="full-image"><br>点击Export之后，就导出了Excel文件到浏览器中：打开之后。<br><img src="/images/mvc/mvc4.png" class="full-image"></p><p>总结：这个导出帮助类，可以定制导出那些列。<br>这里我只是导出这三列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string[] columns = &#123; &quot;ID&quot;, &quot;Name&quot;,&quot;Age&quot;&#125;;</span><br><span class="line">byte[] filecontent = ExcelExportHelper.ExportExcel(lstStudent,&quot;&quot;, false, columns);</span><br><span class="line">return File(filecontent, ExcelExportHelper.ExcelContentType, &quot;MyStudent.xlsx&quot;);</span><br></pre></td></tr></table></figure></p><p>类似资料参考：<a href="http://www.cnblogs.com/liudeyun/p/3535740.html" target="_blank" rel="noopener">http://www.cnblogs.com/liudeyun/p/3535740.html</a></p><div class="note success"><p>本文转自： <a href="http://www.cnblogs.com/caofangsheng/p/6149843.html" target="_blank" rel="noopener">http://www.cnblogs.com/caofangsheng/p/6149843.html</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h1&gt;&lt;p&gt;如何导出数据到Excel文件中，这里我使用的是免费开源的Epplus组件。&lt;br&gt;源代码下载：&lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="Asp.Net Mvc" scheme="http://haimianbao1111.github.io/categories/Asp-Net-Mvc/"/>
    
    
      <category term="Asp.Net Mvc,Excel" scheme="http://haimianbao1111.github.io/tags/Asp-Net-Mvc-Excel/"/>
    
  </entry>
  
  <entry>
    <title>win10 系统win键不能用</title>
    <link href="http://haimianbao1111.github.io/2018/03/02/win10-%E7%B3%BB%E7%BB%9Fwin%E9%94%AE%E4%B8%8D%E8%83%BD%E7%94%A8/"/>
    <id>http://haimianbao1111.github.io/2018/03/02/win10-系统win键不能用/</id>
    <published>2018-03-02T02:23:29.000Z</published>
    <updated>2018-03-02T03:00:28.847Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h1><p>升级Windows10正式版后，还是存在好多问题，最多的问题就是驱动兼容的问题，但今天三皮碰到的这个问题不是驱动问题，而Windows10的一个BUG吧，这个只发生在笔记本电脑上，升级安装Win10后，笔记本触控板没问题，但笔记本键盘失灵没反应、无效不能用。原来我以为是笔记本键盘的驱动兼容问题，所以去查看了笔记本的驱动，一切正常，后来才发现是Windows关机设置中启用快速启动的BUG。</p><p>不管是升级还是全新安装，只要是笔记本电脑，这个项目都是默认勾选上了的。所以导致有些笔记本电脑键盘失效不能用。</p><h1 id="2-解决方法"><a href="#2-解决方法" class="headerlink" title="2.解决方法"></a>2.解决方法</h1><h2 id="在任务栏上点击笔记本特有的电源图标。"><a href="#在任务栏上点击笔记本特有的电源图标。" class="headerlink" title="在任务栏上点击笔记本特有的电源图标。"></a>在任务栏上点击笔记本特有的电源图标。</h2><p><img src="/images/win10/win10-1.png" class="full-image"></p><h2 id="弹出菜单中点击【电源和睡眠设置】。"><a href="#弹出菜单中点击【电源和睡眠设置】。" class="headerlink" title="弹出菜单中点击【电源和睡眠设置】。"></a>弹出菜单中点击【电源和睡眠设置】。</h2><p><img src="/images/win10/win10-2.png" class="full-image"></p><h2 id="在相关设置中选择【其他电脑设置】。"><a href="#在相关设置中选择【其他电脑设置】。" class="headerlink" title="在相关设置中选择【其他电脑设置】。"></a>在相关设置中选择【其他电脑设置】。</h2><p><img src="/images/win10/win10-3.png" class="full-image"></p><h2 id="进入电源选项，点击【选择电源按钮的功能】"><a href="#进入电源选项，点击【选择电源按钮的功能】" class="headerlink" title="进入电源选项，点击【选择电源按钮的功能】"></a>进入电源选项，点击【选择电源按钮的功能】</h2><p><img src="/images/win10/win10-4.png" class="full-image"></p><h2 id="注意，这里需要点击【更改当前不可用的设置】然后下面的选项才可以修改，不然是灰色的点不动。"><a href="#注意，这里需要点击【更改当前不可用的设置】然后下面的选项才可以修改，不然是灰色的点不动。" class="headerlink" title="注意，这里需要点击【更改当前不可用的设置】然后下面的选项才可以修改，不然是灰色的点不动。"></a>注意，这里需要点击【更改当前不可用的设置】然后下面的选项才可以修改，不然是灰色的点不动。</h2><p><img src="/images/win10/win10-5.png" class="full-image"></p><h2 id="这里截出系统原来默认选项，在启用快速启动（推荐）前面是打√的。"><a href="#这里截出系统原来默认选项，在启用快速启动（推荐）前面是打√的。" class="headerlink" title="这里截出系统原来默认选项，在启用快速启动（推荐）前面是打√的。"></a>这里截出系统原来默认选项，在启用快速启动（推荐）前面是打√的。</h2><p><img src="/images/win10/win10-6.png" class="full-image"></p><h2 id="将这个√去掉，然后保存修改。"><a href="#将这个√去掉，然后保存修改。" class="headerlink" title="将这个√去掉，然后保存修改。"></a>将这个√去掉，然后保存修改。</h2><p><img src="/images/win10/win10-7.png" class="full-image"></p><h2 id="现在重启电脑，键盘就可以使用的了。"><a href="#现在重启电脑，键盘就可以使用的了。" class="headerlink" title="现在重启电脑，键盘就可以使用的了。"></a>现在重启电脑，键盘就可以使用的了。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1.概述&quot;&gt;&lt;/a&gt;1.概述&lt;/h1&gt;&lt;p&gt;升级Windows10正式版后，还是存在好多问题，最多的问题就是驱动兼容的问题，但今天三皮碰到的这个问题不是驱动问题，而Wi
      
    
    </summary>
    
      <category term="系统" scheme="http://haimianbao1111.github.io/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="系统" scheme="http://haimianbao1111.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>HTTP协议详解</title>
    <link href="http://haimianbao1111.github.io/2018/02/23/HTTP%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/"/>
    <id>http://haimianbao1111.github.io/2018/02/23/HTTP协议详解/</id>
    <published>2018-02-23T15:49:44.000Z</published>
    <updated>2018-02-23T16:07:58.022Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>当今web程序的开发技术真是百家争鸣，ASP.NET, PHP, JSP，Perl, AJAX 等等。 无论Web技术在未来如何发展，理解Web程序之间通信的基本协议相当重要, 因为它让我们理解了Web应用程序的内部工作. 本文将对HTTP协议进行详细的实例讲解，内容较多，希望大家耐心看。也希望对大家的开发工作或者测试工作有所帮助。使用Fiddler工具非常方便地捕获HTTP Request和HTTP Response,  关于Fiddler工具的用法，请看我另一篇博客<br><a href="http://www.cnblogs.com/TankXiao/archive/2012/02/06/2337728.html" target="_blank" rel="noopener">[Fiddler 教程]</a></p><h1 id="阅读目录"><a href="#阅读目录" class="headerlink" title="阅读目录"></a>阅读目录</h1><h2 id="1-协议详解"><a href="#1-协议详解" class="headerlink" title="1. 协议详解"></a>1. 协议详解</h2><p><a href="http://www.cnblogs.com/TankXiao/archive/2012/02/13/2342672.html" target="_blank" rel="noopener"> HTTP协议 (一) HTTP协议详解</a></p><h2 id="2-基本认证"><a href="#2-基本认证" class="headerlink" title="2.基本认证"></a>2.基本认证</h2><p><a href="">HTTP协议 (二) 基本认证</a></p><h2 id="3-压缩"><a href="#3-压缩" class="headerlink" title="3.压缩"></a>3.压缩</h2><p><a href="">HTTP协议 (三) 压缩</a></p><h2 id="4-缓存"><a href="#4-缓存" class="headerlink" title="4.缓存"></a>4.缓存</h2><p><a href="http://www.cnblogs.com/TankXiao/archive/2012/11/28/2793365.html" target="_blank" rel="noopener">HTTP协议 (四) 缓存</a></p><h2 id="5-代理"><a href="#5-代理" class="headerlink" title="5.代理"></a>5.代理</h2><p><a href="http://www.cnblogs.com/TankXiao/archive/2012/12/12/2794160.html" target="_blank" rel="noopener">HTTP协议 (五) 代理</a></p><h2 id="6-状态码详解"><a href="#6-状态码详解" class="headerlink" title="6.状态码详解"></a>6.状态码详解</h2><p><a href="http://www.cnblogs.com/TankXiao/archive/2013/01/08/2818542.html" target="_blank" rel="noopener">HTTP协议 (六) 状态码详解</a></p><h2 id="7-Cookie"><a href="#7-Cookie" class="headerlink" title="7.Cookie"></a>7.Cookie</h2><p><a href="http://www.cnblogs.com/TankXiao/archive/2013/04/15/2848906.html" target="_blank" rel="noopener">HTTP协议 (七) Cookie</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;当今web程序的开发技术真是百家争鸣，ASP.NET, PHP, JSP，Perl, AJAX 等等。 无论Web技术在未来如何发展，理解W
      
    
    </summary>
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/categories/Asp-Net/"/>
    
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>图片背景自适应</title>
    <link href="http://haimianbao1111.github.io/2018/02/23/%E5%9B%BE%E7%89%87%E8%83%8C%E6%99%AF%E8%87%AA%E9%80%82%E5%BA%94/"/>
    <id>http://haimianbao1111.github.io/2018/02/23/图片背景自适应/</id>
    <published>2018-02-23T12:25:08.000Z</published>
    <updated>2018-02-23T12:27:29.050Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近在做一个项目，要求实现背景自适应，何为背景自适应呢？</p><p>1.如果背景图高度不够，background-size就应该是 auto 100%</p><p>2.如果背景图宽度不够，background-size就应该是100% auto </p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">        &lt;meta name=&quot;viewport&quot; id=&quot;viewport&quot; content=&quot;target-densitydpi=1,width=device-width,user-scalable=no,initial-scale=1,minimum-scale=1&quot; /&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">        &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">            div &#123;</span><br><span class="line">                position: fixed;</span><br><span class="line">                top: 0;</span><br><span class="line">                left: 0;</span><br><span class="line">                bottom: 0;</span><br><span class="line">                right: 0;</span><br><span class="line">                background-image: url(https://bpic.588ku.com/original_origin_min_pic/17/11/28/d2eb2117633c1138cc967a2e7a71ab78.jpg!ww1200);</span><br><span class="line">                background-position: center 0;</span><br><span class="line">                background-repeat: no-repeat;</span><br><span class="line">                background-size: 100% auto;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;div&gt;&lt;/div&gt;</span><br><span class="line">        &lt;script src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">            var bg_auto_size = function(src) &#123;</span><br><span class="line">                var dh = document.documentElement.clientHeight;</span><br><span class="line">                var dw = document.documentElement.clientWidth;</span><br><span class="line">                var img_url = src;</span><br><span class="line">                var img = new Image();</span><br><span class="line">                img.src = img_url;</span><br><span class="line">                img.onload = function() &#123;</span><br><span class="line">                    var dRatio = dw / dh;</span><br><span class="line">                    var imgRatio = img.width / img.height;</span><br><span class="line">                    if(dRatio &lt;= imgRatio) &#123;</span><br><span class="line">                        $(&apos;div&apos;).css(&#123; &apos;background-size&apos;: &apos;auto 100%&apos;, &apos;background-position&apos;: &apos;center 0&apos; &#125;);</span><br><span class="line">                    &#125; else &#123;</span><br><span class="line">                        $(&apos;div&apos;).css(&#123; &apos;background-size&apos;: &apos;100% auto&apos;, &apos;background-position&apos;: &apos;center 0&apos; &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            //这个图片的地址必须是绝对路径，如果用相对路径就会报错，文件识别不出，下面路径是我随便找的，不是实际背景的真实绝对路径</span><br><span class="line">            var bg = &apos;https://bpic.588ku.com/original_origin_min_pic/17/11/28/d2eb2117633c1138cc967a2e7a71ab78.jpg!ww1200&apos;;</span><br><span class="line">            bg_auto_size(bg);</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;最近在做一个项目，要求实现背景自适应，何为背景自适应呢？&lt;/p&gt;
&lt;p&gt;1.如果背景图高度不够，background-size就应该是 au
      
    
    </summary>
    
      <category term="前端" scheme="http://haimianbao1111.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="js,前端" scheme="http://haimianbao1111.github.io/tags/js-%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>.Net Core 学习</title>
    <link href="http://haimianbao1111.github.io/2018/02/14/Net-Core-%E5%AD%A6%E4%B9%A0/"/>
    <id>http://haimianbao1111.github.io/2018/02/14/Net-Core-学习/</id>
    <published>2018-02-14T15:42:07.000Z</published>
    <updated>2018-02-14T15:48:20.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一.概述"></a>一.概述</h1><p>大型分布式互联网架构开发实战（Docker + SSO + TDD + RabbitMQ + Redis + InfluxDb + Grafana + Metrics + 新一代.NET Core on Linux……），屏幕录制讲解+ 微信群解答两种方式，课程简介 ：<br><a href="http://video.jessetalk.cn/course/5" target="_blank" rel="noopener">http://video.jessetalk.cn/course/5</a><br>注册时填写 优惠码 3QK54 可获得50元代金券，相当于298-50=248元：<br><a href="http://video.jessetalk.cn/register?inviteCode=3QK54" target="_blank" rel="noopener">http://video.jessetalk.cn/register?inviteCode=3QK54</a></p><h1 id="二-笔记"><a href="#二-笔记" class="headerlink" title="二.笔记"></a>二.笔记</h1><h2 id="1-正在学习ing"><a href="#1-正在学习ing" class="headerlink" title="1. 正在学习ing"></a>1. 正在学习ing</h2><h2 id="2-略………"><a href="#2-略………" class="headerlink" title="2. 略………"></a>2. 略………</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一-概述&quot;&gt;&lt;a href=&quot;#一-概述&quot; class=&quot;headerlink&quot; title=&quot;一.概述&quot;&gt;&lt;/a&gt;一.概述&lt;/h1&gt;&lt;p&gt;大型分布式互联网架构开发实战（Docker + SSO + TDD + RabbitMQ + Redis + InfluxD
      
    
    </summary>
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/categories/Asp-Net/"/>
    
    
      <category term="Asp.Net,.Net Core" scheme="http://haimianbao1111.github.io/tags/Asp-Net-Net-Core/"/>
    
  </entry>
  
  <entry>
    <title>一些代码记录</title>
    <link href="http://haimianbao1111.github.io/2018/02/14/%E4%B8%80%E4%BA%9B%E4%BB%A3%E7%A0%81%E8%AE%B0%E5%BD%95/"/>
    <id>http://haimianbao1111.github.io/2018/02/14/一些代码记录/</id>
    <published>2018-02-14T04:10:00.000Z</published>
    <updated>2018-03-09T03:05:15.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-int-TryParse"><a href="#1-int-TryParse" class="headerlink" title="1.int.TryParse"></a>1.int.TryParse</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/// &lt;summary&gt;</span><br><span class="line">/// 批量删除</span><br><span class="line">/// &lt;/summary&gt;</span><br><span class="line">/// &lt;param name=&quot;ids&quot;&gt;&lt;/param&gt;</span><br><span class="line">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="line">public ActionResult Delete(string ids)</span><br><span class="line">&#123;</span><br><span class="line">    int success = 0;</span><br><span class="line">    string[] ss = ids.Split(&apos;,&apos;);</span><br><span class="line">    foreach (var item in ss)</span><br><span class="line">    &#123;</span><br><span class="line">        int x;</span><br><span class="line">        if (int.TryParse(item, out x))</span><br><span class="line">        &#123;</span><br><span class="line">            VideoDAL.Delete(x);</span><br><span class="line">            success++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return Content(&quot;成功删除&quot; + success + &quot;条记录！&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-ValidateAntiForgeryToken"><a href="#2-ValidateAntiForgeryToken" class="headerlink" title="2.[ValidateAntiForgeryToken]"></a>2.[ValidateAntiForgeryToken]</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[ValidateAntiForgeryToken]</span><br><span class="line">[HttpPost]</span><br><span class="line">public ActionResult Add(VideoMDL model)</span><br><span class="line">&#123;</span><br><span class="line">    if (model.id == 0)</span><br><span class="line">    &#123;</span><br><span class="line">        VideoDAL.Insert(model);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    VideoDAL.Update(model);</span><br><span class="line">    &#125;</span><br><span class="line">    return Redirect(&quot;/System/VideoManager/&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方法：<a href="https://www.cnblogs.com/hechunming/p/4647646.html" target="_blank" rel="noopener">https://www.cnblogs.com/hechunming/p/4647646.html</a></p><h1 id="3-string-Join-“-”-keys-ToArray"><a href="#3-string-Join-“-”-keys-ToArray" class="headerlink" title="3.string.Join(“,”, keys.ToArray())"></a>3.string.Join(“,”, keys.ToArray())</h1><p>使用方法：<a href="https://www.cnblogs.com/honghong75042/p/7047817.html" target="_blank" rel="noopener">https://www.cnblogs.com/honghong75042/p/7047817.html</a></p><h1 id="4-jquery绑定事件只执行一次"><a href="#4-jquery绑定事件只执行一次" class="headerlink" title="4.jquery绑定事件只执行一次"></a>4.jquery绑定事件只执行一次</h1><h2 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;file&quot; value=&quot;&quot; name=&quot;logo_name&quot; id=&quot;logo_name&quot;/&gt;</span><br><span class="line"></span><br><span class="line">$(document).off(&apos;change&apos;,&apos;#logo_name&apos;).on(&apos;change&apos;,&apos;#logo_name&apos;,function()&#123;</span><br><span class="line">    alert(&quot;ok&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>on是绑定了结点，jquery绑定结点的时候只需绑定一次就行了。不能重复绑定，off是将结点移除，移除完之后在重新绑定，这样就可以解决了change执行一次的问题.</p><h1 id="5-其他技巧"><a href="#5-其他技巧" class="headerlink" title="5.其他技巧"></a>5.其他技巧</h1><h2 id="待补充…"><a href="#待补充…" class="headerlink" title="待补充…"></a>待补充…</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-int-TryParse&quot;&gt;&lt;a href=&quot;#1-int-TryParse&quot; class=&quot;headerlink&quot; title=&quot;1.int.TryParse&quot;&gt;&lt;/a&gt;1.int.TryParse&lt;/h1&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="C#" scheme="http://haimianbao1111.github.io/categories/C/"/>
    
    
      <category term="C#,小技巧" scheme="http://haimianbao1111.github.io/tags/C-%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 使用过程遇到的问题</title>
    <link href="http://haimianbao1111.github.io/2018/02/12/Hexo-%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://haimianbao1111.github.io/2018/02/12/Hexo-使用过程遇到的问题/</id>
    <published>2018-02-12T09:30:40.000Z</published>
    <updated>2018-02-12T09:48:54.606Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="问题描述：-在hexo下新建一个MD文件，出现Template-render-error-unknown-path"><a href="#问题描述：-在hexo下新建一个MD文件，出现Template-render-error-unknown-path" class="headerlink" title="问题描述： 在hexo下新建一个MD文件，出现Template render error: unknown path?"></a>问题描述： 在hexo下新建一个MD文件，出现Template render error: unknown path?</h2><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个是hexo转义时候发生的错误，你文章中可能出现了&#123;&#123;&#125;&#125;，&#123;% %&#125;。你可以将出现的代码，用 `进行注释下就可以了.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;h2 id=&quot;问题描述：-在hexo下新建一个MD文件，出现Template-render-error-unknown-path&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Hexo" scheme="http://haimianbao1111.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://haimianbao1111.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
