<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>艾步罗</title>
  
  <subtitle>一枚90后程序员</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haimianbao1111.github.io/"/>
  <updated>2018-01-28T08:39:10.949Z</updated>
  <id>http://haimianbao1111.github.io/</id>
  
  <author>
    <name>HJY</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sublime Text 常用的快捷键</title>
    <link href="http://haimianbao1111.github.io/2018/01/28/Sublime-Text-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://haimianbao1111.github.io/2018/01/28/Sublime-Text-常用的快捷键/</id>
    <published>2018-01-28T07:32:41.000Z</published>
    <updated>2018-01-28T08:39:10.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sublime-Text-3-快捷键（实用，快速换行等）"><a href="#Sublime-Text-3-快捷键（实用，快速换行等）" class="headerlink" title="Sublime Text 3 快捷键（实用，快速换行等）"></a>Sublime Text 3 快捷键（实用，快速换行等）</h1><h2 id="1-选择类"><a href="#1-选择类" class="headerlink" title="1.选择类"></a>1.选择类</h2><p>Ctrl+D ：选中光标所占的文本，继续操作则会选中下一个相同的文本。<br>Alt+F3：选中文本按下快捷键，即可一次性选择全部的相同文本进行同时编辑。举个栗子：快速选中并更改所有相同的变量名、函数名等。<br>Ctrl+L：选中整行，继续操作则继续选择下一行，效果和 Shift+↓ 效果一样。<br>Ctrl+Shift+L ：先选中多行，再按下快捷键，会在每行行尾插入光标，即可同时编辑这些行。<br>Ctrl+Shift+M：选择括号内的内容（继续选择父括号）。举个栗子：快速选中删除函数中的代码，重写函数体代码或重写括号内里的内容。<br>Ctrl+M：光标移动至括号内结束或开始的位置。<br>Ctrl+Enter：在下一行插入新行。举个例子：即使光标不在行尾，也能快速向下插入一行。<br>Ctrl+Shift+Enter： 在上一行插入新行。举个栗子：即使光标不在行首，也能快速向上插入一行。<br>Ctrl+Shift+[ ：选中代码，按下快捷键，折叠代码。<br>Ctrl+Shift+] ：选中代码，按下快捷键，展开代码。<br>Ctrl+K+0 ：展开所有折叠代码。<br>Ctrl+← ：向左单位性地移动光标，快速移动光标。<br>Ctrl+→ ：向右单位性地移动光标，快速移动光标。<br>shift+↑ ：向上选中多行。<br>shift+↓ ：向下选中多行。<br>Shift+← ：向左选中文本。<br>Shift+→： 向右选中文本。<br>Ctrl+Shift+←：向左单位性地选中文本。<br>Ctrl+Shift+→：向右单位性地选中文本。<br>Ctrl+Shift+↑：将光标所在行和上一行代码互换（将光标所在行插入到上一行之前）。<br>Ctrl+Shift+↓：将光标所在行和下一行代码互换（将光标所在行插入到下一行之后）。<br>Ctrl+Alt+↑：向上添加多行光标，可同时编辑多行。<br>Ctrl+Alt+↓：向下添加多行光标，可同时编辑多行。</p><h2 id="搜索类"><a href="#搜索类" class="headerlink" title="搜索类"></a>搜索类</h2><p>Ctrl+J：合并选中的多行代码为一行。举个栗子：将多行格式的CSS属性合并为一行。<br>Ctrl+Shift+D：复制光标所在整行，插入到下一行。<br>Tab：向右缩进。<br>Shift+Tab：向左缩进。<br>Ctrl+K+K：从光标处开始删除代码至行尾。<br>Ctrl+Shift+K：删除整行。<br>Ctrl+/：注释单行。<br>Ctrl+Shift+/ ：注释多行。<br>Ctrl+K+U：转换大写。<br>Ctrl+K+L：转换小写。<br>Ctrl+Z：撤销。<br>Ctrl+Y：恢复撤销。<br>Ctrl+U：软撤销，感觉和 Gtrl+Z 一样。<br>Ctrl+F2：设置书签<br>Ctrl+T：左右字母互换。<br>F6： 单词检测拼写</p><h2 id="显示类"><a href="#显示类" class="headerlink" title="显示类"></a>显示类</h2><p>Ctrl+Tab：按文件浏览过的顺序，切换当前窗口的标签页。<br>Ctrl+PageDown：向左切换当前窗口的标签页。<br>Ctrl+PageUp： 向右切换当前窗口的标签页。<br>Alt+Shift+1： 窗口分屏，恢复默认1屏（非小键盘的数字）<br>Alt+Shift+2： 左右分屏-2列<br>Alt+Shift+3： 左右分屏-3列<br>Alt+Shift+4： 左右分屏-4列<br>Alt+Shift+5： 等分4屏<br>Alt+Shift+8： 垂直分屏-2屏<br>Alt+Shift+9： 垂直分屏-3屏<br>Ctrl+K+B： 开启/关闭侧边栏。<br>F11： 全屏模式<br>Shift+F11：免打扰模式</p><h1 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h1><h2 id="1-选择一个选中项的下一个匹配项-ctrl-d"><a href="#1-选择一个选中项的下一个匹配项-ctrl-d" class="headerlink" title="1.选择一个选中项的下一个匹配项: ctrl+d"></a>1.选择一个选中项的下一个匹配项: ctrl+d</h2><p>把光标放在一个单词上，按下⌘+ D,将选择这个单词。一直按住⌘且按D多次，将选择当前选中项的下一个匹配项。通过按住⌘,再按D三次,将选择三个相同的文本。<br><img src="/images/sublime/sublime1.gif" class="full-image"> </p><h2 id="2-选择一个选中项的所有匹配项-alt-f3"><a href="#2-选择一个选中项的所有匹配项-alt-f3" class="headerlink" title="2.选择一个选中项的所有匹配项: alt+f3"></a>2.选择一个选中项的所有匹配项: alt+f3</h2><p>和上面一样,但它选择文件中的所有匹配项。小心使用这个,因为它能选择一个文件中的所有匹配项. .<br><img src="/images/sublime/sublime2.gif" class="full-image"></p><h2 id="3-选择与光标关联的开始和结束标签-ctrl-shift-’"><a href="#3-选择与光标关联的开始和结束标签-ctrl-shift-’" class="headerlink" title="3.选择与光标关联的开始和结束标签:  ctrl+shift+’"></a>3.选择与光标关联的开始和结束标签:  ctrl+shift+’</h2><p>这是一个法宝。也许你希望所有属性保持不变,但只是想选择标签。这个快捷键为你这样做,会注意到你可以在一次操作多个标签。<em>需要Emmet插件</em><br><img src="/images/sublime/sublime3.gif" class="full-image"></p><h2 id="4-选择容器内内容-ctrl-shift-a"><a href="#4-选择容器内内容-ctrl-shift-a" class="headerlink" title="4.选择容器内内容: ctrl+shift+a"></a>4.选择容器内内容: ctrl+shift+a</h2><p>如果你把光标放在文本间再按下上面的键将选择文本,就像ctrl+ D。但是再次按下它，将选择父容器,再按,将选择父容器的父容器。<em>需要Emmet插件</em><br><img src="/images/sublime/sublime4.gif" class="full-image"></p><h2 id="5-选择括号内的内容-ctrl-shift-m"><a href="#5-选择括号内的内容-ctrl-shift-m" class="headerlink" title="5.选择括号内的内容: ctrl+shift+m"></a>5.选择括号内的内容: ctrl+shift+m</h2><p>这有助于选择括号之间的一切。同样适用于CSS。<br><img src="/images/sublime/sublime5.gif" class="full-image"></p><h2 id="6-上移或下移行-ctrl-shift-↑-或-↓"><a href="#6-上移或下移行-ctrl-shift-↑-或-↓" class="headerlink" title="6.上移或下移行: ctrl+shift+↑ 或 ↓"></a>6.上移或下移行: ctrl+shift+↑ 或 ↓</h2><p><img src="/images/sublime/sublime6.gif" class="full-image"></p><h2 id="7-复制行或选中项-ctrl-shift-d"><a href="#7-复制行或选中项-ctrl-shift-d" class="headerlink" title="7.复制行或选中项: ctrl+shift+d"></a>7.复制行或选中项: ctrl+shift+d</h2><p>如果你已经选中了文本,它会复制你的选中项。否则,把光标放在行上,会复制整行。<br><img src="/images/sublime/sublime7.gif" class="full-image"></p><h2 id="8-增加和减少缩进-ctrl-或"><a href="#8-增加和减少缩进-ctrl-或" class="headerlink" title="8.增加和减少缩进: ctrl+[ 或 ]"></a>8.增加和减少缩进: ctrl+[ 或 ]</h2><p><img src="/images/sublime/sublime8.gif" class="full-image"></p><h2 id="9-剪切行或选中项-ctrl-x"><a href="#9-剪切行或选中项-ctrl-x" class="headerlink" title="9.剪切行或选中项: ctrl+x"></a>9.剪切行或选中项: ctrl+x</h2><p><img src="/images/sublime/sublime9.gif" class="full-image"></p><h2 id="10-粘贴并保持缩进-ctrl-shift-v"><a href="#10-粘贴并保持缩进-ctrl-shift-v" class="headerlink" title="10.粘贴并保持缩进: ctrl+shift+v"></a>10.粘贴并保持缩进: ctrl+shift+v</h2><p>这是又一个我每次都用的快捷键。在gif中我显示了普通粘贴(ctrl+ V)和缩进粘贴两种效果的对比。注意缩进如何排列。<br><img src="/images/sublime/sublime10.gif" class="full-image"></p><h2 id="11-用标签包裹行或选中项-alt-shift-w"><a href="#11-用标签包裹行或选中项-alt-shift-w" class="headerlink" title="11.用标签包裹行或选中项: alt+shift+w"></a>11.用标签包裹行或选中项: alt+shift+w</h2><p>使用标签包裹一行; 开始输入你想使用的标签,你成功了.<br><img src="/images/sublime/sublime11.gif" class="full-image"></p><h2 id="12-移除未闭合的容器元素-ctrl-shift"><a href="#12-移除未闭合的容器元素-ctrl-shift" class="headerlink" title="12.移除未闭合的容器元素: ctrl+shift+;"></a>12.移除未闭合的容器元素: ctrl+shift+;</h2><p>这会移除与你的光标相关的父标签。对清除标记很有帮助。<br><img src="/images/sublime/sublime12.gif" class="full-image"></p><h2 id="13-计算数学表达式-ctrl-shift-y"><a href="#13-计算数学表达式-ctrl-shift-y" class="headerlink" title="13.计算数学表达式: ctrl+shift+y"></a>13.计算数学表达式: ctrl+shift+y</h2><p>我从未想过我会经常使用这个，但是确实很好用<br><img src="/images/sublime/sublime13.gif" class="full-image"></p><h2 id="14-递增和递减-alt-shift-↑-或-↓，ctrl-↑-或-↓"><a href="#14-递增和递减-alt-shift-↑-或-↓，ctrl-↑-或-↓" class="headerlink" title="14.递增和递减: alt+shift+↑ 或 ↓，ctrl+ ↑ 或 ↓"></a>14.递增和递减: alt+shift+↑ 或 ↓，ctrl+ ↑ 或 ↓</h2><p>按住 ↑ 将以10的步长改变数字, 不按住以1为步长. 同时注意到你不需要选择数字, Sublime Text 足够聪明到更新本行最近的数字.<br><img src="/images/sublime/sublime14.gif" class="full-image"></p><h2 id="15-大写和小写-ctrl-k-u-ctrl-k-l"><a href="#15-大写和小写-ctrl-k-u-ctrl-k-l" class="headerlink" title="15.大写和小写: ctrl+k+u,ctrl+k+l"></a>15.大写和小写: ctrl+k+u,ctrl+k+l</h2><p><img src="/images/sublime/sublime15.gif" class="full-image"></p><h2 id="16-注释选中项-行-ctrl"><a href="#16-注释选中项-行-ctrl" class="headerlink" title="16.注释选中项/行: ctrl+/"></a>16.注释选中项/行: ctrl+/</h2><p>这个在所有语言下都可用, 对行和选中项都可用.<br><img src="/images/sublime/sublime16.gif" class="full-image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sublime-Text-3-快捷键（实用，快速换行等）&quot;&gt;&lt;a href=&quot;#Sublime-Text-3-快捷键（实用，快速换行等）&quot; class=&quot;headerlink&quot; title=&quot;Sublime Text 3 快捷键（实用，快速换行等）&quot;&gt;&lt;/a&gt;Su
      
    
    </summary>
    
      <category term="工具" scheme="http://haimianbao1111.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="http://haimianbao1111.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>MVC使用x.PagedList分页</title>
    <link href="http://haimianbao1111.github.io/2018/01/28/MVC%E4%BD%BF%E7%94%A8x-PagedList%E5%88%86%E9%A1%B5/"/>
    <id>http://haimianbao1111.github.io/2018/01/28/MVC使用x-PagedList分页/</id>
    <published>2018-01-28T07:32:02.000Z</published>
    <updated>2018-01-28T08:51:17.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MVC分页"><a href="#MVC分页" class="headerlink" title="MVC分页"></a>MVC分页</h1><ol><li><p>Nuget安装 X.PagedList和X.PagedList.MVC<br>package.config文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;package id=&quot;X.PagedList&quot; version=&quot;1.24.1.300&quot; targetFramework=&quot;net45&quot; /&gt;</span><br><span class="line">&lt;package id=&quot;X.PagedList.Mvc&quot; version=&quot;4.9.1.310&quot; targetFramework=&quot;net45&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>View界面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@model  PagedList.IPagedList&lt;T&gt;</span><br><span class="line">@using Model</span><br><span class="line">@using PagedList</span><br><span class="line">@using PagedList.Mvc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div style=&quot;text-align: center;&quot;&gt;</span><br><span class="line">    &lt;h1&gt;Mvc分页例子&lt;/h1&gt;</span><br><span class="line">    &lt;table id=&quot;tbList&quot;&gt;</span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">            @if (Model.Count() != 0)</span><br><span class="line">            &#123;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;th style=&quot;width: 60px;&quot;&gt;编号&lt;/th&gt;</span><br><span class="line">                    &lt;th style=&quot;width: 150px;&quot;&gt;创建时间&lt;/th&gt;</span><br><span class="line">                    &lt;th style=&quot;width: 200px;&quot;&gt;标题&lt;/th&gt;</span><br><span class="line">                    &lt;th style=&quot;width: 250px;&quot;&gt;内容&lt;/th&gt;</span><br><span class="line">                    &lt;th style=&quot;width: 80px;&quot;&gt;查看次数&lt;/th&gt;</span><br><span class="line">                    &lt;th style=&quot;width: 180px;&quot;&gt;图片&lt;/th&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">                foreach (var a in Model)</span><br><span class="line">                &#123;</span><br><span class="line">                    &lt;tr style=&quot;text-align: center;&quot;&gt;</span><br><span class="line">                        &lt;td&gt;@a.id&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@a.createtime&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@a.title&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@a.body&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@a.visitnum&lt;/td&gt;</span><br><span class="line">                        &lt;td&gt;@a.img&lt;/td&gt;</span><br><span class="line">                    &lt;/tr&gt;</span><br><span class="line">                &#125;</span><br><span class="line">                &lt;tr&gt;</span><br><span class="line">                    &lt;td colspan=&quot;6&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;pager&quot;&gt;</span><br><span class="line">                            @if (Model != null)</span><br><span class="line">                            &#123;</span><br><span class="line">                                &lt;span style=&quot;height: 20px; line-height: 20px;&quot;&gt;</span><br><span class="line">                                    共 @Model.TotalItemCount.ToString() 条记录，</span><br><span class="line">                                    当前第 @ViewData[&quot;page&quot;] 页/共 @Model.PageCount 页</span><br><span class="line">                                &lt;/span&gt;</span><br><span class="line">                                    @Html.PagedListPager(Model, page =&gt; Url.Action(&quot;TableByChaJ&quot;, new &#123; page &#125;), new PagedListRenderOptions() &#123; LinkToFirstPageFormat = &quot;首页&quot;, LinkToNextPageFormat = &quot;下一页&quot;, LinkToPreviousPageFormat = &quot;上一页&quot;, LinkToLastPageFormat = &quot;末页&quot;, DisplayItemSliceAndTotal = false, MaximumPageNumbersToDisplay = 3 &#125;)</span><br><span class="line">                            &#125;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/td&gt;</span><br><span class="line">                &lt;/tr&gt;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><p>注意：PagedList.IPagedList<t> 中T 改成自己分页的实体类</t></p><ol><li>controller控制器:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public ActionResult ActionName(int? page)</span><br><span class="line">&#123;</span><br><span class="line">    int PageNumber = page ?? 1;//page为null时默认值为1</span><br><span class="line">    int PageSize = 5;</span><br><span class="line">    ViewData[&quot;page&quot;] = PageNumber;</span><br><span class="line">    return View(VideoDAL.GetListPage().ToPagedList(PageNumber, PageSize));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>注意:代码中的list为list<t> 形式，返回视图IPagedList<t> </t></t></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MVC分页&quot;&gt;&lt;a href=&quot;#MVC分页&quot; class=&quot;headerlink&quot; title=&quot;MVC分页&quot;&gt;&lt;/a&gt;MVC分页&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Nuget安装 X.PagedList和X.PagedList.MVC&lt;br&gt;package.co
      
    
    </summary>
    
      <category term="MVC" scheme="http://haimianbao1111.github.io/categories/MVC/"/>
    
    
      <category term="MVC,X.PagedList" scheme="http://haimianbao1111.github.io/tags/MVC-X-PagedList/"/>
    
  </entry>
  
  <entry>
    <title>科学使用 Disqus</title>
    <link href="http://haimianbao1111.github.io/2018/01/23/%E7%A7%91%E5%AD%A6%E4%BD%BF%E7%94%A8-Disqus/"/>
    <id>http://haimianbao1111.github.io/2018/01/23/科学使用-Disqus/</id>
    <published>2018-01-23T13:06:56.000Z</published>
    <updated>2018-01-23T13:13:22.775Z</updated>
    
    <content type="html"><![CDATA[<h1 id="科学使用-Disqus"><a href="#科学使用-Disqus" class="headerlink" title="科学使用 Disqus"></a>科学使用 Disqus</h1><div class="note success"><p>详见： <a href="http://blog.fooleap.org/use-disqus-correctly.html" target="_blank" rel="noopener">http://blog.fooleap.org/use-disqus-correctly.html</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;科学使用-Disqus&quot;&gt;&lt;a href=&quot;#科学使用-Disqus&quot; class=&quot;headerlink&quot; title=&quot;科学使用 Disqus&quot;&gt;&lt;/a&gt;科学使用 Disqus&lt;/h1&gt;&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;详见： &lt;a h
      
    
    </summary>
    
      <category term="Disqus" scheme="http://haimianbao1111.github.io/categories/Disqus/"/>
    
    
      <category term="Disqus" scheme="http://haimianbao1111.github.io/tags/Disqus/"/>
    
  </entry>
  
  <entry>
    <title>Dapper使用</title>
    <link href="http://haimianbao1111.github.io/2018/01/23/dapper%E4%BD%BF%E7%94%A8/"/>
    <id>http://haimianbao1111.github.io/2018/01/23/dapper使用/</id>
    <published>2018-01-23T09:11:06.000Z</published>
    <updated>2018-01-28T09:40:54.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><h2 id="1-连接语句"><a href="#1-连接语句" class="headerlink" title="1.连接语句"></a>1.连接语句</h2><div class="note success"><p>var conn = new SqlConnection(ConfigurationManager.ConnectionStrings[“SqlDiagnosticsDb”].ConnectionString);<br>使用dapper不需要考虑conn是否连接，在执行dapper时自行判断open状态，如果没有打开它会自己打开.</p></div><h2 id="2-insert"><a href="#2-insert" class="headerlink" title="2.insert"></a>2.insert</h2><div class="note success"><p>string query = “INSERT INTO Book(Name)VALUES(@name)”;<br>conn.Execute(query, book);</p><p>book类中有name属性，就可以这样方便去写，当然也可以写成  </p><p>string query = “INSERT INTO Book(Name)VALUES(@name)”;<br>conn.Execute(query,  new{@name=book.name});</p></div><h2 id="3-update"><a href="#3-update" class="headerlink" title="3.update"></a>3.update</h2><div class="note success"><p>string query = “UPDATE Book SET  Name=@name WHERE id =@id”;<br>conn.Execute(query, book);</p></div><h2 id="4-delete"><a href="#4-delete" class="headerlink" title="4.delete"></a>4.delete</h2><div class="note success"><p>string query = “DELETE FROM Book WHERE id = @id”;<br>conn.Execute(query, book);<br>conn.Execute(query, new { id = id });</p></div><h2 id="5-query"><a href="#5-query" class="headerlink" title="5.query"></a>5.query</h2><div class="note success"><p>string query = “SELECT * FROM Book”;<br>//无参数查询，返回列表，带参数查询和之前的参数赋值法相同.<br>conn.Query<book>(query).ToList();</book></p><p>//返回单条信息<br>string query = “SELECT * FROM Book WHERE id = @id”;<br>book = conn.Query<book>(query, new { id = id }).SingleOrDefault();  </book></p></div><h2 id="6-传统sql-in-1-2-3-用dapper就这样写"><a href="#6-传统sql-in-1-2-3-用dapper就这样写" class="headerlink" title="6.传统sql in (1,2,3) 用dapper就这样写"></a>6.传统sql in (1,2,3) 用dapper就这样写</h2><div class="note success"><p>conn.Query<users>(“SELECT * FROM Users s WHERE s.id IN (@ids) “,new { ids = new int[]{1,2,3}})</users></p><p>conn.Query<users>(“SELECT * FROM Users s WHERE s.id IN (@ids) “,new { ids = IDs.ToArray()})<br>在dapper因为安全性，不能直接用sql接接，要采用参数化</users></p></div><h2 id="7-批量插入"><a href="#7-批量插入" class="headerlink" title="7.批量插入"></a>7.批量插入</h2><div class="note success"><p>conn.Execute(@”insert MyTable(colA, colB) values (@a, @b)”, new[] { new { a=1, b=1 }, new { a=2, b=2 }, new { a=3, b=3 } })</p><p>也可以直接写入一个集合<br>conn.Execute(“insert user(name) values(@name)”,users) </p><p>这里users是一个user表的对象集合，可一次把集合中的所有数据插入到数据表中.</p></div><h2 id="8-多表查询"><a href="#8-多表查询" class="headerlink" title="8.多表查询"></a>8.多表查询</h2><div class="note success"><p>//查询图书时，同时查找对应的书评，并存在List中。实现1–n的查询操作<br>string query = “SELECT * FROM Book b LEFT JOIN BookReview br ON br.BookId = b.Id WHERE b.id = @id”;<br>Book lookup = null;<br>//Query<tfirst, tsecond,="" treturn=""><br> var b = conn.Query<book, bookreview,="" book="">(query,<br>　　(book, bookReview) =&gt;<br>　　{<br> 　　　　//扫描第一条记录，判断非空和非重复<br>　　　　if (lookup == null || lookup.Id != book.Id)<br>　　　　　　lookup = book;<br>　　　　//书对应的书评非空，加入当前书的书评List中，最后把重复的书去掉。<br>　　　　if (bookReview != null)<br>　　　　　　lookup.Reviews.Add(bookReview);<br> 　　　　return lookup;<br>　　}, new { id = id }).Distinct().SingleOrDefault();<br>return b;  </book,></tfirst,></p></div><p>多表联合查询是比较麻烦一些，到现在不是完全明白，多看几个例子<br><div class="note success"><p>var sql =  @”select * from Posts p join Users u on u.Id = p.OwnerId Order by p.Id”;<br>var data = conn.Query<post, user,="" post="">(sql, (post, user) =&gt; { post.Owner = user;   return post;}，splitOn：”id”);</post,></p><p>Post类和User类,它们存在外键， conn.Query返回的类型是最后一个参数Post, 其中Post中有一属性Owner是User对象，在(post, user)=&gt;lamda中指定了Owner值，上边的代码中的splitOn是ID，运行时，会从查询结果所有字段列表的最后一个字段开始进行匹配，一直到找到Id这个字段（大小写忽略），找到的第一个ID字段匹配User类的ID属性，那么从ID到最后一个字段都属于User，ID以前的字段都被影射到Post， 通过 (post, user) =&gt; { return post;},把两个类的实例解析出来。</p></div></p><h2 id="9-三表查询，一个是关联主键表（单个对象），一个是关联外键表（集合）。"><a href="#9-三表查询，一个是关联主键表（单个对象），一个是关联外键表（集合）。" class="headerlink" title="9.三表查询，一个是关联主键表（单个对象），一个是关联外键表（集合）。"></a>9.三表查询，一个是关联主键表（单个对象），一个是关联外键表（集合）。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public partial class UserInfo  </span><br><span class="line">&#123;  </span><br><span class="line">    public UserInfo()  </span><br><span class="line">    &#123;  </span><br><span class="line">        this.Persion = new HashSet&lt;Persion&gt;();  </span><br><span class="line">        this.MyTYC = new HashSet&lt;MyTYC&gt;();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    public int id &#123; get; set; &#125;  </span><br><span class="line">    public string name &#123; get; set; &#125;  </span><br><span class="line">    public Nullable&lt;System.DateTime&gt; createTime &#123; get; set; &#125;  </span><br><span class="line">    public Movies Movies &#123; get; set; &#125;  </span><br><span class="line">    public virtual ICollection&lt;MyTYC&gt; MyTYC &#123; get; set; &#125;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">public class Movies  </span><br><span class="line">&#123;  </span><br><span class="line">    public int ID &#123; get; set; &#125;  </span><br><span class="line">    public string Title &#123; get; set; &#125;  </span><br><span class="line">    public string ReleaseDate &#123; get; set; &#125;  </span><br><span class="line">    public string Genre &#123; get; set; &#125;  </span><br><span class="line">    public string Price &#123; get; set; &#125;  </span><br><span class="line">    public UserInfo UserInfo &#123; get; set; &#125;    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">public partial class MyTYC  </span><br><span class="line">&#123;  </span><br><span class="line">    public int id &#123; get; set; &#125;  </span><br><span class="line">    public string name &#123; get; set; &#125;        </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">string sql = @&quot;select * from UserInfo u   </span><br><span class="line">inner join [Movies].dbo.Movies m on u.id=m.ID   </span><br><span class="line">inner join MyTYC t on u.id=t.id&quot;;  </span><br><span class="line">            var data = conn.Query&lt;UserInfo, Movies, MyTYC, UserInfo&gt;(sql, (u, m, t) =&gt; &#123; u.Movies = m; u.MyTYC.Add(t); return u; &#125;);</span><br></pre></td></tr></table></figure><p>注意这里的对象和集合的获取方法：u.Movies = m; u.MyTYC.Add(t);</p><h2 id="10-多结果查询"><a href="#10-多结果查询" class="headerlink" title="10.多结果查询"></a>10.多结果查询</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">var sql = @&quot;select * from Customers where CustomerId = @id;</span><br><span class="line"> select * from Orders where CustomerId = @id;</span><br><span class="line"> select * from Returns where CustomerId = @id&quot;;</span><br><span class="line"></span><br><span class="line"> using (var multi = connection.QueryMultiple(sql, new &#123;id=selectedId&#125;))</span><br><span class="line"> &#123;</span><br><span class="line">        var customer = multi.Read&lt;Customer&gt;().Single();    </span><br><span class="line">        var orders = multi.Read&lt;Order&gt;().ToList();</span><br><span class="line">        var returns = multi.Read&lt;Return&gt;().ToList();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>再来一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">class Program  </span><br><span class="line">   &#123;  </span><br><span class="line"> </span><br><span class="line">       //创建连接对象  </span><br><span class="line">       protected static SqlConnection GetConnection()  </span><br><span class="line">       &#123;  </span><br><span class="line">           var connection = new SqlConnection(&quot;Data Source=.;Initial Catalog=TestDB;Integrated Security=True&quot;);  </span><br><span class="line">           connection.Open();  </span><br><span class="line">           return connection;  </span><br><span class="line">       &#125;  </span><br><span class="line"> </span><br><span class="line">       static void Main(string[] args)  </span><br><span class="line">       &#123;  </span><br><span class="line">           //测试输出多个结果集  </span><br><span class="line">           var sql = @&quot;INSERT INTO [dbo].[Student] ([Name]) VALUES (&apos;A1&apos;); select @@IDENTITY as A;  </span><br><span class="line">                       INSERT INTO [dbo].[Student] ([Name]) VALUES (&apos;B1&apos;); select @@IDENTITY as A;  </span><br><span class="line">                       INSERT INTO [dbo].[Student] ([Name]) VALUES (&apos;C1&apos;); select @@IDENTITY as A&quot;;  </span><br><span class="line"> </span><br><span class="line">           //初始化数据库连接  </span><br><span class="line">           using (SqlConnection connection = GetConnection())  </span><br><span class="line">           &#123;                  </span><br><span class="line">               List&lt;int&gt; ilist = new List&lt;int&gt;();  </span><br><span class="line">               //执行查询，获取结果集集合  </span><br><span class="line">               var multi = connection.QueryMultiple(sql);  </span><br><span class="line"> </span><br><span class="line">               //遍历结果集  </span><br><span class="line">               while(!multi.IsConsumed)  </span><br><span class="line">               &#123;  </span><br><span class="line">                   //读取当前结果集  </span><br><span class="line">                   var result = multi.Read().ToList()[0].A;  </span><br><span class="line">                   if (result != null)  </span><br><span class="line">                   &#123;  </span><br><span class="line">                       ilist.Add(Convert.ToInt32(result));  </span><br><span class="line">                   &#125;  </span><br><span class="line">               &#125;  </span><br><span class="line">               //for(int i = 0;i&lt;3;i++)  </span><br><span class="line">               //&#123;  </span><br><span class="line">               //    var result = multi.Read().ToList()[0].A;  </span><br><span class="line">               //    if (result != null)  </span><br><span class="line">               //    &#123;  </span><br><span class="line">               //        ilist.Add(Convert.ToInt32(result));  </span><br><span class="line">               //    &#125;  </span><br><span class="line">               //&#125;  </span><br><span class="line">               foreach (var item in ilist)  </span><br><span class="line">               &#123;  </span><br><span class="line">                   Console.WriteLine(item.ToString());  </span><br><span class="line">               &#125;  </span><br><span class="line">           &#125;  </span><br><span class="line">           Console.ReadLine();  </span><br><span class="line">       &#125;  </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="11-支持存储过程"><a href="#11-支持存储过程" class="headerlink" title="11.支持存储过程"></a>11.支持存储过程</h2><div class="note success"><p>USE [Datamip]<br>GO<br>/<strong>**</strong> Object:  StoredProcedure [dbo].[sp_GetUsers]    Script Date: 09/02/2016 09:14:04 <strong>**</strong>/<br>SET ANSI_NULLS ON<br>GO<br>SET QUOTED_IDENTIFIER ON<br>GO<br>Create proc [dbo].[sp_GetUsers]<br> @id int<br>as<br>begin<br>select * from Users where UserID = @id ;<br>end</p><p>在这里，我们需要向存储过程塞入一个@id参数，返回具体的Users EntityList，好了，下面再看一下Query如何构造。</p><p>static void Main(string[] args)<br>{<br>    var connection = new SqlConnection(“Data Source=.;Initial Catalog=Datamip;Integrated Security=True;MultipleActiveResultSets=True”);<br>    var info = connection.Query<users>(“sp_GetUsers”, new { id = 5 },<br>               commandType: CommandType.StoredProcedure);<br>}</users></p></div><h2 id="12-如果某一代码中多次操作数据库，可以把conn设置为打开，最后时再close"><a href="#12-如果某一代码中多次操作数据库，可以把conn设置为打开，最后时再close" class="headerlink" title="12.如果某一代码中多次操作数据库，可以把conn设置为打开，最后时再close."></a>12.如果某一代码中多次操作数据库，可以把conn设置为打开，最后时再close.</h2><div class="note success"><p>conn.open()<br>conn.Query(…..<br>…..<br>for….<br>…..<br>conn.close()</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本使用&quot;&gt;&lt;a href=&quot;#基本使用&quot; class=&quot;headerlink&quot; title=&quot;基本使用&quot;&gt;&lt;/a&gt;基本使用&lt;/h1&gt;&lt;h2 id=&quot;1-连接语句&quot;&gt;&lt;a href=&quot;#1-连接语句&quot; class=&quot;headerlink&quot; title=&quot;1.连接语
      
    
    </summary>
    
      <category term="ORM" scheme="http://haimianbao1111.github.io/categories/ORM/"/>
    
    
      <category term="ORM" scheme="http://haimianbao1111.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>使用.NET 反射机制(Reflecttion)读取和保存Xml配置文档</title>
    <link href="http://haimianbao1111.github.io/2018/01/23/%E4%BD%BF%E7%94%A8-NET-%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6-Reflecttion-%E8%AF%BB%E5%8F%96%E5%92%8C%E4%BF%9D%E5%AD%98Xml%E9%85%8D%E7%BD%AE%E6%96%87%E6%A1%A3/"/>
    <id>http://haimianbao1111.github.io/2018/01/23/使用-NET-反射机制-Reflecttion-读取和保存Xml配置文档/</id>
    <published>2018-01-23T05:10:03.000Z</published>
    <updated>2018-01-23T06:32:56.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h1><div class="note class_name"><p> 定义个一个接口：<br>undefined</p><p>将其编译成DLL文件，供其他程序引用。  </p><p>插件必须编译成DLL文件，可包含多个类，类可以是窗体类型，也可以是控制台类型的。<br>类必须实现上面的接口。  </p><p>主程序负责显示插件信息，并运行插件。  </p><p>主程序会生成XML格式的配置文件，使下次访问加快。  </p><p>下载：<a href="http://download.csdn.net/download/rightmin/810378" target="_blank" rel="noopener">http://download.csdn.net/download/rightmin/810378</a>  </p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原文链接：&quot;&gt;&lt;a href=&quot;#原文链接：&quot; class=&quot;headerlink&quot; title=&quot;原文链接：&quot;&gt;&lt;/a&gt;原文链接：&lt;/h1&gt;&lt;div class=&quot;note class_name&quot;&gt;&lt;p&gt; 定义个一个接口：&lt;br&gt;undefined&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/categories/Asp-Net/"/>
    
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>Dapper的增、删、查改的CodeSmith模板</title>
    <link href="http://haimianbao1111.github.io/2018/01/23/dapper%E7%9A%84%E5%A2%9E%E3%80%81%E5%88%A0%E3%80%81%E6%9F%A5%E6%94%B9%E7%9A%84CodeSmith%E6%A8%A1%E6%9D%BF/"/>
    <id>http://haimianbao1111.github.io/2018/01/23/dapper的增、删、查改的CodeSmith模板/</id>
    <published>2018-01-23T05:03:50.000Z</published>
    <updated>2018-01-28T09:04:06.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CodeSmith模板"><a href="#CodeSmith模板" class="headerlink" title="CodeSmith模板"></a>CodeSmith模板</h1><p>访问量不大的项目我都是用EF写数据库操作，因为EF除了速度上慢以外，但开发效率极快，省略了很多sql写法，并能很方便的调用外键、集合等信息，用EF写项目最爽的事。不过有些项目网站要考虑运行速度，这时不得不用其它的ORM框架，我常用dapper，因为它效果快，而且写sql非常灵活.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ Template Language=&quot;C#&quot; TargetLanguage=&quot;Text&quot; %&gt;</span><br><span class="line">&lt;%@ Property Name=&quot;BaseNamespace&quot; Type=&quot;String&quot; %&gt;</span><br><span class="line">&lt;%@ Property Name=&quot;SourceDatabase&quot; Type=&quot;SchemaExplorer.DatabaseSchema&quot; Category=&quot;Context&quot; Description=&quot;Database that the documentation should be based on.&quot; %&gt;</span><br><span class="line">&lt;%-- 要打印的表 --%&gt;</span><br><span class="line">&lt;%@ Property Name=&quot;Table&quot; Type=&quot;TableSchema&quot; DeepLoad=&quot;True&quot; Optional=&quot;False&quot; Category=&quot;Context&quot; Description=&quot;&quot; %&gt;</span><br><span class="line">  </span><br><span class="line">&lt;%@ Assembly Name=&quot;SchemaExplorer&quot; %&gt;</span><br><span class="line">&lt;%@ Assembly Name=&quot;System.Design&quot; %&gt;</span><br><span class="line">&lt;%@ Import Namespace=&quot;SchemaExplorer&quot; %&gt;</span><br><span class="line">  </span><br><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using &lt;%=BaseNamespace%&gt;.Model;</span><br><span class="line">using Dapper;</span><br><span class="line">using MayHuan.Data;</span><br><span class="line">using System.Collections;</span><br><span class="line">  </span><br><span class="line">namespace &lt;%=BaseNamespace%&gt;.Services</span><br><span class="line">&#123;</span><br><span class="line">    public class &lt;%= Table.Name%&gt;Service:I&lt;%= Table.Name%&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        public bool Delete(M&lt;%= Table.Name%&gt; model)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var conn = DBCommon.GetConn())</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                var a = conn.Execute(@&quot;Delete from &lt;%= Table.Name%&gt; where OID=@OID&quot;, new &#123; OID = model.OID &#125;);</span><br><span class="line">                conn.Close();</span><br><span class="line">                return a &gt; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        public bool Insert(M&lt;%= Table.Name%&gt; model)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var conn = DBCommon.GetConn())</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                var a = conn.Execute(@&quot;INSERT INTO &lt;%= Table.Name%&gt;</span><br><span class="line">        &lt;%</span><br><span class="line">        System.Text.StringBuilder sbSql=new System.Text.StringBuilder();</span><br><span class="line">        %&gt;</span><br><span class="line">      &lt;%</span><br><span class="line">         </span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                sbSql.AppendLine(col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      %&gt;</span><br><span class="line">      (&lt;%=sbSql.ToString().Trim(&apos;\r&apos;,&apos;\n&apos;,&apos;,&apos;) %&gt;)</span><br><span class="line">      VALUES</span><br><span class="line">        &lt;%</span><br><span class="line">        sbSql.Clear();</span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                 sbSql.AppendLine(&quot;@&quot;+col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        (&lt;%=sbSql.ToString().Trim(&apos;\r&apos;,&apos;\n&apos;,&apos;,&apos;) %&gt;)&quot;,</span><br><span class="line">        &lt;%</span><br><span class="line">        sbSql.Clear();</span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                sbSql.Append(col.Name+&quot; = model.&quot;+col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        new &#123; &lt;%=sbSql.ToString().Trim(&apos;,&apos;) %&gt; &#125;);</span><br><span class="line">                conn.Close();</span><br><span class="line">                return a &gt; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        public bool Update(M&lt;%= Table.Name%&gt; model)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var conn = DBCommon.GetConn())</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                var a = conn.Execute(@&quot;UPDATE &lt;%= Table.Name%&gt; SET</span><br><span class="line">        &lt;%</span><br><span class="line">        sbSql.Clear();</span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                sbSql.AppendLine(col.Name+&quot;=@&quot;+col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      %&gt;</span><br><span class="line"> &lt;%=sbSql.ToString().Trim(&apos;\r&apos;,&apos;\n&apos;,&apos;,&apos;) %&gt; </span><br><span class="line"> WHERE OID=@OID&quot;,</span><br><span class="line">        &lt;%</span><br><span class="line">        sbSql.Clear();</span><br><span class="line">        foreach(ColumnSchema col in Table.Columns)&#123;</span><br><span class="line">            if(!col.IsPrimaryKeyMember)&#123;</span><br><span class="line">                sbSql.Append(col.Name+&quot; = model.&quot;+col.Name+&quot;,&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        %&gt;</span><br><span class="line">        new &#123; &lt;%=sbSql.ToString().Trim(&apos;,&apos;) %&gt;,OID = model.OID &#125;);</span><br><span class="line">                conn.Close();</span><br><span class="line">                return a &gt; 0;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        public M&lt;%= Table.Name%&gt; GetModelByID(int id)</span><br><span class="line">        &#123;</span><br><span class="line">            using (var conn = DBCommon.GetConn())</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                var a = conn.Query&lt;M&lt;%= Table.Name%&gt;&gt;(@&quot;select * from &lt;%= Table.Name%&gt; where OID=@OID&quot;, new &#123; OID =id &#125;).FirstOrDefault();</span><br><span class="line">                conn.Close();</span><br><span class="line">                return a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        public Model.PageDataView&lt;M&lt;%= Table.Name%&gt;&gt; GetList(string companyName, int pageNum, int pageSize = 10)</span><br><span class="line">        &#123;</span><br><span class="line">            var criteria = new PageCriteria();</span><br><span class="line">            criteria.CurrentPage = pageNum;</span><br><span class="line">            criteria.Fields = &quot;a.*&quot;;</span><br><span class="line">            criteria.PageSize = pageSize;</span><br><span class="line">            criteria.PrimaryKey = &quot;a.OID&quot;;</span><br><span class="line">            criteria.TableName = @&quot;&lt;%= Table.Name%&gt; a&quot;;</span><br><span class="line">             </span><br><span class="line">            string sqlFilter = &quot;1=1&quot;;</span><br><span class="line">            if (!string.IsNullOrEmpty(companyName))</span><br><span class="line">                sqlFilter += string.Format(&quot; and b.CompanyName like &apos;%&#123;0&#125;%&apos;&quot;, companyName);</span><br><span class="line">            criteria.Condition += sqlFilter;</span><br><span class="line">             </span><br><span class="line">            var r = DBCommon.GetPageData&lt;M&lt;%= Table.Name%&gt;&gt;(criteria);</span><br><span class="line">  </span><br><span class="line">            return r;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CodeSmith模板&quot;&gt;&lt;a href=&quot;#CodeSmith模板&quot; class=&quot;headerlink&quot; title=&quot;CodeSmith模板&quot;&gt;&lt;/a&gt;CodeSmith模板&lt;/h1&gt;&lt;p&gt;访问量不大的项目我都是用EF写数据库操作，因为EF除了速度上慢以外，
      
    
    </summary>
    
      <category term="ORM" scheme="http://haimianbao1111.github.io/categories/ORM/"/>
    
    
      <category term="ORM" scheme="http://haimianbao1111.github.io/tags/ORM/"/>
    
  </entry>
  
  <entry>
    <title>Asp.Net 用支付宝沙箱环境测试支付接口</title>
    <link href="http://haimianbao1111.github.io/2018/01/21/asp-net-%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E7%8E%AF%E5%A2%83%E6%B5%8B%E8%AF%95%E6%94%AF%E4%BB%98%E6%8E%A5%E5%8F%A3/"/>
    <id>http://haimianbao1111.github.io/2018/01/21/asp-net-用支付宝沙箱环境测试支付接口/</id>
    <published>2018-01-21T13:44:09.000Z</published>
    <updated>2018-01-28T09:07:10.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="沙箱环境的配置"><a href="#沙箱环境的配置" class="headerlink" title="沙箱环境的配置"></a>沙箱环境的配置</h1><h2 id="1-注册成为开发人员"><a href="#1-注册成为开发人员" class="headerlink" title="1.注册成为开发人员"></a>1.注册成为开发人员</h2><div class="note info"><p>注册成功以后，点击以下链接，进入到支付宝官方的沙箱环境说明：<a href="https://docs.open.alipay.com/200/10531" target="_blank" rel="noopener">https://docs.open.alipay.com/200/10531</a> </p></div><p><img src="/images/alipay/支付宝.png" class="full-image">  </p><h2 id="2-沙箱介绍"><a href="#2-沙箱介绍" class="headerlink" title="2.沙箱介绍"></a>2.沙箱介绍</h2><div class="note info"><p>然后点击上图中的沙箱环境，跳转到自己的沙箱环境，配置自己的沙箱环境 。 </p></div><img src="/images/alipay/沙箱应用.png" class="full-image">  ## 3.秘钥<div class="note info"><p> 至于公钥秘钥的生成，点击 <a href="https://docs.open.alipay.com/291/105971" target="_blank" rel="noopener">https://docs.open.alipay.com/291/105971</a> 下载生成RSA密钥的工具，操作视频可以搜索该链接：<a href="https://openclub.alipay.com/index.php?c=video&amp;fid=76" target="_blank" rel="noopener">https://openclub.alipay.com/index.php?c=video&amp;fid=76</a> 查看生成秘钥的具体操作步骤。<br>重点是秘钥长度一定要是2048，一定要是2048.当时我测试的时候，生成的1024的，验签通过，但是一上传就提示失败。可见再牛逼的网站也是有bug的。  </p></div><h2 id="4-下载支付宝支付demo"><a href="#4-下载支付宝支付demo" class="headerlink" title="4.下载支付宝支付demo"></a>4.下载支付宝支付demo</h2><div class="note info"><p>  打开demo，把配置里面的配置改成自己沙箱账号的配置。<br>支付宝支付demo下载的链接：<a href="https://docs.open.alipay.com/54/106682/" target="_blank" rel="noopener">https://docs.open.alipay.com/54/106682/</a><br>把配置文件里面的配置改成沙箱 </p></div><p><img src="/images/alipay/代码网关设置.png" class="full-image">  </p><h2 id="5-下载沙箱钱包"><a href="#5-下载沙箱钱包" class="headerlink" title="5.下载沙箱钱包"></a>5.下载沙箱钱包</h2><div class="note info"><p>进行支付测试，注意不是支付宝哦，详细查看文说明档。，目前沙箱钱包仅提供Android版本，可点击 <a href="https://sandbox.alipaydev.com/user/downloadApp.htm" class="font-color:red" target="_blank" rel="noopener">下载</a></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;沙箱环境的配置&quot;&gt;&lt;a href=&quot;#沙箱环境的配置&quot; class=&quot;headerlink&quot; title=&quot;沙箱环境的配置&quot;&gt;&lt;/a&gt;沙箱环境的配置&lt;/h1&gt;&lt;h2 id=&quot;1-注册成为开发人员&quot;&gt;&lt;a href=&quot;#1-注册成为开发人员&quot; class=&quot;head
      
    
    </summary>
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/categories/Asp-Net/"/>
    
    
      <category term="Asp.Net" scheme="http://haimianbao1111.github.io/tags/Asp-Net/"/>
    
  </entry>
  
  <entry>
    <title>前端静态文件如何应对HTTPS的到来</title>
    <link href="http://haimianbao1111.github.io/2018/01/18/%E5%89%8D%E7%AB%AF%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9HTTPS%E7%9A%84%E5%88%B0%E6%9D%A5/"/>
    <id>http://haimianbao1111.github.io/2018/01/18/前端静态文件如何应对HTTPS的到来/</id>
    <published>2018-01-17T17:26:30.000Z</published>
    <updated>2018-01-18T14:33:04.510Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h1><div class="note class_name"><p><a href="https://www.cnblogs.com/webARM/p/5728695.html" target="_blank" rel="noopener">https://www.cnblogs.com/webARM/p/5728695.html</a></p></div><p><div id="container"></div></p><p><link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"></p><script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script><script>var gitment = new Gitment({    owner: 'haimianbao1111',    repo: '2018/01/18/前端静态文件如何应对HTTPS的到来',    oauth: {      client_id: '24f4cb2732b2cd293c3c',      client_secret: '54ad1cb8fc1bbab13871b8b9dd01004340aceca0',    },  })gitment.render('container')</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原文链接：&quot;&gt;&lt;a href=&quot;#原文链接：&quot; class=&quot;headerlink&quot; title=&quot;原文链接：&quot;&gt;&lt;/a&gt;原文链接：&lt;/h1&gt;&lt;div class=&quot;note class_name&quot;&gt;&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.
      
    
    </summary>
    
      <category term="前端" scheme="http://haimianbao1111.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="tags" scheme="http://haimianbao1111.github.io/tags/tags/"/>
    
  </entry>
  
  <entry>
    <title>搭建评论系统</title>
    <link href="http://haimianbao1111.github.io/2018/01/18/%E6%90%AD%E5%BB%BA%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/"/>
    <id>http://haimianbao1111.github.io/2018/01/18/搭建评论系统/</id>
    <published>2018-01-17T16:20:07.000Z</published>
    <updated>2018-01-28T10:12:31.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h1><div class="note success"><p>Gitment 是作者实现的一款基于 GitHub Issues 的评论系统。支持在前端直接引入，不需要任何后端代码。可以在页面进行登录、查看、评论、点赞等操作，同时有完整的 Markdown / GFM 和代码高亮支持。尤为适合各种基于 GitHub Pages 的静态博客或项目页面。</p></div><h2 id="1-注册-OAuth-Application"><a href="#1-注册-OAuth-Application" class="headerlink" title="1. 注册 OAuth Application"></a>1. 注册 OAuth Application</h2><p><a href="https://github.com/settings/applications/new" target="_blank" rel="external">点击此处</a> 来注册一个新的 OAuth Application。其他内容可以随意填写，但要确保填入正确的 callback URL（一般是评论页面对应的域名，如 <a href="https://imsun.net" target="_blank" rel="noopener">https://imsun.net</a>  ）。</p><p>你会得到一个 client ID 和一个 client secret，这个将被用于之后的用户登录。</p><h2 id="2-引入-Gitment"><a href="#2-引入-Gitment" class="headerlink" title="2. 引入 Gitment"></a>2. 引入 Gitment</h2><p>将下面的代码添加到你的页面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;https://imsun.github.io/gitment/style/default.css&quot;&gt;</span><br><span class="line">&lt;script src=&quot;https://imsun.github.io/gitment/dist/gitment.browser.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var gitment = new Gitment(&#123;</span><br><span class="line">  id: &apos;页面 ID&apos;, // 可选。默认为 location.href</span><br><span class="line">  owner: &apos;你的 GitHub ID&apos;,</span><br><span class="line">  repo: &apos;存储评论的 repo&apos;,</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    client_id: &apos;你的 client ID&apos;,</span><br><span class="line">    client_secret: &apos;你的 client secret&apos;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(&apos;container&apos;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>注意，上述代码引用的 Gitment 将会随着开发变动。如果你希望始终使用最新的界面与特性即可引入上述代码。</p><p>如果你希望引用确定版本的 Gitment，则应该使用 npm 进行安装。<br><div class="note class_name"><p>$ npm install –save gitment</p></div></p><h2 id="3-初始化评论"><a href="#3-初始化评论" class="headerlink" title="3. 初始化评论"></a>3. 初始化评论</h2><p>页面发布后，你需要访问页面并使用你的 GitHub 账号登录（请确保你的账号是第二步所填 repo 的 owner），点击初始化按钮。</p><p>之后其他用户即可在该页面发表评论。</p><h1 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h1><p>Gitment 很容易进行自定义，你可以写一份自定义的 CSS 或者使用一个新的主题。（主题可以改变 DOM 结构而自定义 CSS 不能）</p><p>比如你可以通过自定义主题将评论框放在评论列表前面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const myTheme = &#123;</span><br><span class="line">  render(state, instance) &#123;</span><br><span class="line">    const container = document.createElement(&apos;div&apos;)</span><br><span class="line">    container.lang = &quot;en-US&quot;</span><br><span class="line">    container.className = &apos;gitment-container gitment-root-container&apos;</span><br><span class="line">    container.appendChild(instance.renderHeader(state, instance))</span><br><span class="line">    container.appendChild(instance.renderEditor(state, instance))</span><br><span class="line">    container.appendChild(instance.renderComments(state, instance))</span><br><span class="line">    container.appendChild(instance.renderFooter(state, instance))</span><br><span class="line">    return container</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">const gitment = new Gitment(&#123;</span><br><span class="line">  // ...</span><br><span class="line">  theme: myTheme,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(&apos;container&apos;)</span><br></pre></td></tr></table></figure></p><h1 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h1><div class="note class_name"><p><a href="https://imsun.net/posts/gitment-introduction/" target="_blank" rel="noopener">https://imsun.net/posts/gitment-introduction/</a></p></div><p><div id="container"></div></p><p><link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"></p><script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script><script>var gitment = new Gitment({    owner: 'haimianbao1111',    repo: '2018/01/18/搭建评论系统',    oauth: {      client_id: '24f4cb2732b2cd293c3c',      client_secret: '54ad1cb8fc1bbab13871b8b9dd01004340aceca0',    },  })gitment.render('container')</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基础使用&quot;&gt;&lt;a href=&quot;#基础使用&quot; class=&quot;headerlink&quot; title=&quot;基础使用&quot;&gt;&lt;/a&gt;基础使用&lt;/h1&gt;&lt;div class=&quot;note success&quot;&gt;&lt;p&gt;Gitment 是作者实现的一款基于 GitHub Issues 的评论
      
    
    </summary>
    
      <category term="GitHub Issues" scheme="http://haimianbao1111.github.io/categories/GitHub-Issues/"/>
    
    
      <category term="tags" scheme="http://haimianbao1111.github.io/tags/tags/"/>
    
  </entry>
  
  <entry>
    <title>初探-Hexo</title>
    <link href="http://haimianbao1111.github.io/2018/01/16/%E5%88%9D%E6%8E%A2-Hexo/"/>
    <id>http://haimianbao1111.github.io/2018/01/16/初探-Hexo/</id>
    <published>2018-01-16T14:52:08.000Z</published>
    <updated>2018-01-28T10:16:05.191Z</updated>
    
    <content type="html"><![CDATA[<p>使用Hexo+Github一步步搭建属于自己的博客</p><h1 id="相关步骤："><a href="#相关步骤：" class="headerlink" title="相关步骤："></a>相关步骤：</h1><h2 id="1-安装Node-js和配置好Node-js环境，打开cmd命令行，成功界面如下"><a href="#1-安装Node-js和配置好Node-js环境，打开cmd命令行，成功界面如下" class="headerlink" title="1.安装Node.js和配置好Node.js环境，打开cmd命令行，成功界面如下"></a>1.安装Node.js和配置好Node.js环境，打开cmd命令行，成功界面如下</h2><p><img src="/images/hexo/hexo1.png" class="full-image"></p><h2 id="2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择"><a href="#2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择" class="headerlink" title="2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择"></a>2、安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择</h2><p><img src="/images/hexo/hexo2.png" class="full-image"><br>注意：一般出于安全考虑，只有在Git Bash Here中才能进行Git的相关操作。如果需要在cmd命令行里调用Git，那么就要配置电脑的环境变量Path，或者在安装的时候选择use Git from the Windows Command Prompt。这个可有可无，影响不大，成功配置的界面如图<br><img src="/images/hexo/hexo3.png" class="full-image"></p><h2 id="3、Github账户注册和新建项目，项目必须要遵守格式：账户名-github-io，不然接下来会有很多麻烦。并且需要勾选Initialize-this-repository-with-a-README"><a href="#3、Github账户注册和新建项目，项目必须要遵守格式：账户名-github-io，不然接下来会有很多麻烦。并且需要勾选Initialize-this-repository-with-a-README" class="headerlink" title="3、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README"></a>3、Github账户注册和新建项目，项目必须要遵守格式：账户名.github.io，不然接下来会有很多麻烦。并且需要勾选Initialize this repository with a README</h2><p><img src="/images/hexo/hexo4.png" class="full-image"><br>在建好的项目右侧有个settings按钮，点击它，向下拉到GitHub Pages，你会看到那边有个网址，访问它，你将会惊奇的发现该项目已经被部署到网络上，能够通过外网来访问它。<br><img src="/images/hexo/hexo5.png" class="full-image"></p><h2 id="4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面"><a href="#4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面" class="headerlink" title="4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面"></a>4、安装Hexo，在自己认为合适的地方创个文件夹，我是在D盘建了一个blog文件夹。然后通过命令行进入到该文件夹里面</h2><p><img src="/images/hexo/hexo6.png" class="full-image"><br>输入npm install hexo -g，开始安装Hexo<br><img src="/images/hexo/hexo7.png" class="full-image"><br>输入hexo -v，检查hexo是否安装成功<br><img src="/images/hexo/hexo8.png" class="full-image"><br>输入hexo init，初始化该文件夹（有点漫长的等待。。。）<br><img src="/images/hexo/hexo9.png" class="full-image"><br><img src="/images/hexo/hexo10.png" class="full-image"><br>看到后面的“Start blogging with Hexo！”，激动有木有！！！！！</p><p>输入npm install，安装所需要的组件<br><img src="/images/hexo/hexo11.png" class="full-image"><br>输入hexo g，首次体验Hexo<br><img src="/images/hexo/hexo12.png" class="full-image"><br>输入hexo s，开启服务器，访问该网址，正式体验Hexo<br><img src="/images/hexo/hexo13.png" class="full-image"><br>问题：假如页面一直无法跳转，那么可能端口被占用了。此时我们ctrl+c停止服务器，接着输入“hexo server -p 端口号”来改变端口号<br><img src="/images/hexo/hexo14.png" class="full-image"><br>那么出现如下图就成功了<br><img src="/images/hexo/hexo15.png" class="full-image"></p><h2 id="5、将Hexo与Github-page联系起来，设置Git的user-name和email（如果是第一次的话）"><a href="#5、将Hexo与Github-page联系起来，设置Git的user-name和email（如果是第一次的话）" class="headerlink" title="5、将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）"></a>5、将Hexo与Github page联系起来，设置Git的user name和email（如果是第一次的话）</h2><p><img src="/images/hexo/hexo16.png" class="full-image"><br>上图是在其文件夹里面鼠标右键，点击Git Base Here。这里“feng”可以替换成自己的用户名，邮箱可以替换成自己的邮箱  </p><p>输入cd ~/.ssh，检查是否由.ssh的文件夹<br><img src="/images/hexo/hexo17.png" class="full-image"><br>输入ls，列出该文件下的内容。下图说明存在<br><img src="/images/hexo/hexo18.png" class="full-image"><br> 输入ssh-keygen -t rsa -C “929762930@qq.com”，连续三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub（默认存储路径是：C:\Users\Administrator.ssh）。<br><img src="/images/hexo/hexo19.png" class="full-image"><br>输入eval “$(ssh-agent -s)”，添加密钥到ssh-agent<br><img src="/images/hexo/hexo20.png" class="full-image"><br>再输入ssh-add ~/.ssh/id_rsa，添加生成的SSH key到ssh-agent<br><img src="/images/hexo/hexo21.png" class="full-image"><br>登录Github，点击头像下的settings，添加ssh<br><img src="/images/hexo/hexo22.png" class="full-image"><br>新建一个new ssh key，将id_rsa.pub文件里的内容复制上去<br><img src="/images/hexo/hexo23.png" class="full-image"><br>输入ssh -T git@github.com，测试添加ssh是否成功。如果看到Hi后面是你的用户名，就说明成功了<br><img src="/images/hexo/hexo24.png" class="full-image"></p><p>问题：假如ssh-key配置失败，那么只要以下步骤就能完全解决</p><p>首先，清除所有的key-pair<br>ssh-add -D<br>rm -r ~/.ssh<br>删除你在github中的public-key  </p><p>重新生成ssh密钥对<br>ssh-keygen -t rsa -C “xxx@xxx.com”  </p><p>接下来正常操作<br>在github上添加公钥public-key:<br>1、首先在你的终端运行 xclip -sel c ~/.ssh/id_rsa.pub将公钥内容复制到剪切板<br>2、在github上添加公钥时，直接复制即可<br>3、保存  </p><p>测试：<br>在终端 ssh -T git@github.com  </p><h2 id="6、配置Deployment，在其文件夹中，找到-config-yml文件，修改repo值（在末尾）"><a href="#6、配置Deployment，在其文件夹中，找到-config-yml文件，修改repo值（在末尾）" class="headerlink" title="6、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）"></a>6、配置Deployment，在其文件夹中，找到_config.yml文件，修改repo值（在末尾）</h2><p><img src="/images/hexo/hexo25.png" class="full-image"><br>repo值是你在github项目里的ssh（右下角）<br><img src="/images/hexo/hexo26.png" class="full-image"></p><h2 id="7、新建一篇博客，在cmd执行命令：hexo-new-post-“博客名”"><a href="#7、新建一篇博客，在cmd执行命令：hexo-new-post-“博客名”" class="headerlink" title="7、新建一篇博客，在cmd执行命令：hexo new post “博客名”"></a>7、新建一篇博客，在cmd执行命令：hexo new post “博客名”</h2><p><img src="/images/hexo/hexo27.png" class="full-image"><br>这时候在文件夹_posts目录下将会看到已经创建的文件<br><img src="/images/hexo/hexo28.png" class="full-image"><br>在生成以及部署文章之前，需要安装一个扩展：npm install hexo-deployer-git –save<br><img src="/images/hexo/hexo29.png" class="full-image"><br>使用编辑器编好文章，那么就可以使用命令：hexo d -g，生成以及部署了<br><img src="/images/hexo/hexo30.png" class="full-image"><br>部署成功后访问你的地址：<a href="http://用户名.github.io。那么将看到生成的文章" target="_blank" rel="noopener">http://用户名.github.io。那么将看到生成的文章</a><br><img src="/images/hexo/hexo31.png" class="full-image"><br>到此为止，最基本的也是最全面的hexo+github搭建博客完结。</p><div class="note success"><p>原文引自：<a href="http://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">http://www.cnblogs.com/fengxiongZz/p/7707219.html</a><br>其他参考：<a href="https://segmentfault.com/a/1190000009544924" target="_blank" rel="noopener">https://segmentfault.com/a/1190000009544924</a><br>其他参考：<a href="http://blog.csdn.net/u010053344/article/details/50701191" target="_blank" rel="noopener">http://blog.csdn.net/u010053344/article/details/50701191</a><br>NexT配置：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a> </p></div><p><div id="container"></div></p><p><link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"></p><script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script><script>var gitment = new Gitment({    owner: 'haimianbao1111',    repo: '2018/01/16/初探-Hexo',    oauth: {      client_id: '24f4cb2732b2cd293c3c',      client_secret: '54ad1cb8fc1bbab13871b8b9dd01004340aceca0',    },  })gitment.render('container')</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用Hexo+Github一步步搭建属于自己的博客&lt;/p&gt;
&lt;h1 id=&quot;相关步骤：&quot;&gt;&lt;a href=&quot;#相关步骤：&quot; class=&quot;headerlink&quot; title=&quot;相关步骤：&quot;&gt;&lt;/a&gt;相关步骤：&lt;/h1&gt;&lt;h2 id=&quot;1-安装Node-js和配置好Node-
      
    
    </summary>
    
      <category term="Hexo" scheme="http://haimianbao1111.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://haimianbao1111.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 高级配置</title>
    <link href="http://haimianbao1111.github.io/2018/01/16/Hexo-%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE/"/>
    <id>http://haimianbao1111.github.io/2018/01/16/Hexo-高级配置/</id>
    <published>2018-01-16T14:38:07.000Z</published>
    <updated>2018-01-28T09:47:19.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Site-网站"><a href="#Site-网站" class="headerlink" title="Site 网站"></a>Site 网站</h1><p>title: 为学   网站标题<br>subtitle: 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。   #网站副标题<br>description: 天下事有难易乎？为之，则难者亦易矣；不为，则易者亦难矣。   #网站描述<br>author: willxue   #您的名字<br>language: zh-CN   #网站使用的语言<br>timezone:           #网站时区。Hexo 默认使用您电脑的时区<br><!-- 阅读全文 --></p><h1 id="URL-网址"><a href="#URL-网址" class="headerlink" title="URL 网址"></a>URL 网址</h1><p>url: <a href="http://willxue.top" target="_blank" rel="noopener">http://willxue.top</a><br>permalink: :year/:month/:day/:title/    #生成文件名字的格式我改成blog/:title:year:month:day/<br>permalink_defaults:</p><h1 id="Directory-目录配置"><a href="#Directory-目录配置" class="headerlink" title="Directory 目录配置"></a>Directory 目录配置</h1><p>source_dir: source   #源文件夹，这个文件夹用来存放内容。<br>public_dir: public   #公共文件夹，这个文件夹用于存放生成的站点文件。<br>tag_dir: tags   #标签文件夹<br>archive_dir: archives   #归档文件夹<br>category_dir: categories   #分类文件夹<br>code_dir: downloads/code    #nclude code 文件夹<br>i18n_dir: :lang   #国际化（i18n）文件夹<br>skip_render:   #跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。</p><h1 id="Writing-文章"><a href="#Writing-文章" class="headerlink" title="Writing 文章"></a>Writing 文章</h1><p>new_post_name: :title.md   # 新建文章默认文件名<br>default_layout: post   # 默认布局<br>titlecase: false   # Transform title into titlecase<br>external_link: true   # 在新标签中打开一个外部链接，默认为true<br>filename_case: 0   #转换文件名，1代表小写；2代表大写；默认为0，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，意义不大。<br>render_drafts: false   #是否渲染_drafts目录下的文章，默认为false<br>post_asset_folder: false   #启动 Asset 文件夹<br>relative_link: false   #把链接改为与根目录的相对位址，默认false<br>future: true   #显示未来的文章，默认false<br>highlight:   #代码块的设置<br>  enable: true<br>  line_number: true<br>  auto_detect: false<br>  tab_replace:</p><p><div id="container"></div></p><p><link rel="stylesheet" href="https://imsun.github.io/gitment/style/default.css"></p><script src="https://imsun.github.io/gitment/dist/gitment.browser.js"></script><script>var gitment = new Gitment({    owner: 'haimianbao1111',    repo: '2018/01/16/Hexo-高级配置',    oauth: {      client_id: '24f4cb2732b2cd293c3c',      client_secret: '54ad1cb8fc1bbab13871b8b9dd01004340aceca0',    },  })gitment.render('container')</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Site-网站&quot;&gt;&lt;a href=&quot;#Site-网站&quot; class=&quot;headerlink&quot; title=&quot;Site 网站&quot;&gt;&lt;/a&gt;Site 网站&lt;/h1&gt;&lt;p&gt;title: 为学   网站标题&lt;br&gt;subtitle: 天下事有难易乎？为之，则难者亦易矣；不为
      
    
    </summary>
    
      <category term="Hexo" scheme="http://haimianbao1111.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="http://haimianbao1111.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
